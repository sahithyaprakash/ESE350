   1               		.file	"stlcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 113               	.global	testdrawchar
 115               	testdrawchar:
 116               		.stabd	46,0,0
   1:stlcd.c       **** /*
   2:stlcd.c       **** $Id:$
   3:stlcd.c       **** 
   4:stlcd.c       **** ST7565 LCD library!
   5:stlcd.c       **** 
   6:stlcd.c       **** Copyright (C) 2010 Limor Fried, Adafruit Industries
   7:stlcd.c       **** 
   8:stlcd.c       **** This library is free software; you can redistribute it and/or
   9:stlcd.c       **** modify it under the terms of the GNU Lesser General Public
  10:stlcd.c       **** License as published by the Free Software Foundation; either
  11:stlcd.c       **** version 2.1 of the License, or (at your option) any later version.
  12:stlcd.c       **** 
  13:stlcd.c       **** This library is distributed in the hope that it will be useful,
  14:stlcd.c       **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:stlcd.c       **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  16:stlcd.c       **** Lesser General Public License for more details.
  17:stlcd.c       **** 
  18:stlcd.c       **** You should have received a copy of the GNU Lesser General Public
  19:stlcd.c       **** License along with this library; if not, write to the Free Software
  20:stlcd.c       **** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  21:stlcd.c       **** 
  22:stlcd.c       ****  // some of this code was written by <cstone@pobox.com> originally; it is in the public domain.
  23:stlcd.c       **** */
  24:stlcd.c       **** 
  25:stlcd.c       **** #include <avr/io.h>
  26:stlcd.c       **** #include <util/delay.h>
  27:stlcd.c       **** #include <stdlib.h>
  28:stlcd.c       **** #include "stlcd.h"
  29:stlcd.c       **** #include "glcd.h"
  30:stlcd.c       **** #include "util.h"
  31:stlcd.c       **** #include "logo_glcd.h"
  32:stlcd.c       **** 
  33:stlcd.c       **** #define BLA_DDR DDRB
  34:stlcd.c       **** #define BLA_PIN PINB
  35:stlcd.c       **** #define BLA_PORT PORTB
  36:stlcd.c       **** #define BLA 2
  37:stlcd.c       **** 
  38:stlcd.c       **** #define SID_DDR DDRB
  39:stlcd.c       **** #define SID_PIN PINB
  40:stlcd.c       **** #define SID_PORT PORTB
  41:stlcd.c       **** #define SID 1
  42:stlcd.c       **** 
  43:stlcd.c       **** #define SCLK_DDR DDRB
  44:stlcd.c       **** #define SCLK_PIN PINB
  45:stlcd.c       **** #define SCLK_PORT PORTB
  46:stlcd.c       **** #define SCLK 0
  47:stlcd.c       **** 
  48:stlcd.c       **** #define A0_DDR DDRD
  49:stlcd.c       **** #define A0_PIN PIND
  50:stlcd.c       **** #define A0_PORT PORTD
  51:stlcd.c       **** #define A0 7
  52:stlcd.c       **** 
  53:stlcd.c       **** #define RST_DDR DDRD
  54:stlcd.c       **** #define RST_PIN PIND
  55:stlcd.c       **** #define RST_PORT PORTD
  56:stlcd.c       **** #define RST 6
  57:stlcd.c       **** 
  58:stlcd.c       **** #define CS_DDR DDRD
  59:stlcd.c       **** #define CS_PIN PIND
  60:stlcd.c       **** #define CS_PORT PORTD
  61:stlcd.c       **** #define CS 5
  62:stlcd.c       **** 
  63:stlcd.c       **** #define LED_DDR DDRB
  64:stlcd.c       **** #define LED_PORT PORTB
  65:stlcd.c       **** #define LED 5
  66:stlcd.c       **** 
  67:stlcd.c       **** uint8_t is_reversed = 0;
  68:stlcd.c       **** 
  69:stlcd.c       **** int pagemap[] = { 3, 2, 1, 0, 7, 6, 5, 4 };
  70:stlcd.c       **** 
  71:stlcd.c       **** uint8_t buffer[128 * 64 / 8] = {
  72:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  73:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  74:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  75:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  76:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  77:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  78:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  79:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  80:stlcd.c       **** 
  81:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  82:stlcd.c       ****   0x0, 0x0, 0x0, 0x3, 0x7, 0xF, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7, 0x0, 0x0, 0x0,
  83:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  84:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  85:stlcd.c       ****   0x0, 0x0, 0x7F, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  86:stlcd.c       ****   0x0, 0x0, 0x1F, 0x3F, 0x70, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  87:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3, 0x3,
  88:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  89:stlcd.c       **** 
  90:stlcd.c       ****   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0xF, 0x7, 0x7,
  91:stlcd.c       ****   0x7, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x0, 0x0,
  92:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0x3F,
  93:stlcd.c       ****   0x70, 0x60, 0x60, 0x60, 0x60, 0x30, 0x7F, 0x3F, 0x0, 0x0, 0x1F, 0x3F, 0x70, 0x60, 0x60, 0x60,
  94:stlcd.c       ****   0x60, 0x39, 0xFF, 0xFF, 0x0, 0x6, 0x1F, 0x39, 0x60, 0x60, 0x60, 0x60, 0x30, 0x3F, 0x7F, 0x0,
  95:stlcd.c       ****   0x0, 0x60, 0xFF, 0xFF, 0x60, 0x60, 0x0, 0x7F, 0x7F, 0x70, 0x60, 0x60, 0x40, 0x0, 0x7F, 0x7F,
  96:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0x0, 0x0, 0x60, 0xFF, 0xFF,
  97:stlcd.c       ****   0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  98:stlcd.c       **** 
  99:stlcd.c       ****   0x80, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xE7, 0xE7, 0xE3,
 100:stlcd.c       ****   0xF3, 0xF9, 0xFF, 0xFF, 0xFF, 0xF7, 0x7, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF,
 101:stlcd.c       ****   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x1F, 0xF, 0x7, 0x3, 0x0, 0x0, 0x0, 0xC0,
 102:stlcd.c       ****   0xE0, 0x60, 0x20, 0x20, 0x60, 0xE0, 0xE0, 0xE0, 0x0, 0x0, 0x80, 0xC0, 0xE0, 0x60, 0x20, 0x60,
 103:stlcd.c       ****   0x60, 0xE0, 0xE0, 0xE0, 0x0, 0x0, 0x80, 0xC0, 0x60, 0x60, 0x20, 0x60, 0x60, 0xE0, 0xE0, 0x0,
 104:stlcd.c       ****   0x0, 0x0, 0xE0, 0xE0, 0x0, 0x0, 0x0, 0xE0, 0xE0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xE0,
 105:stlcd.c       ****   0x60, 0x60, 0x60, 0x60, 0xE0, 0x80, 0x0, 0x0, 0x0, 0xE0, 0xE0, 0x0, 0x0, 0x0, 0xE0, 0xE0,
 106:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 107:stlcd.c       **** 
 108:stlcd.c       ****   0x0, 0x0, 0x0, 0x3, 0x7, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xF1, 0xE3,
 109:stlcd.c       ****   0xE3, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFC, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF,
 110:stlcd.c       ****   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0x80, 0x0, 0x0, 0x0, 0xC,
 111:stlcd.c       ****   0x1C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 112:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 113:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x0,
 114:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xC, 0x0, 0x0, 0x0, 0x0, 0x0,
 115:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 116:stlcd.c       **** 
 117:stlcd.c       ****   0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8,
 118:stlcd.c       ****   0xF8, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
 119:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF,
 120:stlcd.c       ****   0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xFF, 0x7F, 0x0, 0x0, 0x1E, 0x7F,
 121:stlcd.c       ****   0xE1, 0xC0, 0xC0, 0xC0, 0xC0, 0x61, 0xFF, 0xFF, 0x0, 0x0, 0xFE, 0xFF, 0x1, 0x0, 0x0, 0x0,
 122:stlcd.c       ****   0xFF, 0xFF, 0x0, 0x0, 0x21, 0xF9, 0xF8, 0xDC, 0xCC, 0xCF, 0x7, 0x0, 0xC0, 0xFF, 0xFF, 0xC0,
 123:stlcd.c       ****   0x80, 0x0, 0xFF, 0xFF, 0xC0, 0xC0, 0x80, 0x0, 0x0, 0xFF, 0xFF, 0x0, 0x0, 0x1F, 0x7F, 0xF9,
 124:stlcd.c       ****   0xC8, 0xC8, 0xC8, 0xC8, 0x79, 0x39, 0x0, 0x0, 0x71, 0xF9, 0xD8, 0xCC, 0xCE, 0x47, 0x3, 0x0,
 125:stlcd.c       **** 
 126:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x80, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 127:stlcd.c       ****   0x0, 0x0, 0x0, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0,
 128:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0,
 129:stlcd.c       ****   0xC0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x80,
 130:stlcd.c       ****   0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0,
 131:stlcd.c       ****   0xC0, 0x80, 0x0, 0x0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0,
 132:stlcd.c       ****   0x0, 0x0, 0xC0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x80, 0xC0,
 133:stlcd.c       ****   0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x0, 0x0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x0, 0x0,
 134:stlcd.c       **** 
 135:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 136:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 137:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 138:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 139:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 140:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 141:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 142:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 143:stlcd.c       **** 
 144:stlcd.c       **** };
 145:stlcd.c       **** 
 146:stlcd.c       **** void setup(void) {
 147:stlcd.c       **** 
 148:stlcd.c       ****   //Serial.begin(9600);
 149:stlcd.c       ****   //uart_init(BRRL_192);
 150:stlcd.c       **** 
 151:stlcd.c       ****   // turn on backlight
 152:stlcd.c       ****   BLA_DDR |= _BV(BLA);
 153:stlcd.c       ****   BLA_PORT |= _BV(BLA);
 154:stlcd.c       **** 
 155:stlcd.c       ****   LED_DDR |= _BV(LED);
 156:stlcd.c       ****   // Serial.println("init");
 157:stlcd.c       ****   //putstring_nl("init!");
 158:stlcd.c       **** 
 159:stlcd.c       ****   st7565_init();
 160:stlcd.c       **** 
 161:stlcd.c       **** 
 162:stlcd.c       ****   /*
 163:stlcd.c       ****   while (1) {
 164:stlcd.c       ****     spiwrite(0x55);
 165:stlcd.c       ****     _delay_ms(100);
 166:stlcd.c       ****   }
 167:stlcd.c       ****   */
 168:stlcd.c       **** 
 169:stlcd.c       ****   //Serial.println("on");
 170:stlcd.c       ****   //putstring_nl("on");
 171:stlcd.c       ****   st7565_command(CMD_DISPLAY_ON);
 172:stlcd.c       ****   //Serial.println("normal");
 173:stlcd.c       ****   //putstring_nl("normal");
 174:stlcd.c       ****   st7565_command(CMD_SET_ALLPTS_NORMAL);
 175:stlcd.c       ****   //Serial.println("bright");
 176:stlcd.c       ****   //putstring_nl("bright");
 177:stlcd.c       ****   st7565_set_brightness(0x20);
 178:stlcd.c       ****   //Serial.println("clear");
 179:stlcd.c       ****   //putstring_nl("clear");
 180:stlcd.c       ****   clear_screen();
 181:stlcd.c       ****   //Serial.println("blit");
 182:stlcd.c       ****   //putstring_nl("blit");
 183:stlcd.c       **** 
 184:stlcd.c       ****   // write_buffer(buffer);
 185:stlcd.c       ****   // putstring_nl("done");
 186:stlcd.c       ****   // _delay_ms(250);
 187:stlcd.c       ****   // clear_buffer(buffer);
 188:stlcd.c       **** 
 189:stlcd.c       ****   LED_PORT |= _BV(LED);
 190:stlcd.c       **** 
 191:stlcd.c       ****   //drawrect(buffer, 10, 10, 10, 10, 1);
 192:stlcd.c       ****   // testdrawrect(buffer);
 193:stlcd.c       ****   // testfillrect(buffer);
 194:stlcd.c       ****   //  testdrawline(buffer);
 195:stlcd.c       ****   // testdrawcircle(buffer);
 196:stlcd.c       ****   // fillcircle(buffer, 32, 32, 10, 1);
 197:stlcd.c       ****   // testdrawchar(buffer);
 198:stlcd.c       ****   // drawstring(buffer, 0, 0, "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiu
 199:stlcd.c       ****   // testdrawbitmap(buffer, logo16_glcd_bmp, 16, 16);
 200:stlcd.c       **** 
 201:stlcd.c       ****   //LED_PORT &= ~_BV(LED);
 202:stlcd.c       ****   write_buffer(buffer);
 203:stlcd.c       **** }
 204:stlcd.c       **** 
 205:stlcd.c       **** #define NUMFLAKES 10
 206:stlcd.c       **** #define XPOS 0
 207:stlcd.c       **** #define YPOS 1
 208:stlcd.c       **** #define DELTAY 2
 209:stlcd.c       **** 
 210:stlcd.c       **** void testdrawbitmap(uint8_t *buff, const uint8_t *bitmap, uint8_t w, uint8_t h) {
 211:stlcd.c       ****   uint8_t icons[NUMFLAKES][3];
 212:stlcd.c       ****   srandom(buff[666]);
 213:stlcd.c       **** 
 214:stlcd.c       ****   // initialize
 215:stlcd.c       ****   for (uint8_t f = 0; f < NUMFLAKES; f++) {
 216:stlcd.c       ****     icons[f][XPOS] = random() % 128;
 217:stlcd.c       ****     icons[f][YPOS] = 0;
 218:stlcd.c       ****     icons[f][DELTAY] = random() % 5 + 1;
 219:stlcd.c       ****   }
 220:stlcd.c       **** 
 221:stlcd.c       ****   while (1) {
 222:stlcd.c       ****     // draw each icon
 223:stlcd.c       ****     for (uint8_t f = 0; f < NUMFLAKES; f++) {
 224:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, 1);
 225:stlcd.c       ****     }
 226:stlcd.c       ****     write_buffer(buffer);
 227:stlcd.c       ****     _delay_ms(200);
 228:stlcd.c       **** 
 229:stlcd.c       ****     // then erase it + move it
 230:stlcd.c       ****     for (uint8_t f = 0; f < NUMFLAKES; f++) {
 231:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, 0);
 232:stlcd.c       ****       // move it
 233:stlcd.c       ****       icons[f][YPOS] += icons[f][DELTAY];
 234:stlcd.c       ****       // if its gone, reinit
 235:stlcd.c       ****       if (icons[f][YPOS] > 64) {
 236:stlcd.c       ****         icons[f][XPOS] = random() % 128;
 237:stlcd.c       ****         icons[f][YPOS] = 0;
 238:stlcd.c       ****         icons[f][DELTAY] = random() % 5 + 1;
 239:stlcd.c       ****       }
 240:stlcd.c       ****     }
 241:stlcd.c       ****   }
 242:stlcd.c       **** }
 243:stlcd.c       **** 
 244:stlcd.c       **** void testdrawchar(uint8_t *buff) {
 118               	.LM0:
 119               	.LFBB1:
 120 0000 CF93      		push r28
 121 0002 DF93      		push r29
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 2 */
 125               	.L__stack_usage = 2
 126               	.LBB21:
 245:stlcd.c       ****   for (uint8_t i = 0; i < 168; i++) {
 128               	.LM1:
 129 0004 C0E0      		ldi r28,0
 246:stlcd.c       ****     drawchar(buffer, (i % 21) * 6, i / 21, i);
 131               	.LM2:
 132 0006 D5E1      		ldi r29,lo8(21)
 133               	.L2:
 135               	.LM3:
 136 0008 8C2F      		mov r24,r28
 137 000a 6D2F      		mov r22,r29
 138 000c 0E94 0000 		call __udivmodqi4
 139 0010 692F      		mov r22,r25
 140 0012 660F      		lsl r22
 141 0014 960F      		add r25,r22
 142 0016 692F      		mov r22,r25
 143 0018 660F      		lsl r22
 144 001a 2C2F      		mov r18,r28
 145 001c 482F      		mov r20,r24
 146 001e 80E0      		ldi r24,lo8(buffer)
 147 0020 90E0      		ldi r25,hi8(buffer)
 148 0022 0E94 0000 		call drawchar
 245:stlcd.c       ****   for (uint8_t i = 0; i < 168; i++) {
 150               	.LM4:
 151 0026 CF5F      		subi r28,lo8(-(1))
 152 0028 C83A      		cpi r28,lo8(-88)
 153 002a 01F4      		brne .L2
 154               	/* epilogue start */
 155               	.LBE21:
 247:stlcd.c       ****   }
 248:stlcd.c       **** }
 157               	.LM5:
 158 002c DF91      		pop r29
 159 002e CF91      		pop r28
 160 0030 0895      		ret
 165               	.Lscope1:
 167               		.stabd	78,0,0
 170               	.global	testdrawcircle
 172               	testdrawcircle:
 173               		.stabd	46,0,0
 249:stlcd.c       **** 
 250:stlcd.c       **** void testdrawcircle(uint8_t *buff) {
 175               	.LM6:
 176               	.LFBB2:
 177 0032 0F93      		push r16
 178 0034 CF93      		push r28
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 2 */
 182               	.L__stack_usage = 2
 183               	.LBB22:
 251:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 185               	.LM7:
 186 0036 C0E0      		ldi r28,0
 187               	.L6:
 252:stlcd.c       ****     drawcircle(buffer, 63, 31, i, 1);
 189               	.LM8:
 190 0038 01E0      		ldi r16,lo8(1)
 191 003a 2C2F      		mov r18,r28
 192 003c 4FE1      		ldi r20,lo8(31)
 193 003e 6FE3      		ldi r22,lo8(63)
 194 0040 80E0      		ldi r24,lo8(buffer)
 195 0042 90E0      		ldi r25,hi8(buffer)
 196 0044 0E94 0000 		call drawcircle
 251:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 198               	.LM9:
 199 0048 CE5F      		subi r28,lo8(-(2))
 200 004a C034      		cpi r28,lo8(64)
 201 004c 01F4      		brne .L6
 202               	/* epilogue start */
 203               	.LBE22:
 253:stlcd.c       ****   }
 254:stlcd.c       **** }
 205               	.LM10:
 206 004e CF91      		pop r28
 207 0050 0F91      		pop r16
 208 0052 0895      		ret
 213               	.Lscope2:
 215               		.stabd	78,0,0
 218               	.global	testdrawrect
 220               	testdrawrect:
 221               		.stabd	46,0,0
 255:stlcd.c       **** 
 256:stlcd.c       **** void testdrawline(uint8_t *buff) {
 257:stlcd.c       ****   for (uint8_t i = 0; i < 128; i += 4) {
 258:stlcd.c       ****     drawline(buffer, 0, 0, i, 63, 1);
 259:stlcd.c       ****   }
 260:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 4) {
 261:stlcd.c       ****     drawline(buffer, 0, 0, 127, i, 1);
 262:stlcd.c       ****   }
 263:stlcd.c       **** 
 264:stlcd.c       ****   write_buffer(buffer);
 265:stlcd.c       ****   _delay_ms(1000);
 266:stlcd.c       **** 
 267:stlcd.c       ****   for (uint8_t i = 0; i < 128; i += 4) {
 268:stlcd.c       ****     drawline(buffer, i, 63, 0, 0, 0);
 269:stlcd.c       ****   }
 270:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 4) {
 271:stlcd.c       ****     drawline(buffer, 127, i, 0, 0, 0);
 272:stlcd.c       ****   }
 273:stlcd.c       **** }
 274:stlcd.c       **** 
 275:stlcd.c       **** void testdrawrect(uint8_t *buff) {
 223               	.LM11:
 224               	.LFBB3:
 225 0054 CF92      		push r12
 226 0056 DF92      		push r13
 227 0058 EF92      		push r14
 228 005a 0F93      		push r16
 229 005c 1F93      		push r17
 230 005e CF93      		push r28
 231 0060 DF93      		push r29
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 7 */
 235               	.L__stack_usage = 7
 236 0062 6C01      		movw r12,r24
 237               	.LBB23:
 276:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 239               	.LM12:
 240 0064 C0E0      		ldi r28,0
 241 0066 10E4      		ldi r17,lo8(64)
 242 0068 D0E8      		ldi r29,lo8(-128)
 243               	.L9:
 244 006a 012F      		mov r16,r17
 245 006c 0C1B      		sub r16,r28
 246 006e 2D2F      		mov r18,r29
 247 0070 2C1B      		sub r18,r28
 277:stlcd.c       ****     drawrect(buff, i, i, 128 - i, 64 - i, 1);
 249               	.LM13:
 250 0072 EE24      		clr r14
 251 0074 E394      		inc r14
 252 0076 4C2F      		mov r20,r28
 253 0078 6C2F      		mov r22,r28
 254 007a C601      		movw r24,r12
 255 007c 0E94 0000 		call drawrect
 276:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 257               	.LM14:
 258 0080 CE5F      		subi r28,lo8(-(2))
 259 0082 C034      		cpi r28,lo8(64)
 260 0084 01F4      		brne .L9
 261               	/* epilogue start */
 262               	.LBE23:
 278:stlcd.c       **** 
 279:stlcd.c       ****   }
 280:stlcd.c       **** }
 264               	.LM15:
 265 0086 DF91      		pop r29
 266 0088 CF91      		pop r28
 267 008a 1F91      		pop r17
 268 008c 0F91      		pop r16
 269 008e EF90      		pop r14
 270 0090 DF90      		pop r13
 271 0092 CF90      		pop r12
 272 0094 0895      		ret
 277               	.Lscope3:
 279               		.stabd	78,0,0
 282               	.global	testfillrect
 284               	testfillrect:
 285               		.stabd	46,0,0
 281:stlcd.c       **** 
 282:stlcd.c       **** 
 283:stlcd.c       **** void testfillrect(uint8_t *buff) {
 287               	.LM16:
 288               	.LFBB4:
 289 0096 CF92      		push r12
 290 0098 DF92      		push r13
 291 009a EF92      		push r14
 292 009c 0F93      		push r16
 293 009e 1F93      		push r17
 294 00a0 CF93      		push r28
 295 00a2 DF93      		push r29
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 7 */
 299               	.L__stack_usage = 7
 300 00a4 6C01      		movw r12,r24
 301               	.LBB24:
 284:stlcd.c       ****   for (uint8_t i = 0; i < 64; i++) {
 303               	.LM17:
 304 00a6 C0E0      		ldi r28,0
 305 00a8 10E4      		ldi r17,lo8(64)
 306 00aa D0E8      		ldi r29,lo8(-128)
 307               	.L12:
 285:stlcd.c       ****     fillrect(buff, i, i, 128 - i, 64 - i, i % 2);
 309               	.LM18:
 310 00ac 8C2F      		mov r24,r28
 311 00ae 8170      		andi r24,lo8(1)
 312 00b0 E82E      		mov r14,r24
 313 00b2 012F      		mov r16,r17
 314 00b4 0C1B      		sub r16,r28
 315 00b6 2D2F      		mov r18,r29
 316 00b8 2C1B      		sub r18,r28
 317 00ba 4C2F      		mov r20,r28
 318 00bc 6C2F      		mov r22,r28
 319 00be C601      		movw r24,r12
 320 00c0 0E94 0000 		call fillrect
 284:stlcd.c       ****   for (uint8_t i = 0; i < 64; i++) {
 322               	.LM19:
 323 00c4 CF5F      		subi r28,lo8(-(1))
 324 00c6 C034      		cpi r28,lo8(64)
 325 00c8 01F4      		brne .L12
 326               	/* epilogue start */
 327               	.LBE24:
 286:stlcd.c       **** 
 287:stlcd.c       ****   }
 288:stlcd.c       **** }
 329               	.LM20:
 330 00ca DF91      		pop r29
 331 00cc CF91      		pop r28
 332 00ce 1F91      		pop r17
 333 00d0 0F91      		pop r16
 334 00d2 EF90      		pop r14
 335 00d4 DF90      		pop r13
 336 00d6 CF90      		pop r12
 337 00d8 0895      		ret
 342               	.Lscope4:
 344               		.stabd	78,0,0
 347               	.global	spiwrite
 349               	spiwrite:
 350               		.stabd	46,0,0
 289:stlcd.c       **** 
 290:stlcd.c       **** void clear_screen(void) {
 291:stlcd.c       ****   uint8_t p, c;
 292:stlcd.c       **** 
 293:stlcd.c       ****   for (p = 0; p < 8; p++) {
 294:stlcd.c       ****     /*
 295:stlcd.c       ****       putstring("new page! ");
 296:stlcd.c       ****       uart_putw_dec(p);
 297:stlcd.c       ****       putstring_nl("");
 298:stlcd.c       ****     */
 299:stlcd.c       **** 
 300:stlcd.c       ****     st7565_command(CMD_SET_PAGE | p);
 301:stlcd.c       ****     for (c = 0; c < 129; c++) {
 302:stlcd.c       ****       //uart_putw_dec(c);
 303:stlcd.c       ****       //uart_putchar(' ');
 304:stlcd.c       ****       st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
 305:stlcd.c       ****       st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 306:stlcd.c       ****       st7565_data(0x00);
 307:stlcd.c       ****     }
 308:stlcd.c       ****   }
 309:stlcd.c       **** }
 310:stlcd.c       **** 
 311:stlcd.c       **** 
 312:stlcd.c       **** void st7565_init(void) {
 313:stlcd.c       ****   // set pin directions
 314:stlcd.c       ****   SID_DDR |= _BV(SID);
 315:stlcd.c       ****   SCLK_DDR |= _BV(SCLK);
 316:stlcd.c       ****   A0_DDR |= _BV(A0);
 317:stlcd.c       ****   RST_DDR |= _BV(RST);
 318:stlcd.c       ****   CS_DDR |= _BV(CS);
 319:stlcd.c       **** 
 320:stlcd.c       ****   // toggle RST low to reset; CS low so it'll listen to us
 321:stlcd.c       ****   CS_PORT &= ~_BV(CS);
 322:stlcd.c       ****   RST_PORT &= ~_BV(RST);
 323:stlcd.c       ****   _delay_ms(500);
 324:stlcd.c       ****   RST_PORT |= _BV(RST);
 325:stlcd.c       **** 
 326:stlcd.c       ****   // LCD bias select
 327:stlcd.c       ****   st7565_command(CMD_SET_BIAS_7);
 328:stlcd.c       ****   // ADC select
 329:stlcd.c       ****   st7565_command(CMD_SET_ADC_NORMAL);
 330:stlcd.c       ****   // SHL select
 331:stlcd.c       ****   st7565_command(CMD_SET_COM_NORMAL);
 332:stlcd.c       ****   // Initial display line
 333:stlcd.c       ****   st7565_command(CMD_SET_DISP_START_LINE);
 334:stlcd.c       **** 
 335:stlcd.c       ****   // turn on voltage converter (VC=1, VR=0, VF=0)
 336:stlcd.c       ****   st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 337:stlcd.c       ****   // wait for 50% rising
 338:stlcd.c       ****   _delay_ms(50);
 339:stlcd.c       **** 
 340:stlcd.c       ****   // turn on voltage regulator (VC=1, VR=1, VF=0)
 341:stlcd.c       ****   st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 342:stlcd.c       ****   // wait >=50ms
 343:stlcd.c       ****   _delay_ms(50);
 344:stlcd.c       **** 
 345:stlcd.c       ****   // turn on voltage follower (VC=1, VR=1, VF=1)
 346:stlcd.c       ****   st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 347:stlcd.c       ****   // wait
 348:stlcd.c       ****   _delay_ms(10);
 349:stlcd.c       **** 
 350:stlcd.c       ****   // set lcd operating voltage (regulator resistor, ref voltage resistor)
 351:stlcd.c       ****   st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 352:stlcd.c       **** 
 353:stlcd.c       ****   // initial display line
 354:stlcd.c       ****   // set page address
 355:stlcd.c       ****   // set column address
 356:stlcd.c       ****   // write display data
 357:stlcd.c       **** }
 358:stlcd.c       **** 
 359:stlcd.c       **** inline void spiwrite(uint8_t c) {
 352               	.LM21:
 353               	.LFBB5:
 354               	/* prologue: function */
 355               	/* frame size = 0 */
 356               	/* stack size = 0 */
 357               	.L__stack_usage = 0
 359               	.LM22:
 360 00da 27E0      		ldi r18,lo8(7)
 361 00dc 30E0      		ldi r19,0
 360:stlcd.c       ****   int8_t i;
 361:stlcd.c       ****   for (i = 7; i >= 0; i--) {
 362:stlcd.c       ****     SCLK_PORT &= ~_BV(SCLK);
 363:stlcd.c       ****     if (c & _BV(i))
 363               	.LM23:
 364 00de 90E0      		ldi r25,0
 365               	.L17:
 362:stlcd.c       ****     if (c & _BV(i))
 367               	.LM24:
 368 00e0 2898      		cbi 0x5,0
 370               	.LM25:
 371 00e2 AC01      		movw r20,r24
 372 00e4 022E      		mov r0,r18
 373 00e6 00C0      		rjmp 2f
 374               		1:
 375 00e8 5595      		asr r21
 376 00ea 4795      		ror r20
 377               		2:
 378 00ec 0A94      		dec r0
 379 00ee 02F4      		brpl 1b
 380 00f0 40FF      		sbrs r20,0
 381 00f2 00C0      		rjmp .L15
 364:stlcd.c       ****       SID_PORT |= _BV(SID);
 383               	.LM26:
 384 00f4 299A      		sbi 0x5,1
 385 00f6 00C0      		rjmp .L16
 386               	.L15:
 365:stlcd.c       ****     else
 366:stlcd.c       ****       SID_PORT &= ~_BV(SID);
 388               	.LM27:
 389 00f8 2998      		cbi 0x5,1
 390               	.L16:
 367:stlcd.c       ****     SCLK_PORT |= _BV(SCLK);
 392               	.LM28:
 393 00fa 289A      		sbi 0x5,0
 394 00fc 2150      		subi r18,1
 395 00fe 3109      		sbc r19,__zero_reg__
 396 0100 00F4      		brcc .L17
 397               	/* epilogue start */
 368:stlcd.c       ****   }
 369:stlcd.c       **** 
 370:stlcd.c       ****   /*
 371:stlcd.c       ****   // loop unwrapped! too fast doesnt work :(
 372:stlcd.c       **** 
 373:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 374:stlcd.c       ****   if (c & _BV(7))
 375:stlcd.c       ****     SID_PORT |= _BV(SID);
 376:stlcd.c       ****   else
 377:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 378:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 379:stlcd.c       **** 
 380:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 381:stlcd.c       ****   if (c & _BV(6))
 382:stlcd.c       ****     SID_PORT |= _BV(SID);
 383:stlcd.c       ****   else
 384:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 385:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 386:stlcd.c       **** 
 387:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 388:stlcd.c       ****   if (c & _BV(5))
 389:stlcd.c       ****     SID_PORT |= _BV(SID);
 390:stlcd.c       ****   else
 391:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 392:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 393:stlcd.c       **** 
 394:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 395:stlcd.c       ****   if (c & _BV(4))
 396:stlcd.c       ****     SID_PORT |= _BV(SID);
 397:stlcd.c       ****   else
 398:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 399:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 400:stlcd.c       **** 
 401:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 402:stlcd.c       ****   if (c & _BV(3))
 403:stlcd.c       ****     SID_PORT |= _BV(SID);
 404:stlcd.c       ****   else
 405:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 406:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 407:stlcd.c       **** 
 408:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 409:stlcd.c       ****   if (c & _BV(2))
 410:stlcd.c       ****     SID_PORT |= _BV(SID);
 411:stlcd.c       ****   else
 412:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 413:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 414:stlcd.c       **** 
 415:stlcd.c       **** 
 416:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 417:stlcd.c       ****   if (c & _BV(1))
 418:stlcd.c       ****     SID_PORT |= _BV(SID);
 419:stlcd.c       ****   else
 420:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 421:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 422:stlcd.c       **** 
 423:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 424:stlcd.c       ****   if (c & _BV(0))
 425:stlcd.c       ****     SID_PORT |= _BV(SID);
 426:stlcd.c       ****   else
 427:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 428:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 429:stlcd.c       ****   */
 430:stlcd.c       **** 
 431:stlcd.c       **** }
 399               	.LM29:
 400 0102 0895      		ret
 402               	.Lscope5:
 404               		.stabd	78,0,0
 407               	.global	st7565_command
 409               	st7565_command:
 410               		.stabd	46,0,0
 432:stlcd.c       **** void st7565_command(uint8_t c) {
 412               	.LM30:
 413               	.LFBB6:
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 0 */
 417               	.L__stack_usage = 0
 433:stlcd.c       ****   A0_PORT &= ~_BV(A0);
 419               	.LM31:
 420 0104 5F98      		cbi 0xb,7
 434:stlcd.c       **** 
 435:stlcd.c       ****   spiwrite(c);
 422               	.LM32:
 423 0106 0C94 0000 		jmp spiwrite
 425               	.Lscope6:
 427               		.stabd	78,0,0
 429               	.global	st7565_init
 431               	st7565_init:
 432               		.stabd	46,0,0
 312:stlcd.c       ****   // set pin directions
 434               	.LM33:
 435               	.LFBB7:
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 314:stlcd.c       ****   SCLK_DDR |= _BV(SCLK);
 441               	.LM34:
 442 010a 219A      		sbi 0x4,1
 315:stlcd.c       ****   A0_DDR |= _BV(A0);
 444               	.LM35:
 445 010c 209A      		sbi 0x4,0
 316:stlcd.c       ****   RST_DDR |= _BV(RST);
 447               	.LM36:
 448 010e 579A      		sbi 0xa,7
 317:stlcd.c       ****   CS_DDR |= _BV(CS);
 450               	.LM37:
 451 0110 569A      		sbi 0xa,6
 318:stlcd.c       **** 
 453               	.LM38:
 454 0112 559A      		sbi 0xa,5
 321:stlcd.c       ****   RST_PORT &= ~_BV(RST);
 456               	.LM39:
 457 0114 5D98      		cbi 0xb,5
 322:stlcd.c       ****   _delay_ms(500);
 459               	.LM40:
 460 0116 5E98      		cbi 0xb,6
 461               	.LBB25:
 462               	.LBB26:
 464               	.Ltext1:
   1:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  41:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  42:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  46:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \file */
  47:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \code
  49:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \endcode
  53:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  54:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     used.
  58:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  59:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  68:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  77:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  81:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** */
  82:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  87:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  88:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  93:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  94:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  97:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  98:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 103:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 104:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /**
 105:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 107:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 109:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 112:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 114:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 120:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 125:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 132:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 140:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 141:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** void
 142:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** {
 144:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 155:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 158:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#else
 159:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#endif
 162:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 163:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 466               	.LM41:
 467 0118 2FEF      		ldi r18,lo8(1599999)
 468 011a 89E6      		ldi r24,hi8(1599999)
 469 011c 98E1      		ldi r25,hlo8(1599999)
 470 011e 2150      		1: subi r18,1
 471 0120 8040      		sbci r24,0
 472 0122 9040      		sbci r25,0
 473 0124 01F4      		brne 1b
 474 0126 00C0      		rjmp .
 475 0128 0000      		nop
 476               	.LBE26:
 477               	.LBE25:
 479               	.Ltext2:
 324:stlcd.c       **** 
 481               	.LM42:
 482 012a 5E9A      		sbi 0xb,6
 327:stlcd.c       ****   // ADC select
 484               	.LM43:
 485 012c 83EA      		ldi r24,lo8(-93)
 486 012e 0E94 0000 		call st7565_command
 329:stlcd.c       ****   // SHL select
 488               	.LM44:
 489 0132 80EA      		ldi r24,lo8(-96)
 490 0134 0E94 0000 		call st7565_command
 331:stlcd.c       ****   // Initial display line
 492               	.LM45:
 493 0138 80EC      		ldi r24,lo8(-64)
 494 013a 0E94 0000 		call st7565_command
 333:stlcd.c       **** 
 496               	.LM46:
 497 013e 80E4      		ldi r24,lo8(64)
 498 0140 0E94 0000 		call st7565_command
 336:stlcd.c       ****   // wait for 50% rising
 500               	.LM47:
 501 0144 8CE2      		ldi r24,lo8(44)
 502 0146 0E94 0000 		call st7565_command
 503               	.LBB27:
 504               	.LBB28:
 506               	.Ltext3:
 508               	.LM48:
 509 014a 2FEF      		ldi r18,lo8(159999)
 510 014c 80E7      		ldi r24,hi8(159999)
 511 014e 92E0      		ldi r25,hlo8(159999)
 512 0150 2150      		1: subi r18,1
 513 0152 8040      		sbci r24,0
 514 0154 9040      		sbci r25,0
 515 0156 01F4      		brne 1b
 516 0158 00C0      		rjmp .
 517 015a 0000      		nop
 518               	.LBE28:
 519               	.LBE27:
 521               	.Ltext4:
 341:stlcd.c       ****   // wait >=50ms
 523               	.LM49:
 524 015c 8EE2      		ldi r24,lo8(46)
 525 015e 0E94 0000 		call st7565_command
 526               	.LBB29:
 527               	.LBB30:
 529               	.Ltext5:
 531               	.LM50:
 532 0162 2FEF      		ldi r18,lo8(159999)
 533 0164 80E7      		ldi r24,hi8(159999)
 534 0166 92E0      		ldi r25,hlo8(159999)
 535 0168 2150      		1: subi r18,1
 536 016a 8040      		sbci r24,0
 537 016c 9040      		sbci r25,0
 538 016e 01F4      		brne 1b
 539 0170 00C0      		rjmp .
 540 0172 0000      		nop
 541               	.LBE30:
 542               	.LBE29:
 544               	.Ltext6:
 346:stlcd.c       ****   // wait
 546               	.LM51:
 547 0174 8FE2      		ldi r24,lo8(47)
 548 0176 0E94 0000 		call st7565_command
 549               	.LBB31:
 550               	.LBB32:
 552               	.Ltext7:
 554               	.LM52:
 555 017a 8FE3      		ldi r24,lo8(-25537)
 556 017c 9CE9      		ldi r25,hi8(-25537)
 557 017e 0197      		1: sbiw r24,1
 558 0180 01F4      		brne 1b
 559 0182 00C0      		rjmp .
 560 0184 0000      		nop
 561               	.LBE32:
 562               	.LBE31:
 564               	.Ltext8:
 351:stlcd.c       **** 
 566               	.LM53:
 567 0186 86E2      		ldi r24,lo8(38)
 568 0188 0C94 0000 		jmp st7565_command
 570               	.Lscope7:
 572               		.stabd	78,0,0
 575               	.global	st7565_data
 577               	st7565_data:
 578               		.stabd	46,0,0
 436:stlcd.c       **** }
 437:stlcd.c       **** 
 438:stlcd.c       **** void st7565_data(uint8_t c) {
 580               	.LM54:
 581               	.LFBB8:
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 439:stlcd.c       ****   A0_PORT |= _BV(A0);
 587               	.LM55:
 588 018c 5F9A      		sbi 0xb,7
 440:stlcd.c       **** 
 441:stlcd.c       ****   spiwrite(c);
 590               	.LM56:
 591 018e 0C94 0000 		jmp spiwrite
 593               	.Lscope8:
 595               		.stabd	78,0,0
 597               	.global	clear_screen
 599               	clear_screen:
 600               		.stabd	46,0,0
 290:stlcd.c       ****   uint8_t p, c;
 602               	.LM57:
 603               	.LFBB9:
 604 0192 CF93      		push r28
 605 0194 DF93      		push r29
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 2 */
 609               	.L__stack_usage = 2
 293:stlcd.c       ****     /*
 611               	.LM58:
 612 0196 D0E0      		ldi r29,0
 613               	.L24:
 300:stlcd.c       ****     for (c = 0; c < 129; c++) {
 615               	.LM59:
 616 0198 8D2F      		mov r24,r29
 617 019a 806B      		ori r24,lo8(-80)
 618 019c 0E94 0000 		call st7565_command
 301:stlcd.c       ****       //uart_putw_dec(c);
 620               	.LM60:
 621 01a0 C0E0      		ldi r28,0
 622               	.L23:
 304:stlcd.c       ****       st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 624               	.LM61:
 625 01a2 8C2F      		mov r24,r28
 626 01a4 8F70      		andi r24,lo8(15)
 627 01a6 0E94 0000 		call st7565_command
 305:stlcd.c       ****       st7565_data(0x00);
 629               	.LM62:
 630 01aa 8C2F      		mov r24,r28
 631 01ac 8295      		swap r24
 632 01ae 8F70      		andi r24,lo8(15)
 633 01b0 8061      		ori r24,lo8(16)
 634 01b2 0E94 0000 		call st7565_command
 306:stlcd.c       ****     }
 636               	.LM63:
 637 01b6 80E0      		ldi r24,0
 638 01b8 0E94 0000 		call st7565_data
 301:stlcd.c       ****       //uart_putw_dec(c);
 640               	.LM64:
 641 01bc CF5F      		subi r28,lo8(-(1))
 642 01be C138      		cpi r28,lo8(-127)
 643 01c0 01F4      		brne .L23
 293:stlcd.c       ****     /*
 645               	.LM65:
 646 01c2 DF5F      		subi r29,lo8(-(1))
 647 01c4 D830      		cpi r29,lo8(8)
 648 01c6 01F4      		brne .L24
 649               	/* epilogue start */
 309:stlcd.c       **** 
 651               	.LM66:
 652 01c8 DF91      		pop r29
 653 01ca CF91      		pop r28
 654 01cc 0895      		ret
 660               	.Lscope9:
 662               		.stabd	78,0,0
 665               	.global	st7565_set_brightness
 667               	st7565_set_brightness:
 668               		.stabd	46,0,0
 442:stlcd.c       **** }
 443:stlcd.c       **** void st7565_set_brightness(uint8_t val) {
 670               	.LM67:
 671               	.LFBB10:
 672 01ce CF93      		push r28
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 1 */
 676               	.L__stack_usage = 1
 677 01d0 C82F      		mov r28,r24
 444:stlcd.c       ****   st7565_command(CMD_SET_VOLUME_FIRST);
 679               	.LM68:
 680 01d2 81E8      		ldi r24,lo8(-127)
 681 01d4 0E94 0000 		call st7565_command
 445:stlcd.c       ****   st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 683               	.LM69:
 684 01d8 8C2F      		mov r24,r28
 685 01da 8F73      		andi r24,lo8(63)
 686               	/* epilogue start */
 446:stlcd.c       **** }
 688               	.LM70:
 689 01dc CF91      		pop r28
 445:stlcd.c       ****   st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 691               	.LM71:
 692 01de 0C94 0000 		jmp st7565_command
 694               	.Lscope10:
 696               		.stabd	78,0,0
 697               		.section	.rodata.str1.1,"aMS",@progbits,1
 698               	.LC0:
 699 0000 7772 6974 		.string	"write_buffer "
 699      655F 6275 
 699      6666 6572 
 699      2000 
 700               	.LC1:
 701 000e 7061 6765 		.string	"page: %i\n"
 701      3A20 2569 
 701      0A00 
 702               		.text
 704               	.global	write_buffer
 706               	write_buffer:
 707               		.stabd	46,0,0
 447:stlcd.c       **** 
 448:stlcd.c       **** 
 449:stlcd.c       **** void write_buffer(uint8_t *buffer) {
 709               	.LM72:
 710               	.LFBB11:
 711 01e2 8F92      		push r8
 712 01e4 9F92      		push r9
 713 01e6 AF92      		push r10
 714 01e8 BF92      		push r11
 715 01ea CF92      		push r12
 716 01ec DF92      		push r13
 717 01ee EF92      		push r14
 718 01f0 FF92      		push r15
 719 01f2 0F93      		push r16
 720 01f4 1F93      		push r17
 721 01f6 CF93      		push r28
 722 01f8 DF93      		push r29
 723               	/* prologue: function */
 724               	/* frame size = 0 */
 725               	/* stack size = 12 */
 726               	.L__stack_usage = 12
 727 01fa 7C01      		movw r14,r24
 450:stlcd.c       ****   uint8_t c, p;
 451:stlcd.c       ****   printf("write_buffer \n");
 729               	.LM73:
 730 01fc 80E0      		ldi r24,lo8(.LC0)
 731 01fe 90E0      		ldi r25,hi8(.LC0)
 732 0200 0E94 0000 		call puts
 733 0204 00E0      		ldi r16,lo8(pagemap)
 734 0206 10E0      		ldi r17,hi8(pagemap)
 735 0208 E701      		movw r28,r14
 736 020a 5701      		movw r10,r14
 737 020c 8CEF      		ldi r24,-4
 738 020e B81A      		sub r11,r24
 452:stlcd.c       ****   for (p = 0; p < 8; p++) {
 453:stlcd.c       ****     /*
 454:stlcd.c       ****       putstring("new page! ");
 455:stlcd.c       ****       uart_putw_dec(p);
 456:stlcd.c       ****       putstring_nl("");
 457:stlcd.c       ****     */
 458:stlcd.c       ****     st7565_command(CMD_SET_PAGE | pagemap[p]);
 459:stlcd.c       ****     printf("page: %i\n", pagemap[p]);
 740               	.LM74:
 741 0210 80E0      		ldi r24,lo8(.LC1)
 742 0212 C82E      		mov r12,r24
 743 0214 80E0      		ldi r24,hi8(.LC1)
 744 0216 D82E      		mov r13,r24
 745               	.L30:
 458:stlcd.c       ****     printf("page: %i\n", pagemap[p]);
 747               	.LM75:
 748 0218 F801      		movw r30,r16
 749 021a 8081      		ld r24,Z
 750 021c 806B      		ori r24,lo8(-80)
 751 021e 0E94 0000 		call st7565_command
 753               	.LM76:
 754 0222 F801      		movw r30,r16
 755 0224 8181      		ldd r24,Z+1
 756 0226 0E5F      		subi r16,-2
 757 0228 1F4F      		sbci r17,-1
 758 022a 8F93      		push r24
 759 022c 8081      		ld r24,Z
 760 022e 8F93      		push r24
 761 0230 DF92      		push r13
 762 0232 CF92      		push r12
 763 0234 0E94 0000 		call printf
 460:stlcd.c       ****     st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 765               	.LM77:
 766 0238 80E0      		ldi r24,0
 767 023a 0E94 0000 		call st7565_command
 461:stlcd.c       ****     st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 769               	.LM78:
 770 023e 80E1      		ldi r24,lo8(16)
 771 0240 0E94 0000 		call st7565_command
 462:stlcd.c       ****     st7565_command(CMD_RMW);
 773               	.LM79:
 774 0244 80EE      		ldi r24,lo8(-32)
 775 0246 0E94 0000 		call st7565_command
 463:stlcd.c       ****     st7565_data(0xff);
 777               	.LM80:
 778 024a 8FEF      		ldi r24,lo8(-1)
 779 024c 0E94 0000 		call st7565_data
 780 0250 0F90      		pop __tmp_reg__
 781 0252 0F90      		pop __tmp_reg__
 782 0254 0F90      		pop __tmp_reg__
 783 0256 0F90      		pop __tmp_reg__
 784 0258 4E01      		movw r8,r28
 464:stlcd.c       **** 
 465:stlcd.c       ****     //st7565_data(0x80);
 466:stlcd.c       ****     //continue;
 467:stlcd.c       **** 
 468:stlcd.c       ****     for (c = 0; c < 128; c++) {
 786               	.LM81:
 787 025a F12C      		mov r15,__zero_reg__
 788               	.L29:
 469:stlcd.c       ****       //uart_putw_dec(c);
 470:stlcd.c       ****       //uart_putchar(' ');
 471:stlcd.c       ****       st7565_data(buffer[(128 * p) + c]);
 790               	.LM82:
 791 025c F401      		movw r30,r8
 792 025e 8191      		ld r24,Z+
 793 0260 4F01      		movw r8,r30
 794 0262 0E94 0000 		call st7565_data
 468:stlcd.c       ****       //uart_putw_dec(c);
 796               	.LM83:
 797 0266 F394      		inc r15
 798 0268 F0E8      		ldi r31,lo8(-128)
 799 026a FF12      		cpse r15,r31
 800 026c 00C0      		rjmp .L29
 801 026e C058      		subi r28,-128
 802 0270 DF4F      		sbci r29,-1
 452:stlcd.c       ****     /*
 804               	.LM84:
 805 0272 CA15      		cp r28,r10
 806 0274 DB05      		cpc r29,r11
 807 0276 01F4      		brne .L30
 808               	/* epilogue start */
 472:stlcd.c       ****     }
 473:stlcd.c       ****   }
 474:stlcd.c       **** }
 810               	.LM85:
 811 0278 DF91      		pop r29
 812 027a CF91      		pop r28
 813 027c 1F91      		pop r17
 814 027e 0F91      		pop r16
 815 0280 FF90      		pop r15
 816 0282 EF90      		pop r14
 817 0284 DF90      		pop r13
 818 0286 CF90      		pop r12
 819 0288 BF90      		pop r11
 820 028a AF90      		pop r10
 821 028c 9F90      		pop r9
 822 028e 8F90      		pop r8
 823 0290 0895      		ret
 828               	.Lscope11:
 830               		.stabd	78,0,0
 832               	.global	setup
 834               	setup:
 835               		.stabd	46,0,0
 146:stlcd.c       **** 
 837               	.LM86:
 838               	.LFBB12:
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 0 */
 842               	.L__stack_usage = 0
 152:stlcd.c       ****   BLA_PORT |= _BV(BLA);
 844               	.LM87:
 845 0292 229A      		sbi 0x4,2
 153:stlcd.c       **** 
 847               	.LM88:
 848 0294 2A9A      		sbi 0x5,2
 155:stlcd.c       ****   // Serial.println("init");
 850               	.LM89:
 851 0296 259A      		sbi 0x4,5
 159:stlcd.c       **** 
 853               	.LM90:
 854 0298 0E94 0000 		call st7565_init
 171:stlcd.c       ****   //Serial.println("normal");
 856               	.LM91:
 857 029c 8FEA      		ldi r24,lo8(-81)
 858 029e 0E94 0000 		call st7565_command
 174:stlcd.c       ****   //Serial.println("bright");
 860               	.LM92:
 861 02a2 84EA      		ldi r24,lo8(-92)
 862 02a4 0E94 0000 		call st7565_command
 177:stlcd.c       ****   //Serial.println("clear");
 864               	.LM93:
 865 02a8 80E2      		ldi r24,lo8(32)
 866 02aa 0E94 0000 		call st7565_set_brightness
 180:stlcd.c       ****   //Serial.println("blit");
 868               	.LM94:
 869 02ae 0E94 0000 		call clear_screen
 189:stlcd.c       **** 
 871               	.LM95:
 872 02b2 2D9A      		sbi 0x5,5
 202:stlcd.c       **** }
 874               	.LM96:
 875 02b4 80E0      		ldi r24,lo8(buffer)
 876 02b6 90E0      		ldi r25,hi8(buffer)
 877 02b8 0C94 0000 		jmp write_buffer
 879               	.Lscope12:
 881               		.stabd	78,0,0
 887               	.global	testdrawbitmap
 889               	testdrawbitmap:
 890               		.stabd	46,0,0
 210:stlcd.c       ****   uint8_t icons[NUMFLAKES][3];
 892               	.LM97:
 893               	.LFBB13:
 894 02bc CF93      		push r28
 895 02be DF93      		push r29
 896 02c0 CDB7      		in r28,__SP_L__
 897 02c2 DEB7      		in r29,__SP_H__
 898 02c4 6F97      		sbiw r28,31
 899 02c6 0FB6      		in __tmp_reg__,__SREG__
 900 02c8 F894      		cli
 901 02ca DEBF      		out __SP_H__,r29
 902 02cc 0FBE      		out __SREG__,__tmp_reg__
 903 02ce CDBF      		out __SP_L__,r28
 904               	/* prologue: function */
 905               	/* frame size = 31 */
 906               	/* stack size = 33 */
 907               	.L__stack_usage = 33
 908 02d0 4F8F      		std Y+31,r20
 909 02d2 F22E      		mov r15,r18
 212:stlcd.c       **** 
 911               	.LM98:
 912 02d4 FC01      		movw r30,r24
 913 02d6 E656      		subi r30,102
 914 02d8 FD4F      		sbci r31,-3
 915 02da 6081      		ld r22,Z
 916 02dc 70E0      		ldi r23,0
 917 02de 80E0      		ldi r24,0
 918 02e0 90E0      		ldi r25,0
 919 02e2 0E94 0000 		call srandom
 920 02e6 6E01      		movw r12,r28
 921 02e8 21E2      		ldi r18,33
 922 02ea C20E      		add r12,r18
 923 02ec D11C      		adc r13,__zero_reg__
 924 02ee 8E01      		movw r16,r28
 925 02f0 0D5F      		subi r16,-3
 926 02f2 1F4F      		sbci r17,-1
 927               	.LBB33:
 216:stlcd.c       ****     icons[f][YPOS] = 0;
 929               	.LM99:
 930 02f4 80E8      		ldi r24,lo8(-128)
 931 02f6 882E      		mov r8,r24
 932 02f8 912C      		mov r9,__zero_reg__
 933 02fa A12C      		mov r10,__zero_reg__
 934 02fc B12C      		mov r11,__zero_reg__
 218:stlcd.c       ****   }
 936               	.LM100:
 937 02fe 95E0      		ldi r25,lo8(5)
 938 0300 492E      		mov r4,r25
 939 0302 512C      		mov r5,__zero_reg__
 940 0304 612C      		mov r6,__zero_reg__
 941 0306 712C      		mov r7,__zero_reg__
 942               	.L35:
 216:stlcd.c       ****     icons[f][YPOS] = 0;
 944               	.LM101:
 945 0308 0E94 0000 		call random
 946 030c 1801      		movw r2,r16
 947 030e E2E0      		ldi r30,2
 948 0310 2E1A      		sub r2,r30
 949 0312 3108      		sbc r3,__zero_reg__
 950 0314 A501      		movw r20,r10
 951 0316 9401      		movw r18,r8
 952 0318 0E94 0000 		call __divmodsi4
 953 031c F101      		movw r30,r2
 954 031e 6083      		st Z,r22
 955 0320 3196      		adiw r30,1
 217:stlcd.c       ****     icons[f][DELTAY] = random() % 5 + 1;
 957               	.LM102:
 958 0322 1082      		st Z,__zero_reg__
 218:stlcd.c       ****   }
 960               	.LM103:
 961 0324 0E94 0000 		call random
 962 0328 A301      		movw r20,r6
 963 032a 9201      		movw r18,r4
 964 032c 0E94 0000 		call __divmodsi4
 965 0330 6F5F      		subi r22,lo8(-(1))
 966 0332 F801      		movw r30,r16
 967 0334 6083      		st Z,r22
 968 0336 0D5F      		subi r16,-3
 969 0338 1F4F      		sbci r17,-1
 215:stlcd.c       ****     icons[f][XPOS] = random() % 128;
 971               	.LM104:
 972 033a 0C15      		cp r16,r12
 973 033c 1D05      		cpc r17,r13
 974 033e 01F4      		brne .L35
 975 0340 1E01      		movw r2,r28
 976 0342 FFE1      		ldi r31,31
 977 0344 2F0E      		add r2,r31
 978 0346 311C      		adc r3,__zero_reg__
 979 0348 80E0      		ldi r24,lo8(logo16_glcd_bmp)
 980 034a 90E0      		ldi r25,hi8(logo16_glcd_bmp)
 981 034c 182F      		mov r17,r24
 982               	.L43:
 983 034e FE01      		movw r30,r28
 984 0350 3196      		adiw r30,1
 985 0352 3F01      		movw r6,r30
 986               	.LBE33:
 212:stlcd.c       **** 
 988               	.LM105:
 989 0354 5F01      		movw r10,r30
 990               	.L36:
 991               	.LBB34:
 224:stlcd.c       ****     }
 993               	.LM106:
 994 0356 CC24      		clr r12
 995 0358 C394      		inc r12
 996 035a EF2C      		mov r14,r15
 997 035c 0F8D      		ldd r16,Y+31
 998 035e E0E0      		ldi r30,lo8(logo16_glcd_bmp)
 999 0360 F0E0      		ldi r31,hi8(logo16_glcd_bmp)
 1000 0362 2E2F      		mov r18,r30
 1001 0364 F501      		movw r30,r10
 1002 0366 4181      		ldd r20,Z+1
 1003 0368 6081      		ld r22,Z
 1004 036a 80E0      		ldi r24,lo8(buffer)
 1005 036c 90E0      		ldi r25,hi8(buffer)
 1006 036e 0E94 0000 		call drawbitmap
 1007 0372 F3E0      		ldi r31,3
 1008 0374 AF0E      		add r10,r31
 1009 0376 B11C      		adc r11,__zero_reg__
 223:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, 1);
 1011               	.LM107:
 1012 0378 A214      		cp r10,r2
 1013 037a B304      		cpc r11,r3
 1014 037c 01F4      		brne .L36
 1015               	.LBE34:
 226:stlcd.c       ****     _delay_ms(200);
 1017               	.LM108:
 1018 037e 80E0      		ldi r24,lo8(buffer)
 1019 0380 90E0      		ldi r25,hi8(buffer)
 1020 0382 0E94 0000 		call write_buffer
 1021               	.LBB35:
 1022               	.LBB36:
 1024               	.Ltext9:
 1026               	.LM109:
 1027 0386 2FEF      		ldi r18,lo8(639999)
 1028 0388 83EC      		ldi r24,hi8(639999)
 1029 038a 99E0      		ldi r25,hlo8(639999)
 1030 038c 2150      		1: subi r18,1
 1031 038e 8040      		sbci r24,0
 1032 0390 9040      		sbci r25,0
 1033 0392 01F4      		brne 1b
 1034 0394 00C0      		rjmp .
 1035 0396 0000      		nop
 1036 0398 FE01      		movw r30,r28
 1037 039a 3296      		adiw r30,2
 1038 039c 5F01      		movw r10,r30
 1039 039e CE01      		movw r24,r28
 1040 03a0 0396      		adiw r24,3
 1041 03a2 2C01      		movw r4,r24
 1042               	.L38:
 1043               	.LBE36:
 1044               	.LBE35:
 1045               	.LBB37:
 1047               	.Ltext10:
 231:stlcd.c       ****       // move it
 1049               	.LM110:
 1050 03a4 C12C      		mov r12,__zero_reg__
 1051 03a6 EF2C      		mov r14,r15
 1052 03a8 0F8D      		ldd r16,Y+31
 1053 03aa 212F      		mov r18,r17
 1054 03ac F501      		movw r30,r10
 1055 03ae 4081      		ld r20,Z
 1056 03b0 F301      		movw r30,r6
 1057 03b2 6081      		ld r22,Z
 1058 03b4 80E0      		ldi r24,lo8(buffer)
 1059 03b6 90E0      		ldi r25,hi8(buffer)
 1060 03b8 0E94 0000 		call drawbitmap
 233:stlcd.c       ****       // if its gone, reinit
 1062               	.LM111:
 1063 03bc F201      		movw r30,r4
 1064 03be 9081      		ld r25,Z
 1065 03c0 F501      		movw r30,r10
 1066 03c2 8081      		ld r24,Z
 1067 03c4 890F      		add r24,r25
 1068 03c6 8083      		st Z,r24
 235:stlcd.c       ****         icons[f][XPOS] = random() % 128;
 1070               	.LM112:
 1071 03c8 8134      		cpi r24,lo8(65)
 1072 03ca 00F0      		brlo .L37
 236:stlcd.c       ****         icons[f][YPOS] = 0;
 1074               	.LM113:
 1075 03cc 0E94 0000 		call random
 1076 03d0 20E8      		ldi r18,lo8(-128)
 1077 03d2 30E0      		ldi r19,0
 1078 03d4 40E0      		ldi r20,0
 1079 03d6 50E0      		ldi r21,0
 1080 03d8 0E94 0000 		call __divmodsi4
 1081 03dc F301      		movw r30,r6
 1082 03de 6083      		st Z,r22
 237:stlcd.c       ****         icons[f][DELTAY] = random() % 5 + 1;
 1084               	.LM114:
 1085 03e0 F501      		movw r30,r10
 1086 03e2 1082      		st Z,__zero_reg__
 238:stlcd.c       ****       }
 1088               	.LM115:
 1089 03e4 0E94 0000 		call random
 1090 03e8 25E0      		ldi r18,lo8(5)
 1091 03ea 30E0      		ldi r19,0
 1092 03ec 40E0      		ldi r20,0
 1093 03ee 50E0      		ldi r21,0
 1094 03f0 0E94 0000 		call __divmodsi4
 1095 03f4 6F5F      		subi r22,lo8(-(1))
 1096 03f6 F201      		movw r30,r4
 1097 03f8 6083      		st Z,r22
 1098               	.L37:
 1099 03fa F3E0      		ldi r31,3
 1100 03fc AF0E      		add r10,r31
 1101 03fe B11C      		adc r11,__zero_reg__
 1102 0400 23E0      		ldi r18,3
 1103 0402 620E      		add r6,r18
 1104 0404 711C      		adc r7,__zero_reg__
 1105 0406 83E0      		ldi r24,3
 1106 0408 480E      		add r4,r24
 1107 040a 511C      		adc r5,__zero_reg__
 230:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, 0);
 1109               	.LM116:
 1110 040c 6214      		cp r6,r2
 1111 040e 7304      		cpc r7,r3
 1112 0410 01F4      		brne .L38
 1113 0412 00C0      		rjmp .L43
 1114               	.LBE37:
 1119               	.Lscope13:
 1121               		.stabd	78,0,0
 1124               	.global	testdrawline
 1126               	testdrawline:
 1127               		.stabd	46,0,0
 256:stlcd.c       ****   for (uint8_t i = 0; i < 128; i += 4) {
 1129               	.LM117:
 1130               	.LFBB14:
 1131 0414 EF92      		push r14
 1132 0416 0F93      		push r16
 1133 0418 CF93      		push r28
 1134               	/* prologue: function */
 1135               	/* frame size = 0 */
 1136               	/* stack size = 3 */
 1137               	.L__stack_usage = 3
 1138               	.LBB38:
 257:stlcd.c       ****     drawline(buffer, 0, 0, i, 63, 1);
 1140               	.LM118:
 1141 041a C0E0      		ldi r28,0
 1142               	.L45:
 258:stlcd.c       ****   }
 1144               	.LM119:
 1145 041c EE24      		clr r14
 1146 041e E394      		inc r14
 1147 0420 0FE3      		ldi r16,lo8(63)
 1148 0422 2C2F      		mov r18,r28
 1149 0424 40E0      		ldi r20,0
 1150 0426 60E0      		ldi r22,0
 1151 0428 80E0      		ldi r24,lo8(buffer)
 1152 042a 90E0      		ldi r25,hi8(buffer)
 1153 042c 0E94 0000 		call drawline
 257:stlcd.c       ****     drawline(buffer, 0, 0, i, 63, 1);
 1155               	.LM120:
 1156 0430 CC5F      		subi r28,lo8(-(4))
 1157 0432 C038      		cpi r28,lo8(-128)
 1158 0434 01F4      		brne .L45
 1159 0436 C0E0      		ldi r28,0
 1160               	.L46:
 1161               	.LBE38:
 1162               	.LBB39:
 261:stlcd.c       ****   }
 1164               	.LM121:
 1165 0438 EE24      		clr r14
 1166 043a E394      		inc r14
 1167 043c 0C2F      		mov r16,r28
 1168 043e 2FE7      		ldi r18,lo8(127)
 1169 0440 40E0      		ldi r20,0
 1170 0442 60E0      		ldi r22,0
 1171 0444 80E0      		ldi r24,lo8(buffer)
 1172 0446 90E0      		ldi r25,hi8(buffer)
 1173 0448 0E94 0000 		call drawline
 260:stlcd.c       ****     drawline(buffer, 0, 0, 127, i, 1);
 1175               	.LM122:
 1176 044c CC5F      		subi r28,lo8(-(4))
 1177 044e C034      		cpi r28,lo8(64)
 1178 0450 01F4      		brne .L46
 1179               	.LBE39:
 264:stlcd.c       ****   _delay_ms(1000);
 1181               	.LM123:
 1182 0452 80E0      		ldi r24,lo8(buffer)
 1183 0454 90E0      		ldi r25,hi8(buffer)
 1184 0456 0E94 0000 		call write_buffer
 1185               	.LBB40:
 1186               	.LBB41:
 1188               	.Ltext11:
 1190               	.LM124:
 1191 045a 2FEF      		ldi r18,lo8(3199999)
 1192 045c 83ED      		ldi r24,hi8(3199999)
 1193 045e 90E3      		ldi r25,hlo8(3199999)
 1194 0460 2150      		1: subi r18,1
 1195 0462 8040      		sbci r24,0
 1196 0464 9040      		sbci r25,0
 1197 0466 01F4      		brne 1b
 1198 0468 00C0      		rjmp .
 1199 046a 0000      		nop
 1200               	.LBE41:
 1201               	.LBE40:
 1202               	.LBB42:
 1204               	.Ltext12:
 267:stlcd.c       ****     drawline(buffer, i, 63, 0, 0, 0);
 1206               	.LM125:
 1207 046c C0E0      		ldi r28,0
 1208               	.L47:
 268:stlcd.c       ****   }
 1210               	.LM126:
 1211 046e E12C      		mov r14,__zero_reg__
 1212 0470 00E0      		ldi r16,0
 1213 0472 20E0      		ldi r18,0
 1214 0474 4FE3      		ldi r20,lo8(63)
 1215 0476 6C2F      		mov r22,r28
 1216 0478 80E0      		ldi r24,lo8(buffer)
 1217 047a 90E0      		ldi r25,hi8(buffer)
 1218 047c 0E94 0000 		call drawline
 267:stlcd.c       ****     drawline(buffer, i, 63, 0, 0, 0);
 1220               	.LM127:
 1221 0480 CC5F      		subi r28,lo8(-(4))
 1222 0482 C038      		cpi r28,lo8(-128)
 1223 0484 01F4      		brne .L47
 1224 0486 C0E0      		ldi r28,0
 1225               	.L48:
 1226               	.LBE42:
 1227               	.LBB43:
 271:stlcd.c       ****   }
 1229               	.LM128:
 1230 0488 E12C      		mov r14,__zero_reg__
 1231 048a 00E0      		ldi r16,0
 1232 048c 20E0      		ldi r18,0
 1233 048e 4C2F      		mov r20,r28
 1234 0490 6FE7      		ldi r22,lo8(127)
 1235 0492 80E0      		ldi r24,lo8(buffer)
 1236 0494 90E0      		ldi r25,hi8(buffer)
 1237 0496 0E94 0000 		call drawline
 270:stlcd.c       ****     drawline(buffer, 127, i, 0, 0, 0);
 1239               	.LM129:
 1240 049a CC5F      		subi r28,lo8(-(4))
 1241 049c C034      		cpi r28,lo8(64)
 1242 049e 01F4      		brne .L48
 1243               	/* epilogue start */
 1244               	.LBE43:
 273:stlcd.c       **** 
 1246               	.LM130:
 1247 04a0 CF91      		pop r28
 1248 04a2 0F91      		pop r16
 1249 04a4 EF90      		pop r14
 1250 04a6 0895      		ret
 1264               	.Lscope14:
 1266               		.stabd	78,0,0
 1268               	.global	get_buffer
 1270               	get_buffer:
 1271               		.stabd	46,0,0
 475:stlcd.c       **** 
 476:stlcd.c       **** uint8_t* get_buffer(void) {
 1273               	.LM131:
 1274               	.LFBB15:
 1275               	/* prologue: function */
 1276               	/* frame size = 0 */
 1277               	/* stack size = 0 */
 1278               	.L__stack_usage = 0
 477:stlcd.c       ****   return buffer;
 478:stlcd.c       **** }
 1280               	.LM132:
 1281 04a8 80E0      		ldi r24,lo8(buffer)
 1282 04aa 90E0      		ldi r25,hi8(buffer)
 1283 04ac 0895      		ret
 1285               	.Lscope15:
 1287               		.stabd	78,0,0
 1288               	.global	buffer
 1289               		.data
 1292               	buffer:
 1293 0000 00        		.byte	0
 1294 0001 00        		.byte	0
 1295 0002 00        		.byte	0
 1296 0003 00        		.byte	0
 1297 0004 00        		.byte	0
 1298 0005 00        		.byte	0
 1299 0006 00        		.byte	0
 1300 0007 00        		.byte	0
 1301 0008 00        		.byte	0
 1302 0009 00        		.byte	0
 1303 000a 00        		.byte	0
 1304 000b 00        		.byte	0
 1305 000c 00        		.byte	0
 1306 000d 00        		.byte	0
 1307 000e 00        		.byte	0
 1308 000f 00        		.byte	0
 1309 0010 00        		.byte	0
 1310 0011 00        		.byte	0
 1311 0012 00        		.byte	0
 1312 0013 00        		.byte	0
 1313 0014 00        		.byte	0
 1314 0015 00        		.byte	0
 1315 0016 00        		.byte	0
 1316 0017 00        		.byte	0
 1317 0018 00        		.byte	0
 1318 0019 00        		.byte	0
 1319 001a 00        		.byte	0
 1320 001b 00        		.byte	0
 1321 001c 00        		.byte	0
 1322 001d 00        		.byte	0
 1323 001e 00        		.byte	0
 1324 001f 00        		.byte	0
 1325 0020 00        		.byte	0
 1326 0021 00        		.byte	0
 1327 0022 00        		.byte	0
 1328 0023 00        		.byte	0
 1329 0024 00        		.byte	0
 1330 0025 00        		.byte	0
 1331 0026 00        		.byte	0
 1332 0027 00        		.byte	0
 1333 0028 00        		.byte	0
 1334 0029 00        		.byte	0
 1335 002a 00        		.byte	0
 1336 002b 00        		.byte	0
 1337 002c 00        		.byte	0
 1338 002d 00        		.byte	0
 1339 002e 00        		.byte	0
 1340 002f 00        		.byte	0
 1341 0030 00        		.byte	0
 1342 0031 00        		.byte	0
 1343 0032 00        		.byte	0
 1344 0033 00        		.byte	0
 1345 0034 00        		.byte	0
 1346 0035 00        		.byte	0
 1347 0036 00        		.byte	0
 1348 0037 00        		.byte	0
 1349 0038 00        		.byte	0
 1350 0039 00        		.byte	0
 1351 003a 00        		.byte	0
 1352 003b 00        		.byte	0
 1353 003c 00        		.byte	0
 1354 003d 00        		.byte	0
 1355 003e 00        		.byte	0
 1356 003f 00        		.byte	0
 1357 0040 00        		.byte	0
 1358 0041 00        		.byte	0
 1359 0042 00        		.byte	0
 1360 0043 00        		.byte	0
 1361 0044 00        		.byte	0
 1362 0045 00        		.byte	0
 1363 0046 00        		.byte	0
 1364 0047 00        		.byte	0
 1365 0048 00        		.byte	0
 1366 0049 00        		.byte	0
 1367 004a 00        		.byte	0
 1368 004b 00        		.byte	0
 1369 004c 00        		.byte	0
 1370 004d 00        		.byte	0
 1371 004e 00        		.byte	0
 1372 004f 00        		.byte	0
 1373 0050 00        		.byte	0
 1374 0051 00        		.byte	0
 1375 0052 00        		.byte	0
 1376 0053 00        		.byte	0
 1377 0054 00        		.byte	0
 1378 0055 00        		.byte	0
 1379 0056 00        		.byte	0
 1380 0057 00        		.byte	0
 1381 0058 00        		.byte	0
 1382 0059 00        		.byte	0
 1383 005a 00        		.byte	0
 1384 005b 00        		.byte	0
 1385 005c 00        		.byte	0
 1386 005d 00        		.byte	0
 1387 005e 00        		.byte	0
 1388 005f 00        		.byte	0
 1389 0060 00        		.byte	0
 1390 0061 00        		.byte	0
 1391 0062 00        		.byte	0
 1392 0063 00        		.byte	0
 1393 0064 00        		.byte	0
 1394 0065 00        		.byte	0
 1395 0066 00        		.byte	0
 1396 0067 00        		.byte	0
 1397 0068 00        		.byte	0
 1398 0069 00        		.byte	0
 1399 006a 00        		.byte	0
 1400 006b 00        		.byte	0
 1401 006c 00        		.byte	0
 1402 006d 00        		.byte	0
 1403 006e 00        		.byte	0
 1404 006f 00        		.byte	0
 1405 0070 00        		.byte	0
 1406 0071 00        		.byte	0
 1407 0072 00        		.byte	0
 1408 0073 00        		.byte	0
 1409 0074 00        		.byte	0
 1410 0075 00        		.byte	0
 1411 0076 00        		.byte	0
 1412 0077 00        		.byte	0
 1413 0078 00        		.byte	0
 1414 0079 00        		.byte	0
 1415 007a 00        		.byte	0
 1416 007b 00        		.byte	0
 1417 007c 00        		.byte	0
 1418 007d 00        		.byte	0
 1419 007e 00        		.byte	0
 1420 007f 00        		.byte	0
 1421 0080 00        		.byte	0
 1422 0081 00        		.byte	0
 1423 0082 00        		.byte	0
 1424 0083 00        		.byte	0
 1425 0084 00        		.byte	0
 1426 0085 00        		.byte	0
 1427 0086 00        		.byte	0
 1428 0087 00        		.byte	0
 1429 0088 00        		.byte	0
 1430 0089 00        		.byte	0
 1431 008a 00        		.byte	0
 1432 008b 00        		.byte	0
 1433 008c 00        		.byte	0
 1434 008d 00        		.byte	0
 1435 008e 00        		.byte	0
 1436 008f 00        		.byte	0
 1437 0090 00        		.byte	0
 1438 0091 00        		.byte	0
 1439 0092 00        		.byte	0
 1440 0093 03        		.byte	3
 1441 0094 07        		.byte	7
 1442 0095 0F        		.byte	15
 1443 0096 1F        		.byte	31
 1444 0097 1F        		.byte	31
 1445 0098 3F        		.byte	63
 1446 0099 3F        		.byte	63
 1447 009a 3F        		.byte	63
 1448 009b 3F        		.byte	63
 1449 009c 07        		.byte	7
 1450 009d 00        		.byte	0
 1451 009e 00        		.byte	0
 1452 009f 00        		.byte	0
 1453 00a0 00        		.byte	0
 1454 00a1 00        		.byte	0
 1455 00a2 00        		.byte	0
 1456 00a3 00        		.byte	0
 1457 00a4 00        		.byte	0
 1458 00a5 00        		.byte	0
 1459 00a6 00        		.byte	0
 1460 00a7 00        		.byte	0
 1461 00a8 00        		.byte	0
 1462 00a9 00        		.byte	0
 1463 00aa 00        		.byte	0
 1464 00ab 00        		.byte	0
 1465 00ac 00        		.byte	0
 1466 00ad 00        		.byte	0
 1467 00ae 00        		.byte	0
 1468 00af 00        		.byte	0
 1469 00b0 00        		.byte	0
 1470 00b1 00        		.byte	0
 1471 00b2 00        		.byte	0
 1472 00b3 00        		.byte	0
 1473 00b4 00        		.byte	0
 1474 00b5 00        		.byte	0
 1475 00b6 00        		.byte	0
 1476 00b7 00        		.byte	0
 1477 00b8 00        		.byte	0
 1478 00b9 00        		.byte	0
 1479 00ba 00        		.byte	0
 1480 00bb 00        		.byte	0
 1481 00bc 00        		.byte	0
 1482 00bd 00        		.byte	0
 1483 00be 00        		.byte	0
 1484 00bf 00        		.byte	0
 1485 00c0 00        		.byte	0
 1486 00c1 00        		.byte	0
 1487 00c2 7F        		.byte	127
 1488 00c3 3F        		.byte	63
 1489 00c4 00        		.byte	0
 1490 00c5 00        		.byte	0
 1491 00c6 00        		.byte	0
 1492 00c7 00        		.byte	0
 1493 00c8 00        		.byte	0
 1494 00c9 00        		.byte	0
 1495 00ca 00        		.byte	0
 1496 00cb 00        		.byte	0
 1497 00cc 00        		.byte	0
 1498 00cd 00        		.byte	0
 1499 00ce 00        		.byte	0
 1500 00cf 00        		.byte	0
 1501 00d0 00        		.byte	0
 1502 00d1 00        		.byte	0
 1503 00d2 1F        		.byte	31
 1504 00d3 3F        		.byte	63
 1505 00d4 70        		.byte	112
 1506 00d5 70        		.byte	112
 1507 00d6 00        		.byte	0
 1508 00d7 00        		.byte	0
 1509 00d8 00        		.byte	0
 1510 00d9 00        		.byte	0
 1511 00da 00        		.byte	0
 1512 00db 00        		.byte	0
 1513 00dc 00        		.byte	0
 1514 00dd 00        		.byte	0
 1515 00de 00        		.byte	0
 1516 00df 00        		.byte	0
 1517 00e0 00        		.byte	0
 1518 00e1 00        		.byte	0
 1519 00e2 00        		.byte	0
 1520 00e3 00        		.byte	0
 1521 00e4 00        		.byte	0
 1522 00e5 00        		.byte	0
 1523 00e6 00        		.byte	0
 1524 00e7 00        		.byte	0
 1525 00e8 00        		.byte	0
 1526 00e9 06        		.byte	6
 1527 00ea 06        		.byte	6
 1528 00eb 00        		.byte	0
 1529 00ec 00        		.byte	0
 1530 00ed 00        		.byte	0
 1531 00ee 03        		.byte	3
 1532 00ef 03        		.byte	3
 1533 00f0 00        		.byte	0
 1534 00f1 00        		.byte	0
 1535 00f2 00        		.byte	0
 1536 00f3 00        		.byte	0
 1537 00f4 00        		.byte	0
 1538 00f5 00        		.byte	0
 1539 00f6 00        		.byte	0
 1540 00f7 00        		.byte	0
 1541 00f8 00        		.byte	0
 1542 00f9 00        		.byte	0
 1543 00fa 00        		.byte	0
 1544 00fb 00        		.byte	0
 1545 00fc 00        		.byte	0
 1546 00fd 00        		.byte	0
 1547 00fe 00        		.byte	0
 1548 00ff 00        		.byte	0
 1549 0100 1F        		.byte	31
 1550 0101 1F        		.byte	31
 1551 0102 1F        		.byte	31
 1552 0103 1F        		.byte	31
 1553 0104 1F        		.byte	31
 1554 0105 1F        		.byte	31
 1555 0106 1F        		.byte	31
 1556 0107 1F        		.byte	31
 1557 0108 1F        		.byte	31
 1558 0109 1F        		.byte	31
 1559 010a 1F        		.byte	31
 1560 010b 1F        		.byte	31
 1561 010c 1F        		.byte	31
 1562 010d 0F        		.byte	15
 1563 010e 07        		.byte	7
 1564 010f 07        		.byte	7
 1565 0110 07        		.byte	7
 1566 0111 3F        		.byte	63
 1567 0112 FF        		.byte	-1
 1568 0113 FF        		.byte	-1
 1569 0114 FF        		.byte	-1
 1570 0115 FF        		.byte	-1
 1571 0116 FF        		.byte	-1
 1572 0117 FE        		.byte	-2
 1573 0118 FF        		.byte	-1
 1574 0119 FF        		.byte	-1
 1575 011a FF        		.byte	-1
 1576 011b FF        		.byte	-1
 1577 011c FF        		.byte	-1
 1578 011d 3E        		.byte	62
 1579 011e 00        		.byte	0
 1580 011f 00        		.byte	0
 1581 0120 00        		.byte	0
 1582 0121 00        		.byte	0
 1583 0122 00        		.byte	0
 1584 0123 00        		.byte	0
 1585 0124 00        		.byte	0
 1586 0125 00        		.byte	0
 1587 0126 00        		.byte	0
 1588 0127 00        		.byte	0
 1589 0128 00        		.byte	0
 1590 0129 00        		.byte	0
 1591 012a 00        		.byte	0
 1592 012b 00        		.byte	0
 1593 012c 00        		.byte	0
 1594 012d 00        		.byte	0
 1595 012e 0F        		.byte	15
 1596 012f 3F        		.byte	63
 1597 0130 70        		.byte	112
 1598 0131 60        		.byte	96
 1599 0132 60        		.byte	96
 1600 0133 60        		.byte	96
 1601 0134 60        		.byte	96
 1602 0135 30        		.byte	48
 1603 0136 7F        		.byte	127
 1604 0137 3F        		.byte	63
 1605 0138 00        		.byte	0
 1606 0139 00        		.byte	0
 1607 013a 1F        		.byte	31
 1608 013b 3F        		.byte	63
 1609 013c 70        		.byte	112
 1610 013d 60        		.byte	96
 1611 013e 60        		.byte	96
 1612 013f 60        		.byte	96
 1613 0140 60        		.byte	96
 1614 0141 39        		.byte	57
 1615 0142 FF        		.byte	-1
 1616 0143 FF        		.byte	-1
 1617 0144 00        		.byte	0
 1618 0145 06        		.byte	6
 1619 0146 1F        		.byte	31
 1620 0147 39        		.byte	57
 1621 0148 60        		.byte	96
 1622 0149 60        		.byte	96
 1623 014a 60        		.byte	96
 1624 014b 60        		.byte	96
 1625 014c 30        		.byte	48
 1626 014d 3F        		.byte	63
 1627 014e 7F        		.byte	127
 1628 014f 00        		.byte	0
 1629 0150 00        		.byte	0
 1630 0151 60        		.byte	96
 1631 0152 FF        		.byte	-1
 1632 0153 FF        		.byte	-1
 1633 0154 60        		.byte	96
 1634 0155 60        		.byte	96
 1635 0156 00        		.byte	0
 1636 0157 7F        		.byte	127
 1637 0158 7F        		.byte	127
 1638 0159 70        		.byte	112
 1639 015a 60        		.byte	96
 1640 015b 60        		.byte	96
 1641 015c 40        		.byte	64
 1642 015d 00        		.byte	0
 1643 015e 7F        		.byte	127
 1644 015f 7F        		.byte	127
 1645 0160 00        		.byte	0
 1646 0161 00        		.byte	0
 1647 0162 00        		.byte	0
 1648 0163 00        		.byte	0
 1649 0164 7F        		.byte	127
 1650 0165 7F        		.byte	127
 1651 0166 00        		.byte	0
 1652 0167 00        		.byte	0
 1653 0168 00        		.byte	0
 1654 0169 7F        		.byte	127
 1655 016a 7F        		.byte	127
 1656 016b 00        		.byte	0
 1657 016c 00        		.byte	0
 1658 016d 60        		.byte	96
 1659 016e FF        		.byte	-1
 1660 016f FF        		.byte	-1
 1661 0170 60        		.byte	96
 1662 0171 60        		.byte	96
 1663 0172 00        		.byte	0
 1664 0173 00        		.byte	0
 1665 0174 00        		.byte	0
 1666 0175 00        		.byte	0
 1667 0176 00        		.byte	0
 1668 0177 00        		.byte	0
 1669 0178 00        		.byte	0
 1670 0179 00        		.byte	0
 1671 017a 00        		.byte	0
 1672 017b 00        		.byte	0
 1673 017c 00        		.byte	0
 1674 017d 00        		.byte	0
 1675 017e 00        		.byte	0
 1676 017f 00        		.byte	0
 1677 0180 80        		.byte	-128
 1678 0181 F8        		.byte	-8
 1679 0182 FC        		.byte	-4
 1680 0183 FE        		.byte	-2
 1681 0184 FE        		.byte	-2
 1682 0185 FF        		.byte	-1
 1683 0186 FF        		.byte	-1
 1684 0187 FF        		.byte	-1
 1685 0188 FF        		.byte	-1
 1686 0189 FF        		.byte	-1
 1687 018a FF        		.byte	-1
 1688 018b FF        		.byte	-1
 1689 018c EF        		.byte	-17
 1690 018d E7        		.byte	-25
 1691 018e E7        		.byte	-25
 1692 018f E3        		.byte	-29
 1693 0190 F3        		.byte	-13
 1694 0191 F9        		.byte	-7
 1695 0192 FF        		.byte	-1
 1696 0193 FF        		.byte	-1
 1697 0194 FF        		.byte	-1
 1698 0195 F7        		.byte	-9
 1699 0196 07        		.byte	7
 1700 0197 1F        		.byte	31
 1701 0198 FF        		.byte	-1
 1702 0199 FF        		.byte	-1
 1703 019a FF        		.byte	-1
 1704 019b FF        		.byte	-1
 1705 019c FF        		.byte	-1
 1706 019d FF        		.byte	-1
 1707 019e 7F        		.byte	127
 1708 019f FF        		.byte	-1
 1709 01a0 7F        		.byte	127
 1710 01a1 7F        		.byte	127
 1711 01a2 7F        		.byte	127
 1712 01a3 7F        		.byte	127
 1713 01a4 7F        		.byte	127
 1714 01a5 7F        		.byte	127
 1715 01a6 3F        		.byte	63
 1716 01a7 3F        		.byte	63
 1717 01a8 1F        		.byte	31
 1718 01a9 0F        		.byte	15
 1719 01aa 07        		.byte	7
 1720 01ab 03        		.byte	3
 1721 01ac 00        		.byte	0
 1722 01ad 00        		.byte	0
 1723 01ae 00        		.byte	0
 1724 01af C0        		.byte	-64
 1725 01b0 E0        		.byte	-32
 1726 01b1 60        		.byte	96
 1727 01b2 20        		.byte	32
 1728 01b3 20        		.byte	32
 1729 01b4 60        		.byte	96
 1730 01b5 E0        		.byte	-32
 1731 01b6 E0        		.byte	-32
 1732 01b7 E0        		.byte	-32
 1733 01b8 00        		.byte	0
 1734 01b9 00        		.byte	0
 1735 01ba 80        		.byte	-128
 1736 01bb C0        		.byte	-64
 1737 01bc E0        		.byte	-32
 1738 01bd 60        		.byte	96
 1739 01be 20        		.byte	32
 1740 01bf 60        		.byte	96
 1741 01c0 60        		.byte	96
 1742 01c1 E0        		.byte	-32
 1743 01c2 E0        		.byte	-32
 1744 01c3 E0        		.byte	-32
 1745 01c4 00        		.byte	0
 1746 01c5 00        		.byte	0
 1747 01c6 80        		.byte	-128
 1748 01c7 C0        		.byte	-64
 1749 01c8 60        		.byte	96
 1750 01c9 60        		.byte	96
 1751 01ca 20        		.byte	32
 1752 01cb 60        		.byte	96
 1753 01cc 60        		.byte	96
 1754 01cd E0        		.byte	-32
 1755 01ce E0        		.byte	-32
 1756 01cf 00        		.byte	0
 1757 01d0 00        		.byte	0
 1758 01d1 00        		.byte	0
 1759 01d2 E0        		.byte	-32
 1760 01d3 E0        		.byte	-32
 1761 01d4 00        		.byte	0
 1762 01d5 00        		.byte	0
 1763 01d6 00        		.byte	0
 1764 01d7 E0        		.byte	-32
 1765 01d8 E0        		.byte	-32
 1766 01d9 00        		.byte	0
 1767 01da 00        		.byte	0
 1768 01db 00        		.byte	0
 1769 01dc 00        		.byte	0
 1770 01dd 00        		.byte	0
 1771 01de 80        		.byte	-128
 1772 01df E0        		.byte	-32
 1773 01e0 60        		.byte	96
 1774 01e1 60        		.byte	96
 1775 01e2 60        		.byte	96
 1776 01e3 60        		.byte	96
 1777 01e4 E0        		.byte	-32
 1778 01e5 80        		.byte	-128
 1779 01e6 00        		.byte	0
 1780 01e7 00        		.byte	0
 1781 01e8 00        		.byte	0
 1782 01e9 E0        		.byte	-32
 1783 01ea E0        		.byte	-32
 1784 01eb 00        		.byte	0
 1785 01ec 00        		.byte	0
 1786 01ed 00        		.byte	0
 1787 01ee E0        		.byte	-32
 1788 01ef E0        		.byte	-32
 1789 01f0 00        		.byte	0
 1790 01f1 00        		.byte	0
 1791 01f2 00        		.byte	0
 1792 01f3 00        		.byte	0
 1793 01f4 00        		.byte	0
 1794 01f5 00        		.byte	0
 1795 01f6 00        		.byte	0
 1796 01f7 00        		.byte	0
 1797 01f8 00        		.byte	0
 1798 01f9 00        		.byte	0
 1799 01fa 00        		.byte	0
 1800 01fb 00        		.byte	0
 1801 01fc 00        		.byte	0
 1802 01fd 00        		.byte	0
 1803 01fe 00        		.byte	0
 1804 01ff 00        		.byte	0
 1805 0200 00        		.byte	0
 1806 0201 00        		.byte	0
 1807 0202 00        		.byte	0
 1808 0203 03        		.byte	3
 1809 0204 07        		.byte	7
 1810 0205 1F        		.byte	31
 1811 0206 9F        		.byte	-97
 1812 0207 FF        		.byte	-1
 1813 0208 FF        		.byte	-1
 1814 0209 FF        		.byte	-1
 1815 020a FF        		.byte	-1
 1816 020b FF        		.byte	-1
 1817 020c FF        		.byte	-1
 1818 020d FD        		.byte	-3
 1819 020e F1        		.byte	-15
 1820 020f E3        		.byte	-29
 1821 0210 E3        		.byte	-29
 1822 0211 CF        		.byte	-49
 1823 0212 FF        		.byte	-1
 1824 0213 FF        		.byte	-1
 1825 0214 FF        		.byte	-1
 1826 0215 FF        		.byte	-1
 1827 0216 F0        		.byte	-16
 1828 0217 FC        		.byte	-4
 1829 0218 7F        		.byte	127
 1830 0219 3F        		.byte	63
 1831 021a 3F        		.byte	63
 1832 021b 3F        		.byte	63
 1833 021c 3F        		.byte	63
 1834 021d 7F        		.byte	127
 1835 021e FF        		.byte	-1
 1836 021f FF        		.byte	-1
 1837 0220 FF        		.byte	-1
 1838 0221 FF        		.byte	-1
 1839 0222 FF        		.byte	-1
 1840 0223 FF        		.byte	-1
 1841 0224 FF        		.byte	-1
 1842 0225 FF        		.byte	-1
 1843 0226 FF        		.byte	-1
 1844 0227 FE        		.byte	-2
 1845 0228 FC        		.byte	-4
 1846 0229 F0        		.byte	-16
 1847 022a E0        		.byte	-32
 1848 022b 80        		.byte	-128
 1849 022c 00        		.byte	0
 1850 022d 00        		.byte	0
 1851 022e 00        		.byte	0
 1852 022f 0C        		.byte	12
 1853 0230 1C        		.byte	28
 1854 0231 00        		.byte	0
 1855 0232 00        		.byte	0
 1856 0233 00        		.byte	0
 1857 0234 00        		.byte	0
 1858 0235 00        		.byte	0
 1859 0236 00        		.byte	0
 1860 0237 00        		.byte	0
 1861 0238 00        		.byte	0
 1862 0239 00        		.byte	0
 1863 023a 00        		.byte	0
 1864 023b 00        		.byte	0
 1865 023c 00        		.byte	0
 1866 023d 00        		.byte	0
 1867 023e 00        		.byte	0
 1868 023f 00        		.byte	0
 1869 0240 00        		.byte	0
 1870 0241 00        		.byte	0
 1871 0242 00        		.byte	0
 1872 0243 00        		.byte	0
 1873 0244 00        		.byte	0
 1874 0245 00        		.byte	0
 1875 0246 7F        		.byte	127
 1876 0247 7F        		.byte	127
 1877 0248 00        		.byte	0
 1878 0249 00        		.byte	0
 1879 024a 00        		.byte	0
 1880 024b 00        		.byte	0
 1881 024c 00        		.byte	0
 1882 024d 00        		.byte	0
 1883 024e 00        		.byte	0
 1884 024f 00        		.byte	0
 1885 0250 00        		.byte	0
 1886 0251 00        		.byte	0
 1887 0252 00        		.byte	0
 1888 0253 00        		.byte	0
 1889 0254 00        		.byte	0
 1890 0255 00        		.byte	0
 1891 0256 00        		.byte	0
 1892 0257 00        		.byte	0
 1893 0258 00        		.byte	0
 1894 0259 00        		.byte	0
 1895 025a 00        		.byte	0
 1896 025b 00        		.byte	0
 1897 025c 00        		.byte	0
 1898 025d 07        		.byte	7
 1899 025e 07        		.byte	7
 1900 025f 00        		.byte	0
 1901 0260 00        		.byte	0
 1902 0261 00        		.byte	0
 1903 0262 00        		.byte	0
 1904 0263 00        		.byte	0
 1905 0264 00        		.byte	0
 1906 0265 00        		.byte	0
 1907 0266 00        		.byte	0
 1908 0267 00        		.byte	0
 1909 0268 00        		.byte	0
 1910 0269 1C        		.byte	28
 1911 026a 0C        		.byte	12
 1912 026b 00        		.byte	0
 1913 026c 00        		.byte	0
 1914 026d 00        		.byte	0
 1915 026e 00        		.byte	0
 1916 026f 00        		.byte	0
 1917 0270 00        		.byte	0
 1918 0271 00        		.byte	0
 1919 0272 00        		.byte	0
 1920 0273 00        		.byte	0
 1921 0274 00        		.byte	0
 1922 0275 00        		.byte	0
 1923 0276 00        		.byte	0
 1924 0277 00        		.byte	0
 1925 0278 00        		.byte	0
 1926 0279 00        		.byte	0
 1927 027a 00        		.byte	0
 1928 027b 00        		.byte	0
 1929 027c 00        		.byte	0
 1930 027d 00        		.byte	0
 1931 027e 00        		.byte	0
 1932 027f 00        		.byte	0
 1933 0280 00        		.byte	0
 1934 0281 07        		.byte	7
 1935 0282 FF        		.byte	-1
 1936 0283 FF        		.byte	-1
 1937 0284 FF        		.byte	-1
 1938 0285 FF        		.byte	-1
 1939 0286 FF        		.byte	-1
 1940 0287 FF        		.byte	-1
 1941 0288 FF        		.byte	-1
 1942 0289 FF        		.byte	-1
 1943 028a FE        		.byte	-2
 1944 028b FE        		.byte	-2
 1945 028c FE        		.byte	-2
 1946 028d FE        		.byte	-2
 1947 028e FC        		.byte	-4
 1948 028f F8        		.byte	-8
 1949 0290 F8        		.byte	-8
 1950 0291 F0        		.byte	-16
 1951 0292 FE        		.byte	-2
 1952 0293 FF        		.byte	-1
 1953 0294 FF        		.byte	-1
 1954 0295 FF        		.byte	-1
 1955 0296 7F        		.byte	127
 1956 0297 3F        		.byte	63
 1957 0298 FF        		.byte	-1
 1958 0299 FF        		.byte	-1
 1959 029a FF        		.byte	-1
 1960 029b FF        		.byte	-1
 1961 029c FF        		.byte	-1
 1962 029d FF        		.byte	-1
 1963 029e FF        		.byte	-1
 1964 029f 1F        		.byte	31
 1965 02a0 00        		.byte	0
 1966 02a1 00        		.byte	0
 1967 02a2 00        		.byte	0
 1968 02a3 00        		.byte	0
 1969 02a4 00        		.byte	0
 1970 02a5 00        		.byte	0
 1971 02a6 00        		.byte	0
 1972 02a7 00        		.byte	0
 1973 02a8 00        		.byte	0
 1974 02a9 00        		.byte	0
 1975 02aa 00        		.byte	0
 1976 02ab 00        		.byte	0
 1977 02ac 00        		.byte	0
 1978 02ad 00        		.byte	0
 1979 02ae 00        		.byte	0
 1980 02af FF        		.byte	-1
 1981 02b0 FF        		.byte	-1
 1982 02b1 00        		.byte	0
 1983 02b2 00        		.byte	0
 1984 02b3 00        		.byte	0
 1985 02b4 FF        		.byte	-1
 1986 02b5 FF        		.byte	-1
 1987 02b6 E0        		.byte	-32
 1988 02b7 C0        		.byte	-64
 1989 02b8 C0        		.byte	-64
 1990 02b9 C0        		.byte	-64
 1991 02ba FF        		.byte	-1
 1992 02bb 7F        		.byte	127
 1993 02bc 00        		.byte	0
 1994 02bd 00        		.byte	0
 1995 02be 1E        		.byte	30
 1996 02bf 7F        		.byte	127
 1997 02c0 E1        		.byte	-31
 1998 02c1 C0        		.byte	-64
 1999 02c2 C0        		.byte	-64
 2000 02c3 C0        		.byte	-64
 2001 02c4 C0        		.byte	-64
 2002 02c5 61        		.byte	97
 2003 02c6 FF        		.byte	-1
 2004 02c7 FF        		.byte	-1
 2005 02c8 00        		.byte	0
 2006 02c9 00        		.byte	0
 2007 02ca FE        		.byte	-2
 2008 02cb FF        		.byte	-1
 2009 02cc 01        		.byte	1
 2010 02cd 00        		.byte	0
 2011 02ce 00        		.byte	0
 2012 02cf 00        		.byte	0
 2013 02d0 FF        		.byte	-1
 2014 02d1 FF        		.byte	-1
 2015 02d2 00        		.byte	0
 2016 02d3 00        		.byte	0
 2017 02d4 21        		.byte	33
 2018 02d5 F9        		.byte	-7
 2019 02d6 F8        		.byte	-8
 2020 02d7 DC        		.byte	-36
 2021 02d8 CC        		.byte	-52
 2022 02d9 CF        		.byte	-49
 2023 02da 07        		.byte	7
 2024 02db 00        		.byte	0
 2025 02dc C0        		.byte	-64
 2026 02dd FF        		.byte	-1
 2027 02de FF        		.byte	-1
 2028 02df C0        		.byte	-64
 2029 02e0 80        		.byte	-128
 2030 02e1 00        		.byte	0
 2031 02e2 FF        		.byte	-1
 2032 02e3 FF        		.byte	-1
 2033 02e4 C0        		.byte	-64
 2034 02e5 C0        		.byte	-64
 2035 02e6 80        		.byte	-128
 2036 02e7 00        		.byte	0
 2037 02e8 00        		.byte	0
 2038 02e9 FF        		.byte	-1
 2039 02ea FF        		.byte	-1
 2040 02eb 00        		.byte	0
 2041 02ec 00        		.byte	0
 2042 02ed 1F        		.byte	31
 2043 02ee 7F        		.byte	127
 2044 02ef F9        		.byte	-7
 2045 02f0 C8        		.byte	-56
 2046 02f1 C8        		.byte	-56
 2047 02f2 C8        		.byte	-56
 2048 02f3 C8        		.byte	-56
 2049 02f4 79        		.byte	121
 2050 02f5 39        		.byte	57
 2051 02f6 00        		.byte	0
 2052 02f7 00        		.byte	0
 2053 02f8 71        		.byte	113
 2054 02f9 F9        		.byte	-7
 2055 02fa D8        		.byte	-40
 2056 02fb CC        		.byte	-52
 2057 02fc CE        		.byte	-50
 2058 02fd 47        		.byte	71
 2059 02fe 03        		.byte	3
 2060 02ff 00        		.byte	0
 2061 0300 00        		.byte	0
 2062 0301 00        		.byte	0
 2063 0302 00        		.byte	0
 2064 0303 00        		.byte	0
 2065 0304 80        		.byte	-128
 2066 0305 80        		.byte	-128
 2067 0306 00        		.byte	0
 2068 0307 00        		.byte	0
 2069 0308 00        		.byte	0
 2070 0309 00        		.byte	0
 2071 030a 00        		.byte	0
 2072 030b 00        		.byte	0
 2073 030c 00        		.byte	0
 2074 030d 00        		.byte	0
 2075 030e 00        		.byte	0
 2076 030f 00        		.byte	0
 2077 0310 00        		.byte	0
 2078 0311 00        		.byte	0
 2079 0312 00        		.byte	0
 2080 0313 80        		.byte	-128
 2081 0314 C0        		.byte	-64
 2082 0315 E0        		.byte	-32
 2083 0316 F0        		.byte	-16
 2084 0317 F8        		.byte	-8
 2085 0318 F8        		.byte	-8
 2086 0319 FC        		.byte	-4
 2087 031a FC        		.byte	-4
 2088 031b FC        		.byte	-4
 2089 031c FC        		.byte	-4
 2090 031d F8        		.byte	-8
 2091 031e F0        		.byte	-16
 2092 031f C0        		.byte	-64
 2093 0320 00        		.byte	0
 2094 0321 00        		.byte	0
 2095 0322 00        		.byte	0
 2096 0323 00        		.byte	0
 2097 0324 00        		.byte	0
 2098 0325 00        		.byte	0
 2099 0326 00        		.byte	0
 2100 0327 00        		.byte	0
 2101 0328 00        		.byte	0
 2102 0329 00        		.byte	0
 2103 032a 00        		.byte	0
 2104 032b 00        		.byte	0
 2105 032c 00        		.byte	0
 2106 032d 00        		.byte	0
 2107 032e 00        		.byte	0
 2108 032f C0        		.byte	-64
 2109 0330 C0        		.byte	-64
 2110 0331 00        		.byte	0
 2111 0332 00        		.byte	0
 2112 0333 00        		.byte	0
 2113 0334 C0        		.byte	-64
 2114 0335 C0        		.byte	-64
 2115 0336 00        		.byte	0
 2116 0337 00        		.byte	0
 2117 0338 00        		.byte	0
 2118 0339 00        		.byte	0
 2119 033a C0        		.byte	-64
 2120 033b C0        		.byte	-64
 2121 033c 00        		.byte	0
 2122 033d 00        		.byte	0
 2123 033e 00        		.byte	0
 2124 033f 80        		.byte	-128
 2125 0340 C0        		.byte	-64
 2126 0341 C0        		.byte	-64
 2127 0342 C0        		.byte	-64
 2128 0343 C0        		.byte	-64
 2129 0344 C0        		.byte	-64
 2130 0345 80        		.byte	-128
 2131 0346 C0        		.byte	-64
 2132 0347 C0        		.byte	-64
 2133 0348 00        		.byte	0
 2134 0349 00        		.byte	0
 2135 034a 00        		.byte	0
 2136 034b 80        		.byte	-128
 2137 034c C0        		.byte	-64
 2138 034d C0        		.byte	-64
 2139 034e C0        		.byte	-64
 2140 034f C0        		.byte	-64
 2141 0350 C0        		.byte	-64
 2142 0351 80        		.byte	-128
 2143 0352 00        		.byte	0
 2144 0353 00        		.byte	0
 2145 0354 80        		.byte	-128
 2146 0355 C0        		.byte	-64
 2147 0356 C0        		.byte	-64
 2148 0357 C0        		.byte	-64
 2149 0358 C0        		.byte	-64
 2150 0359 C0        		.byte	-64
 2151 035a 00        		.byte	0
 2152 035b 00        		.byte	0
 2153 035c 00        		.byte	0
 2154 035d C0        		.byte	-64
 2155 035e C0        		.byte	-64
 2156 035f 00        		.byte	0
 2157 0360 00        		.byte	0
 2158 0361 00        		.byte	0
 2159 0362 C0        		.byte	-64
 2160 0363 80        		.byte	-128
 2161 0364 00        		.byte	0
 2162 0365 00        		.byte	0
 2163 0366 00        		.byte	0
 2164 0367 00        		.byte	0
 2165 0368 00        		.byte	0
 2166 0369 C0        		.byte	-64
 2167 036a C0        		.byte	-64
 2168 036b 00        		.byte	0
 2169 036c 00        		.byte	0
 2170 036d 00        		.byte	0
 2171 036e 80        		.byte	-128
 2172 036f C0        		.byte	-64
 2173 0370 C0        		.byte	-64
 2174 0371 C0        		.byte	-64
 2175 0372 C0        		.byte	-64
 2176 0373 C0        		.byte	-64
 2177 0374 80        		.byte	-128
 2178 0375 80        		.byte	-128
 2179 0376 00        		.byte	0
 2180 0377 00        		.byte	0
 2181 0378 80        		.byte	-128
 2182 0379 C0        		.byte	-64
 2183 037a C0        		.byte	-64
 2184 037b C0        		.byte	-64
 2185 037c C0        		.byte	-64
 2186 037d 80        		.byte	-128
 2187 037e 00        		.byte	0
 2188 037f 00        		.byte	0
 2189 0380 00        		.byte	0
 2190 0381 00        		.byte	0
 2191 0382 00        		.byte	0
 2192 0383 00        		.byte	0
 2193 0384 00        		.byte	0
 2194 0385 00        		.byte	0
 2195 0386 00        		.byte	0
 2196 0387 00        		.byte	0
 2197 0388 00        		.byte	0
 2198 0389 00        		.byte	0
 2199 038a 00        		.byte	0
 2200 038b 00        		.byte	0
 2201 038c 00        		.byte	0
 2202 038d 00        		.byte	0
 2203 038e 00        		.byte	0
 2204 038f 00        		.byte	0
 2205 0390 00        		.byte	0
 2206 0391 00        		.byte	0
 2207 0392 00        		.byte	0
 2208 0393 00        		.byte	0
 2209 0394 00        		.byte	0
 2210 0395 00        		.byte	0
 2211 0396 00        		.byte	0
 2212 0397 00        		.byte	0
 2213 0398 00        		.byte	0
 2214 0399 00        		.byte	0
 2215 039a 00        		.byte	0
 2216 039b 00        		.byte	0
 2217 039c 00        		.byte	0
 2218 039d 00        		.byte	0
 2219 039e 00        		.byte	0
 2220 039f 00        		.byte	0
 2221 03a0 00        		.byte	0
 2222 03a1 00        		.byte	0
 2223 03a2 00        		.byte	0
 2224 03a3 00        		.byte	0
 2225 03a4 00        		.byte	0
 2226 03a5 00        		.byte	0
 2227 03a6 00        		.byte	0
 2228 03a7 00        		.byte	0
 2229 03a8 00        		.byte	0
 2230 03a9 00        		.byte	0
 2231 03aa 00        		.byte	0
 2232 03ab 00        		.byte	0
 2233 03ac 00        		.byte	0
 2234 03ad 00        		.byte	0
 2235 03ae 00        		.byte	0
 2236 03af 00        		.byte	0
 2237 03b0 00        		.byte	0
 2238 03b1 00        		.byte	0
 2239 03b2 00        		.byte	0
 2240 03b3 00        		.byte	0
 2241 03b4 00        		.byte	0
 2242 03b5 00        		.byte	0
 2243 03b6 00        		.byte	0
 2244 03b7 00        		.byte	0
 2245 03b8 00        		.byte	0
 2246 03b9 00        		.byte	0
 2247 03ba 00        		.byte	0
 2248 03bb 00        		.byte	0
 2249 03bc 00        		.byte	0
 2250 03bd 00        		.byte	0
 2251 03be 00        		.byte	0
 2252 03bf 00        		.byte	0
 2253 03c0 00        		.byte	0
 2254 03c1 00        		.byte	0
 2255 03c2 00        		.byte	0
 2256 03c3 00        		.byte	0
 2257 03c4 00        		.byte	0
 2258 03c5 00        		.byte	0
 2259 03c6 00        		.byte	0
 2260 03c7 00        		.byte	0
 2261 03c8 00        		.byte	0
 2262 03c9 00        		.byte	0
 2263 03ca 00        		.byte	0
 2264 03cb 00        		.byte	0
 2265 03cc 00        		.byte	0
 2266 03cd 00        		.byte	0
 2267 03ce 00        		.byte	0
 2268 03cf 00        		.byte	0
 2269 03d0 00        		.byte	0
 2270 03d1 00        		.byte	0
 2271 03d2 00        		.byte	0
 2272 03d3 00        		.byte	0
 2273 03d4 00        		.byte	0
 2274 03d5 00        		.byte	0
 2275 03d6 00        		.byte	0
 2276 03d7 00        		.byte	0
 2277 03d8 00        		.byte	0
 2278 03d9 00        		.byte	0
 2279 03da 00        		.byte	0
 2280 03db 00        		.byte	0
 2281 03dc 00        		.byte	0
 2282 03dd 00        		.byte	0
 2283 03de 00        		.byte	0
 2284 03df 00        		.byte	0
 2285 03e0 00        		.byte	0
 2286 03e1 00        		.byte	0
 2287 03e2 00        		.byte	0
 2288 03e3 00        		.byte	0
 2289 03e4 00        		.byte	0
 2290 03e5 00        		.byte	0
 2291 03e6 00        		.byte	0
 2292 03e7 00        		.byte	0
 2293 03e8 00        		.byte	0
 2294 03e9 00        		.byte	0
 2295 03ea 00        		.byte	0
 2296 03eb 00        		.byte	0
 2297 03ec 00        		.byte	0
 2298 03ed 00        		.byte	0
 2299 03ee 00        		.byte	0
 2300 03ef 00        		.byte	0
 2301 03f0 00        		.byte	0
 2302 03f1 00        		.byte	0
 2303 03f2 00        		.byte	0
 2304 03f3 00        		.byte	0
 2305 03f4 00        		.byte	0
 2306 03f5 00        		.byte	0
 2307 03f6 00        		.byte	0
 2308 03f7 00        		.byte	0
 2309 03f8 00        		.byte	0
 2310 03f9 00        		.byte	0
 2311 03fa 00        		.byte	0
 2312 03fb 00        		.byte	0
 2313 03fc 00        		.byte	0
 2314 03fd 00        		.byte	0
 2315 03fe 00        		.byte	0
 2316 03ff 00        		.byte	0
 2317               	.global	pagemap
 2320               	pagemap:
 2321 0400 0300      		.word	3
 2322 0402 0200      		.word	2
 2323 0404 0100      		.word	1
 2324 0406 0000      		.word	0
 2325 0408 0700      		.word	7
 2326 040a 0600      		.word	6
 2327 040c 0500      		.word	5
 2328 040e 0400      		.word	4
 2329               	.global	is_reversed
 2330               		.section .bss
 2333               	is_reversed:
 2334 0000 00        		.zero	1
 2335               		.section	.progmem.data,"a",@progbits
 2338               	logo16_glcd_bmp:
 2339 0000 00        		.byte	0
 2340 0001 00        		.byte	0
 2341 0002 00        		.byte	0
 2342 0003 00        		.byte	0
 2343 0004 00        		.byte	0
 2344 0005 00        		.byte	0
 2345 0006 00        		.byte	0
 2346 0007 00        		.byte	0
 2347 0008 00        		.byte	0
 2348 0009 00        		.byte	0
 2349 000a 00        		.byte	0
 2350 000b 00        		.byte	0
 2351 000c 00        		.byte	0
 2352 000d 00        		.byte	0
 2353 000e 00        		.byte	0
 2354 000f 00        		.byte	0
 2355 0010 00        		.byte	0
 2356 0011 00        		.byte	0
 2357 0012 00        		.byte	0
 2358 0013 00        		.byte	0
 2359 0014 00        		.byte	0
 2360 0015 00        		.byte	0
 2361 0016 00        		.byte	0
 2362 0017 00        		.byte	0
 2363 0018 00        		.byte	0
 2364 0019 00        		.byte	0
 2365 001a 00        		.byte	0
 2366 001b 00        		.byte	0
 2367 001c 00        		.byte	0
 2368 001d 00        		.byte	0
 2369 001e 00        		.byte	0
 2370 001f 00        		.byte	0
 2371 0020 00        		.byte	0
 2372 0021 00        		.byte	0
 2373 0022 00        		.byte	0
 2374 0023 00        		.byte	0
 2375 0024 00        		.byte	0
 2376 0025 00        		.byte	0
 2377 0026 00        		.byte	0
 2378 0027 00        		.byte	0
 2379 0028 00        		.byte	0
 2380 0029 00        		.byte	0
 2381 002a 00        		.byte	0
 2382 002b 00        		.byte	0
 2383 002c 00        		.byte	0
 2384 002d 00        		.byte	0
 2385 002e 00        		.byte	0
 2386 002f 00        		.byte	0
 2387 0030 00        		.byte	0
 2388 0031 00        		.byte	0
 2389 0032 00        		.byte	0
 2390 0033 00        		.byte	0
 2391 0034 00        		.byte	0
 2392 0035 00        		.byte	0
 2393 0036 00        		.byte	0
 2394 0037 00        		.byte	0
 2395 0038 00        		.byte	0
 2396 0039 00        		.byte	0
 2397 003a 00        		.byte	0
 2398 003b 00        		.byte	0
 2399 003c 00        		.byte	0
 2400 003d 00        		.byte	0
 2401 003e 00        		.byte	0
 2402 003f 00        		.byte	0
 2403 0040 00        		.byte	0
 2404 0041 00        		.byte	0
 2405 0042 00        		.byte	0
 2406 0043 00        		.byte	0
 2407 0044 00        		.byte	0
 2408 0045 00        		.byte	0
 2409 0046 00        		.byte	0
 2410 0047 00        		.byte	0
 2411 0048 00        		.byte	0
 2412 0049 00        		.byte	0
 2413 004a 00        		.byte	0
 2414 004b 00        		.byte	0
 2415 004c 00        		.byte	0
 2416 004d 00        		.byte	0
 2417 004e 00        		.byte	0
 2418 004f 00        		.byte	0
 2419 0050 00        		.byte	0
 2420 0051 00        		.byte	0
 2421 0052 00        		.byte	0
 2422 0053 00        		.byte	0
 2423 0054 00        		.byte	0
 2424 0055 00        		.byte	0
 2425 0056 00        		.byte	0
 2426 0057 00        		.byte	0
 2427 0058 00        		.byte	0
 2428 0059 00        		.byte	0
 2429 005a 00        		.byte	0
 2430 005b 00        		.byte	0
 2431 005c 00        		.byte	0
 2432 005d 00        		.byte	0
 2433 005e 00        		.byte	0
 2434 005f 00        		.byte	0
 2435 0060 00        		.byte	0
 2436 0061 00        		.byte	0
 2437 0062 00        		.byte	0
 2438 0063 00        		.byte	0
 2439 0064 00        		.byte	0
 2440 0065 00        		.byte	0
 2441 0066 00        		.byte	0
 2442 0067 00        		.byte	0
 2443 0068 00        		.byte	0
 2444 0069 00        		.byte	0
 2445 006a 00        		.byte	0
 2446 006b 00        		.byte	0
 2447 006c 00        		.byte	0
 2448 006d 00        		.byte	0
 2449 006e 00        		.byte	0
 2450 006f 00        		.byte	0
 2451 0070 00        		.byte	0
 2452 0071 00        		.byte	0
 2453 0072 00        		.byte	0
 2454 0073 00        		.byte	0
 2455 0074 00        		.byte	0
 2456 0075 00        		.byte	0
 2457 0076 00        		.byte	0
 2458 0077 00        		.byte	0
 2459 0078 00        		.byte	0
 2460 0079 00        		.byte	0
 2461 007a 00        		.byte	0
 2462 007b 00        		.byte	0
 2463 007c 00        		.byte	0
 2464 007d 00        		.byte	0
 2465 007e 00        		.byte	0
 2466 007f 00        		.byte	0
 2467 0080 00        		.byte	0
 2468 0081 00        		.byte	0
 2469 0082 00        		.byte	0
 2470 0083 00        		.byte	0
 2471 0084 00        		.byte	0
 2472 0085 00        		.byte	0
 2473 0086 00        		.byte	0
 2474 0087 00        		.byte	0
 2475 0088 00        		.byte	0
 2476 0089 00        		.byte	0
 2477 008a 00        		.byte	0
 2478 008b 00        		.byte	0
 2479 008c 00        		.byte	0
 2480 008d 00        		.byte	0
 2481 008e 00        		.byte	0
 2482 008f 00        		.byte	0
 2483 0090 00        		.byte	0
 2484 0091 00        		.byte	0
 2485 0092 00        		.byte	0
 2486 0093 C0        		.byte	-64
 2487 0094 E0        		.byte	-32
 2488 0095 F0        		.byte	-16
 2489 0096 F8        		.byte	-8
 2490 0097 F8        		.byte	-8
 2491 0098 FC        		.byte	-4
 2492 0099 FC        		.byte	-4
 2493 009a FC        		.byte	-4
 2494 009b FC        		.byte	-4
 2495 009c E0        		.byte	-32
 2496 009d 00        		.byte	0
 2497 009e 00        		.byte	0
 2498 009f 00        		.byte	0
 2499 00a0 00        		.byte	0
 2500 00a1 00        		.byte	0
 2501 00a2 00        		.byte	0
 2502 00a3 00        		.byte	0
 2503 00a4 00        		.byte	0
 2504 00a5 00        		.byte	0
 2505 00a6 00        		.byte	0
 2506 00a7 00        		.byte	0
 2507 00a8 00        		.byte	0
 2508 00a9 00        		.byte	0
 2509 00aa 00        		.byte	0
 2510 00ab 00        		.byte	0
 2511 00ac 00        		.byte	0
 2512 00ad 00        		.byte	0
 2513 00ae 00        		.byte	0
 2514 00af 00        		.byte	0
 2515 00b0 00        		.byte	0
 2516 00b1 00        		.byte	0
 2517 00b2 00        		.byte	0
 2518 00b3 00        		.byte	0
 2519 00b4 00        		.byte	0
 2520 00b5 00        		.byte	0
 2521 00b6 00        		.byte	0
 2522 00b7 00        		.byte	0
 2523 00b8 00        		.byte	0
 2524 00b9 00        		.byte	0
 2525 00ba 00        		.byte	0
 2526 00bb 00        		.byte	0
 2527 00bc 00        		.byte	0
 2528 00bd 00        		.byte	0
 2529 00be 00        		.byte	0
 2530 00bf 00        		.byte	0
 2531 00c0 00        		.byte	0
 2532 00c1 00        		.byte	0
 2533 00c2 FE        		.byte	-2
 2534 00c3 FC        		.byte	-4
 2535 00c4 00        		.byte	0
 2536 00c5 00        		.byte	0
 2537 00c6 00        		.byte	0
 2538 00c7 00        		.byte	0
 2539 00c8 00        		.byte	0
 2540 00c9 00        		.byte	0
 2541 00ca 00        		.byte	0
 2542 00cb 00        		.byte	0
 2543 00cc 00        		.byte	0
 2544 00cd 00        		.byte	0
 2545 00ce 00        		.byte	0
 2546 00cf 00        		.byte	0
 2547 00d0 00        		.byte	0
 2548 00d1 00        		.byte	0
 2549 00d2 F8        		.byte	-8
 2550 00d3 FC        		.byte	-4
 2551 00d4 0E        		.byte	14
 2552 00d5 0E        		.byte	14
 2553 00d6 00        		.byte	0
 2554 00d7 00        		.byte	0
 2555 00d8 00        		.byte	0
 2556 00d9 00        		.byte	0
 2557 00da 00        		.byte	0
 2558 00db 00        		.byte	0
 2559 00dc 00        		.byte	0
 2560 00dd 00        		.byte	0
 2561 00de 00        		.byte	0
 2562 00df 00        		.byte	0
 2563 00e0 00        		.byte	0
 2564 00e1 00        		.byte	0
 2565 00e2 00        		.byte	0
 2566 00e3 00        		.byte	0
 2567 00e4 00        		.byte	0
 2568 00e5 00        		.byte	0
 2569 00e6 00        		.byte	0
 2570 00e7 00        		.byte	0
 2571 00e8 00        		.byte	0
 2572 00e9 60        		.byte	96
 2573 00ea 60        		.byte	96
 2574 00eb 00        		.byte	0
 2575 00ec 00        		.byte	0
 2576 00ed 00        		.byte	0
 2577 00ee C0        		.byte	-64
 2578 00ef C0        		.byte	-64
 2579 00f0 00        		.byte	0
 2580 00f1 00        		.byte	0
 2581 00f2 00        		.byte	0
 2582 00f3 00        		.byte	0
 2583 00f4 00        		.byte	0
 2584 00f5 00        		.byte	0
 2585 00f6 00        		.byte	0
 2586 00f7 00        		.byte	0
 2587 00f8 00        		.byte	0
 2588 00f9 00        		.byte	0
 2589 00fa 00        		.byte	0
 2590 00fb 00        		.byte	0
 2591 00fc 00        		.byte	0
 2592 00fd 00        		.byte	0
 2593 00fe 00        		.byte	0
 2594 00ff 00        		.byte	0
 2595 0100 F8        		.byte	-8
 2596 0101 F8        		.byte	-8
 2597 0102 F8        		.byte	-8
 2598 0103 F8        		.byte	-8
 2599 0104 F8        		.byte	-8
 2600 0105 F8        		.byte	-8
 2601 0106 F8        		.byte	-8
 2602 0107 F8        		.byte	-8
 2603 0108 F8        		.byte	-8
 2604 0109 F8        		.byte	-8
 2605 010a F8        		.byte	-8
 2606 010b F8        		.byte	-8
 2607 010c F8        		.byte	-8
 2608 010d F0        		.byte	-16
 2609 010e E0        		.byte	-32
 2610 010f E0        		.byte	-32
 2611 0110 E0        		.byte	-32
 2612 0111 FC        		.byte	-4
 2613 0112 FF        		.byte	-1
 2614 0113 FF        		.byte	-1
 2615 0114 FF        		.byte	-1
 2616 0115 FF        		.byte	-1
 2617 0116 FF        		.byte	-1
 2618 0117 7F        		.byte	127
 2619 0118 FF        		.byte	-1
 2620 0119 FF        		.byte	-1
 2621 011a FF        		.byte	-1
 2622 011b FF        		.byte	-1
 2623 011c FF        		.byte	-1
 2624 011d 7C        		.byte	124
 2625 011e 00        		.byte	0
 2626 011f 00        		.byte	0
 2627 0120 00        		.byte	0
 2628 0121 00        		.byte	0
 2629 0122 00        		.byte	0
 2630 0123 00        		.byte	0
 2631 0124 00        		.byte	0
 2632 0125 00        		.byte	0
 2633 0126 00        		.byte	0
 2634 0127 00        		.byte	0
 2635 0128 00        		.byte	0
 2636 0129 00        		.byte	0
 2637 012a 00        		.byte	0
 2638 012b 00        		.byte	0
 2639 012c 00        		.byte	0
 2640 012d 00        		.byte	0
 2641 012e F0        		.byte	-16
 2642 012f FC        		.byte	-4
 2643 0130 0E        		.byte	14
 2644 0131 06        		.byte	6
 2645 0132 06        		.byte	6
 2646 0133 06        		.byte	6
 2647 0134 06        		.byte	6
 2648 0135 0C        		.byte	12
 2649 0136 FE        		.byte	-2
 2650 0137 FC        		.byte	-4
 2651 0138 00        		.byte	0
 2652 0139 00        		.byte	0
 2653 013a F8        		.byte	-8
 2654 013b FC        		.byte	-4
 2655 013c 0E        		.byte	14
 2656 013d 06        		.byte	6
 2657 013e 06        		.byte	6
 2658 013f 06        		.byte	6
 2659 0140 06        		.byte	6
 2660 0141 9C        		.byte	-100
 2661 0142 FF        		.byte	-1
 2662 0143 FF        		.byte	-1
 2663 0144 00        		.byte	0
 2664 0145 60        		.byte	96
 2665 0146 F8        		.byte	-8
 2666 0147 9C        		.byte	-100
 2667 0148 06        		.byte	6
 2668 0149 06        		.byte	6
 2669 014a 06        		.byte	6
 2670 014b 06        		.byte	6
 2671 014c 0C        		.byte	12
 2672 014d FC        		.byte	-4
 2673 014e FE        		.byte	-2
 2674 014f 00        		.byte	0
 2675 0150 00        		.byte	0
 2676 0151 06        		.byte	6
 2677 0152 FF        		.byte	-1
 2678 0153 FF        		.byte	-1
 2679 0154 06        		.byte	6
 2680 0155 06        		.byte	6
 2681 0156 00        		.byte	0
 2682 0157 FE        		.byte	-2
 2683 0158 FE        		.byte	-2
 2684 0159 0E        		.byte	14
 2685 015a 06        		.byte	6
 2686 015b 06        		.byte	6
 2687 015c 02        		.byte	2
 2688 015d 00        		.byte	0
 2689 015e FE        		.byte	-2
 2690 015f FE        		.byte	-2
 2691 0160 00        		.byte	0
 2692 0161 00        		.byte	0
 2693 0162 00        		.byte	0
 2694 0163 00        		.byte	0
 2695 0164 FE        		.byte	-2
 2696 0165 FE        		.byte	-2
 2697 0166 00        		.byte	0
 2698 0167 00        		.byte	0
 2699 0168 00        		.byte	0
 2700 0169 FE        		.byte	-2
 2701 016a FE        		.byte	-2
 2702 016b 00        		.byte	0
 2703 016c 00        		.byte	0
 2704 016d 06        		.byte	6
 2705 016e FF        		.byte	-1
 2706 016f FF        		.byte	-1
 2707 0170 06        		.byte	6
 2708 0171 06        		.byte	6
 2709 0172 00        		.byte	0
 2710 0173 00        		.byte	0
 2711 0174 00        		.byte	0
 2712 0175 00        		.byte	0
 2713 0176 00        		.byte	0
 2714 0177 00        		.byte	0
 2715 0178 00        		.byte	0
 2716 0179 00        		.byte	0
 2717 017a 00        		.byte	0
 2718 017b 00        		.byte	0
 2719 017c 00        		.byte	0
 2720 017d 00        		.byte	0
 2721 017e 00        		.byte	0
 2722 017f 00        		.byte	0
 2723 0180 01        		.byte	1
 2724 0181 1F        		.byte	31
 2725 0182 3F        		.byte	63
 2726 0183 7F        		.byte	127
 2727 0184 7F        		.byte	127
 2728 0185 FF        		.byte	-1
 2729 0186 FF        		.byte	-1
 2730 0187 FF        		.byte	-1
 2731 0188 FF        		.byte	-1
 2732 0189 FF        		.byte	-1
 2733 018a FF        		.byte	-1
 2734 018b FF        		.byte	-1
 2735 018c F7        		.byte	-9
 2736 018d E7        		.byte	-25
 2737 018e E7        		.byte	-25
 2738 018f C7        		.byte	-57
 2739 0190 CF        		.byte	-49
 2740 0191 9F        		.byte	-97
 2741 0192 FF        		.byte	-1
 2742 0193 FF        		.byte	-1
 2743 0194 FF        		.byte	-1
 2744 0195 EF        		.byte	-17
 2745 0196 E0        		.byte	-32
 2746 0197 F8        		.byte	-8
 2747 0198 FF        		.byte	-1
 2748 0199 FF        		.byte	-1
 2749 019a FF        		.byte	-1
 2750 019b FF        		.byte	-1
 2751 019c FF        		.byte	-1
 2752 019d FF        		.byte	-1
 2753 019e FE        		.byte	-2
 2754 019f FF        		.byte	-1
 2755 01a0 FE        		.byte	-2
 2756 01a1 FE        		.byte	-2
 2757 01a2 FE        		.byte	-2
 2758 01a3 FE        		.byte	-2
 2759 01a4 FE        		.byte	-2
 2760 01a5 FE        		.byte	-2
 2761 01a6 FC        		.byte	-4
 2762 01a7 FC        		.byte	-4
 2763 01a8 F8        		.byte	-8
 2764 01a9 F0        		.byte	-16
 2765 01aa E0        		.byte	-32
 2766 01ab C0        		.byte	-64
 2767 01ac 00        		.byte	0
 2768 01ad 00        		.byte	0
 2769 01ae 00        		.byte	0
 2770 01af 03        		.byte	3
 2771 01b0 07        		.byte	7
 2772 01b1 06        		.byte	6
 2773 01b2 04        		.byte	4
 2774 01b3 04        		.byte	4
 2775 01b4 06        		.byte	6
 2776 01b5 07        		.byte	7
 2777 01b6 07        		.byte	7
 2778 01b7 07        		.byte	7
 2779 01b8 00        		.byte	0
 2780 01b9 00        		.byte	0
 2781 01ba 01        		.byte	1
 2782 01bb 03        		.byte	3
 2783 01bc 07        		.byte	7
 2784 01bd 06        		.byte	6
 2785 01be 04        		.byte	4
 2786 01bf 06        		.byte	6
 2787 01c0 06        		.byte	6
 2788 01c1 07        		.byte	7
 2789 01c2 07        		.byte	7
 2790 01c3 07        		.byte	7
 2791 01c4 00        		.byte	0
 2792 01c5 00        		.byte	0
 2793 01c6 01        		.byte	1
 2794 01c7 03        		.byte	3
 2795 01c8 06        		.byte	6
 2796 01c9 06        		.byte	6
 2797 01ca 04        		.byte	4
 2798 01cb 06        		.byte	6
 2799 01cc 06        		.byte	6
 2800 01cd 07        		.byte	7
 2801 01ce 07        		.byte	7
 2802 01cf 00        		.byte	0
 2803 01d0 00        		.byte	0
 2804 01d1 00        		.byte	0
 2805 01d2 07        		.byte	7
 2806 01d3 07        		.byte	7
 2807 01d4 00        		.byte	0
 2808 01d5 00        		.byte	0
 2809 01d6 00        		.byte	0
 2810 01d7 07        		.byte	7
 2811 01d8 07        		.byte	7
 2812 01d9 00        		.byte	0
 2813 01da 00        		.byte	0
 2814 01db 00        		.byte	0
 2815 01dc 00        		.byte	0
 2816 01dd 00        		.byte	0
 2817 01de 01        		.byte	1
 2818 01df 07        		.byte	7
 2819 01e0 06        		.byte	6
 2820 01e1 06        		.byte	6
 2821 01e2 06        		.byte	6
 2822 01e3 06        		.byte	6
 2823 01e4 07        		.byte	7
 2824 01e5 01        		.byte	1
 2825 01e6 00        		.byte	0
 2826 01e7 00        		.byte	0
 2827 01e8 00        		.byte	0
 2828 01e9 07        		.byte	7
 2829 01ea 07        		.byte	7
 2830 01eb 00        		.byte	0
 2831 01ec 00        		.byte	0
 2832 01ed 00        		.byte	0
 2833 01ee 07        		.byte	7
 2834 01ef 07        		.byte	7
 2835 01f0 00        		.byte	0
 2836 01f1 00        		.byte	0
 2837 01f2 00        		.byte	0
 2838 01f3 00        		.byte	0
 2839 01f4 00        		.byte	0
 2840 01f5 00        		.byte	0
 2841 01f6 00        		.byte	0
 2842 01f7 00        		.byte	0
 2843 01f8 00        		.byte	0
 2844 01f9 00        		.byte	0
 2845 01fa 00        		.byte	0
 2846 01fb 00        		.byte	0
 2847 01fc 00        		.byte	0
 2848 01fd 00        		.byte	0
 2849 01fe 00        		.byte	0
 2850 01ff 00        		.byte	0
 2851 0200 00        		.byte	0
 2852 0201 00        		.byte	0
 2853 0202 00        		.byte	0
 2854 0203 C0        		.byte	-64
 2855 0204 E0        		.byte	-32
 2856 0205 F8        		.byte	-8
 2857 0206 F9        		.byte	-7
 2858 0207 FF        		.byte	-1
 2859 0208 FF        		.byte	-1
 2860 0209 FF        		.byte	-1
 2861 020a FF        		.byte	-1
 2862 020b FF        		.byte	-1
 2863 020c FF        		.byte	-1
 2864 020d BF        		.byte	-65
 2865 020e 8F        		.byte	-113
 2866 020f C7        		.byte	-57
 2867 0210 C7        		.byte	-57
 2868 0211 F3        		.byte	-13
 2869 0212 FF        		.byte	-1
 2870 0213 FF        		.byte	-1
 2871 0214 FF        		.byte	-1
 2872 0215 FF        		.byte	-1
 2873 0216 0F        		.byte	15
 2874 0217 3F        		.byte	63
 2875 0218 FE        		.byte	-2
 2876 0219 FC        		.byte	-4
 2877 021a FC        		.byte	-4
 2878 021b FC        		.byte	-4
 2879 021c FC        		.byte	-4
 2880 021d FE        		.byte	-2
 2881 021e FF        		.byte	-1
 2882 021f FF        		.byte	-1
 2883 0220 FF        		.byte	-1
 2884 0221 FF        		.byte	-1
 2885 0222 FF        		.byte	-1
 2886 0223 FF        		.byte	-1
 2887 0224 FF        		.byte	-1
 2888 0225 FF        		.byte	-1
 2889 0226 FF        		.byte	-1
 2890 0227 7F        		.byte	127
 2891 0228 3F        		.byte	63
 2892 0229 0F        		.byte	15
 2893 022a 07        		.byte	7
 2894 022b 01        		.byte	1
 2895 022c 00        		.byte	0
 2896 022d 00        		.byte	0
 2897 022e 00        		.byte	0
 2898 022f 30        		.byte	48
 2899 0230 38        		.byte	56
 2900 0231 00        		.byte	0
 2901 0232 00        		.byte	0
 2902 0233 00        		.byte	0
 2903 0234 00        		.byte	0
 2904 0235 00        		.byte	0
 2905 0236 00        		.byte	0
 2906 0237 00        		.byte	0
 2907 0238 00        		.byte	0
 2908 0239 00        		.byte	0
 2909 023a 00        		.byte	0
 2910 023b 00        		.byte	0
 2911 023c 00        		.byte	0
 2912 023d 00        		.byte	0
 2913 023e 00        		.byte	0
 2914 023f 00        		.byte	0
 2915 0240 00        		.byte	0
 2916 0241 00        		.byte	0
 2917 0242 00        		.byte	0
 2918 0243 00        		.byte	0
 2919 0244 00        		.byte	0
 2920 0245 00        		.byte	0
 2921 0246 FE        		.byte	-2
 2922 0247 FE        		.byte	-2
 2923 0248 00        		.byte	0
 2924 0249 00        		.byte	0
 2925 024a 00        		.byte	0
 2926 024b 00        		.byte	0
 2927 024c 00        		.byte	0
 2928 024d 00        		.byte	0
 2929 024e 00        		.byte	0
 2930 024f 00        		.byte	0
 2931 0250 00        		.byte	0
 2932 0251 00        		.byte	0
 2933 0252 00        		.byte	0
 2934 0253 00        		.byte	0
 2935 0254 00        		.byte	0
 2936 0255 00        		.byte	0
 2937 0256 00        		.byte	0
 2938 0257 00        		.byte	0
 2939 0258 00        		.byte	0
 2940 0259 00        		.byte	0
 2941 025a 00        		.byte	0
 2942 025b 00        		.byte	0
 2943 025c 00        		.byte	0
 2944 025d E0        		.byte	-32
 2945 025e E0        		.byte	-32
 2946 025f 00        		.byte	0
 2947 0260 00        		.byte	0
 2948 0261 00        		.byte	0
 2949 0262 00        		.byte	0
 2950 0263 00        		.byte	0
 2951 0264 00        		.byte	0
 2952 0265 00        		.byte	0
 2953 0266 00        		.byte	0
 2954 0267 00        		.byte	0
 2955 0268 00        		.byte	0
 2956 0269 38        		.byte	56
 2957 026a 30        		.byte	48
 2958 026b 00        		.byte	0
 2959 026c 00        		.byte	0
 2960 026d 00        		.byte	0
 2961 026e 00        		.byte	0
 2962 026f 00        		.byte	0
 2963 0270 00        		.byte	0
 2964 0271 00        		.byte	0
 2965 0272 00        		.byte	0
 2966 0273 00        		.byte	0
 2967 0274 00        		.byte	0
 2968 0275 00        		.byte	0
 2969 0276 00        		.byte	0
 2970 0277 00        		.byte	0
 2971 0278 00        		.byte	0
 2972 0279 00        		.byte	0
 2973 027a 00        		.byte	0
 2974 027b 00        		.byte	0
 2975 027c 00        		.byte	0
 2976 027d 00        		.byte	0
 2977 027e 00        		.byte	0
 2978 027f 00        		.byte	0
 2979 0280 00        		.byte	0
 2980 0281 E0        		.byte	-32
 2981 0282 FF        		.byte	-1
 2982 0283 FF        		.byte	-1
 2983 0284 FF        		.byte	-1
 2984 0285 FF        		.byte	-1
 2985 0286 FF        		.byte	-1
 2986 0287 FF        		.byte	-1
 2987 0288 FF        		.byte	-1
 2988 0289 FF        		.byte	-1
 2989 028a 7F        		.byte	127
 2990 028b 7F        		.byte	127
 2991 028c 7F        		.byte	127
 2992 028d 7F        		.byte	127
 2993 028e 3F        		.byte	63
 2994 028f 1F        		.byte	31
 2995 0290 1F        		.byte	31
 2996 0291 0F        		.byte	15
 2997 0292 7F        		.byte	127
 2998 0293 FF        		.byte	-1
 2999 0294 FF        		.byte	-1
 3000 0295 FF        		.byte	-1
 3001 0296 FE        		.byte	-2
 3002 0297 FC        		.byte	-4
 3003 0298 FF        		.byte	-1
 3004 0299 FF        		.byte	-1
 3005 029a FF        		.byte	-1
 3006 029b FF        		.byte	-1
 3007 029c FF        		.byte	-1
 3008 029d FF        		.byte	-1
 3009 029e FF        		.byte	-1
 3010 029f F8        		.byte	-8
 3011 02a0 00        		.byte	0
 3012 02a1 00        		.byte	0
 3013 02a2 00        		.byte	0
 3014 02a3 00        		.byte	0
 3015 02a4 00        		.byte	0
 3016 02a5 00        		.byte	0
 3017 02a6 00        		.byte	0
 3018 02a7 00        		.byte	0
 3019 02a8 00        		.byte	0
 3020 02a9 00        		.byte	0
 3021 02aa 00        		.byte	0
 3022 02ab 00        		.byte	0
 3023 02ac 00        		.byte	0
 3024 02ad 00        		.byte	0
 3025 02ae 00        		.byte	0
 3026 02af FF        		.byte	-1
 3027 02b0 FF        		.byte	-1
 3028 02b1 00        		.byte	0
 3029 02b2 00        		.byte	0
 3030 02b3 00        		.byte	0
 3031 02b4 FF        		.byte	-1
 3032 02b5 FF        		.byte	-1
 3033 02b6 07        		.byte	7
 3034 02b7 03        		.byte	3
 3035 02b8 03        		.byte	3
 3036 02b9 03        		.byte	3
 3037 02ba FF        		.byte	-1
 3038 02bb FE        		.byte	-2
 3039 02bc 00        		.byte	0
 3040 02bd 00        		.byte	0
 3041 02be 78        		.byte	120
 3042 02bf FE        		.byte	-2
 3043 02c0 87        		.byte	-121
 3044 02c1 03        		.byte	3
 3045 02c2 03        		.byte	3
 3046 02c3 03        		.byte	3
 3047 02c4 03        		.byte	3
 3048 02c5 86        		.byte	-122
 3049 02c6 FF        		.byte	-1
 3050 02c7 FF        		.byte	-1
 3051 02c8 00        		.byte	0
 3052 02c9 00        		.byte	0
 3053 02ca 7F        		.byte	127
 3054 02cb FF        		.byte	-1
 3055 02cc 80        		.byte	-128
 3056 02cd 00        		.byte	0
 3057 02ce 00        		.byte	0
 3058 02cf 00        		.byte	0
 3059 02d0 FF        		.byte	-1
 3060 02d1 FF        		.byte	-1
 3061 02d2 00        		.byte	0
 3062 02d3 00        		.byte	0
 3063 02d4 84        		.byte	-124
 3064 02d5 9F        		.byte	-97
 3065 02d6 1F        		.byte	31
 3066 02d7 3B        		.byte	59
 3067 02d8 33        		.byte	51
 3068 02d9 F3        		.byte	-13
 3069 02da E0        		.byte	-32
 3070 02db 00        		.byte	0
 3071 02dc 03        		.byte	3
 3072 02dd FF        		.byte	-1
 3073 02de FF        		.byte	-1
 3074 02df 03        		.byte	3
 3075 02e0 01        		.byte	1
 3076 02e1 00        		.byte	0
 3077 02e2 FF        		.byte	-1
 3078 02e3 FF        		.byte	-1
 3079 02e4 03        		.byte	3
 3080 02e5 03        		.byte	3
 3081 02e6 01        		.byte	1
 3082 02e7 00        		.byte	0
 3083 02e8 00        		.byte	0
 3084 02e9 FF        		.byte	-1
 3085 02ea FF        		.byte	-1
 3086 02eb 00        		.byte	0
 3087 02ec 00        		.byte	0
 3088 02ed F8        		.byte	-8
 3089 02ee FE        		.byte	-2
 3090 02ef 9F        		.byte	-97
 3091 02f0 13        		.byte	19
 3092 02f1 13        		.byte	19
 3093 02f2 13        		.byte	19
 3094 02f3 13        		.byte	19
 3095 02f4 9E        		.byte	-98
 3096 02f5 9C        		.byte	-100
 3097 02f6 00        		.byte	0
 3098 02f7 00        		.byte	0
 3099 02f8 8E        		.byte	-114
 3100 02f9 9F        		.byte	-97
 3101 02fa 1B        		.byte	27
 3102 02fb 33        		.byte	51
 3103 02fc 73        		.byte	115
 3104 02fd E2        		.byte	-30
 3105 02fe C0        		.byte	-64
 3106 02ff 00        		.byte	0
 3107 0300 00        		.byte	0
 3108 0301 00        		.byte	0
 3109 0302 00        		.byte	0
 3110 0303 00        		.byte	0
 3111 0304 01        		.byte	1
 3112 0305 01        		.byte	1
 3113 0306 00        		.byte	0
 3114 0307 00        		.byte	0
 3115 0308 00        		.byte	0
 3116 0309 00        		.byte	0
 3117 030a 00        		.byte	0
 3118 030b 00        		.byte	0
 3119 030c 00        		.byte	0
 3120 030d 00        		.byte	0
 3121 030e 00        		.byte	0
 3122 030f 00        		.byte	0
 3123 0310 00        		.byte	0
 3124 0311 00        		.byte	0
 3125 0312 00        		.byte	0
 3126 0313 01        		.byte	1
 3127 0314 03        		.byte	3
 3128 0315 07        		.byte	7
 3129 0316 0F        		.byte	15
 3130 0317 1F        		.byte	31
 3131 0318 1F        		.byte	31
 3132 0319 3F        		.byte	63
 3133 031a 3F        		.byte	63
 3134 031b 3F        		.byte	63
 3135 031c 3F        		.byte	63
 3136 031d 1F        		.byte	31
 3137 031e 0F        		.byte	15
 3138 031f 03        		.byte	3
 3139 0320 00        		.byte	0
 3140 0321 00        		.byte	0
 3141 0322 00        		.byte	0
 3142 0323 00        		.byte	0
 3143 0324 00        		.byte	0
 3144 0325 00        		.byte	0
 3145 0326 00        		.byte	0
 3146 0327 00        		.byte	0
 3147 0328 00        		.byte	0
 3148 0329 00        		.byte	0
 3149 032a 00        		.byte	0
 3150 032b 00        		.byte	0
 3151 032c 00        		.byte	0
 3152 032d 00        		.byte	0
 3153 032e 00        		.byte	0
 3154 032f 03        		.byte	3
 3155 0330 03        		.byte	3
 3156 0331 00        		.byte	0
 3157 0332 00        		.byte	0
 3158 0333 00        		.byte	0
 3159 0334 03        		.byte	3
 3160 0335 03        		.byte	3
 3161 0336 00        		.byte	0
 3162 0337 00        		.byte	0
 3163 0338 00        		.byte	0
 3164 0339 00        		.byte	0
 3165 033a 03        		.byte	3
 3166 033b 03        		.byte	3
 3167 033c 00        		.byte	0
 3168 033d 00        		.byte	0
 3169 033e 00        		.byte	0
 3170 033f 01        		.byte	1
 3171 0340 03        		.byte	3
 3172 0341 03        		.byte	3
 3173 0342 03        		.byte	3
 3174 0343 03        		.byte	3
 3175 0344 03        		.byte	3
 3176 0345 01        		.byte	1
 3177 0346 03        		.byte	3
 3178 0347 03        		.byte	3
 3179 0348 00        		.byte	0
 3180 0349 00        		.byte	0
 3181 034a 00        		.byte	0
 3182 034b 01        		.byte	1
 3183 034c 03        		.byte	3
 3184 034d 03        		.byte	3
 3185 034e 03        		.byte	3
 3186 034f 03        		.byte	3
 3187 0350 03        		.byte	3
 3188 0351 01        		.byte	1
 3189 0352 00        		.byte	0
 3190 0353 00        		.byte	0
 3191 0354 01        		.byte	1
 3192 0355 03        		.byte	3
 3193 0356 03        		.byte	3
 3194 0357 03        		.byte	3
 3195 0358 03        		.byte	3
 3196 0359 03        		.byte	3
 3197 035a 00        		.byte	0
 3198 035b 00        		.byte	0
 3199 035c 00        		.byte	0
 3200 035d 03        		.byte	3
 3201 035e 03        		.byte	3
 3202 035f 00        		.byte	0
 3203 0360 00        		.byte	0
 3204 0361 00        		.byte	0
 3205 0362 03        		.byte	3
 3206 0363 01        		.byte	1
 3207 0364 00        		.byte	0
 3208 0365 00        		.byte	0
 3209 0366 00        		.byte	0
 3210 0367 00        		.byte	0
 3211 0368 00        		.byte	0
 3212 0369 03        		.byte	3
 3213 036a 03        		.byte	3
 3214 036b 00        		.byte	0
 3215 036c 00        		.byte	0
 3216 036d 00        		.byte	0
 3217 036e 01        		.byte	1
 3218 036f 03        		.byte	3
 3219 0370 03        		.byte	3
 3220 0371 03        		.byte	3
 3221 0372 03        		.byte	3
 3222 0373 03        		.byte	3
 3223 0374 01        		.byte	1
 3224 0375 01        		.byte	1
 3225 0376 00        		.byte	0
 3226 0377 00        		.byte	0
 3227 0378 01        		.byte	1
 3228 0379 03        		.byte	3
 3229 037a 03        		.byte	3
 3230 037b 03        		.byte	3
 3231 037c 03        		.byte	3
 3232 037d 01        		.byte	1
 3233 037e 00        		.byte	0
 3234 037f 00        		.byte	0
 3235 0380 00        		.byte	0
 3236 0381 00        		.byte	0
 3237 0382 00        		.byte	0
 3238 0383 00        		.byte	0
 3239 0384 00        		.byte	0
 3240 0385 00        		.byte	0
 3241 0386 00        		.byte	0
 3242 0387 00        		.byte	0
 3243 0388 00        		.byte	0
 3244 0389 00        		.byte	0
 3245 038a 00        		.byte	0
 3246 038b 00        		.byte	0
 3247 038c 00        		.byte	0
 3248 038d 00        		.byte	0
 3249 038e 00        		.byte	0
 3250 038f 00        		.byte	0
 3251 0390 00        		.byte	0
 3252 0391 00        		.byte	0
 3253 0392 00        		.byte	0
 3254 0393 00        		.byte	0
 3255 0394 00        		.byte	0
 3256 0395 00        		.byte	0
 3257 0396 00        		.byte	0
 3258 0397 00        		.byte	0
 3259 0398 00        		.byte	0
 3260 0399 00        		.byte	0
 3261 039a 00        		.byte	0
 3262 039b 00        		.byte	0
 3263 039c 00        		.byte	0
 3264 039d 00        		.byte	0
 3265 039e 00        		.byte	0
 3266 039f 00        		.byte	0
 3267 03a0 00        		.byte	0
 3268 03a1 00        		.byte	0
 3269 03a2 00        		.byte	0
 3270 03a3 00        		.byte	0
 3271 03a4 00        		.byte	0
 3272 03a5 00        		.byte	0
 3273 03a6 00        		.byte	0
 3274 03a7 00        		.byte	0
 3275 03a8 00        		.byte	0
 3276 03a9 00        		.byte	0
 3277 03aa 00        		.byte	0
 3278 03ab 00        		.byte	0
 3279 03ac 00        		.byte	0
 3280 03ad 00        		.byte	0
 3281 03ae 00        		.byte	0
 3282 03af 00        		.byte	0
 3283 03b0 00        		.byte	0
 3284 03b1 00        		.byte	0
 3285 03b2 00        		.byte	0
 3286 03b3 00        		.byte	0
 3287 03b4 00        		.byte	0
 3288 03b5 00        		.byte	0
 3289 03b6 00        		.byte	0
 3290 03b7 00        		.byte	0
 3291 03b8 00        		.byte	0
 3292 03b9 00        		.byte	0
 3293 03ba 00        		.byte	0
 3294 03bb 00        		.byte	0
 3295 03bc 00        		.byte	0
 3296 03bd 00        		.byte	0
 3297 03be 00        		.byte	0
 3298 03bf 00        		.byte	0
 3299 03c0 00        		.byte	0
 3300 03c1 00        		.byte	0
 3301 03c2 00        		.byte	0
 3302 03c3 00        		.byte	0
 3303 03c4 00        		.byte	0
 3304 03c5 00        		.byte	0
 3305 03c6 00        		.byte	0
 3306 03c7 00        		.byte	0
 3307 03c8 00        		.byte	0
 3308 03c9 00        		.byte	0
 3309 03ca 00        		.byte	0
 3310 03cb 00        		.byte	0
 3311 03cc 00        		.byte	0
 3312 03cd 00        		.byte	0
 3313 03ce 00        		.byte	0
 3314 03cf 00        		.byte	0
 3315 03d0 00        		.byte	0
 3316 03d1 00        		.byte	0
 3317 03d2 00        		.byte	0
 3318 03d3 00        		.byte	0
 3319 03d4 00        		.byte	0
 3320 03d5 00        		.byte	0
 3321 03d6 00        		.byte	0
 3322 03d7 00        		.byte	0
 3323 03d8 00        		.byte	0
 3324 03d9 00        		.byte	0
 3325 03da 00        		.byte	0
 3326 03db 00        		.byte	0
 3327 03dc 00        		.byte	0
 3328 03dd 00        		.byte	0
 3329 03de 00        		.byte	0
 3330 03df 00        		.byte	0
 3331 03e0 00        		.byte	0
 3332 03e1 00        		.byte	0
 3333 03e2 00        		.byte	0
 3334 03e3 00        		.byte	0
 3335 03e4 00        		.byte	0
 3336 03e5 00        		.byte	0
 3337 03e6 00        		.byte	0
 3338 03e7 00        		.byte	0
 3339 03e8 00        		.byte	0
 3340 03e9 00        		.byte	0
 3341 03ea 00        		.byte	0
 3342 03eb 00        		.byte	0
 3343 03ec 00        		.byte	0
 3344 03ed 00        		.byte	0
 3345 03ee 00        		.byte	0
 3346 03ef 00        		.byte	0
 3347 03f0 00        		.byte	0
 3348 03f1 00        		.byte	0
 3349 03f2 00        		.byte	0
 3350 03f3 00        		.byte	0
 3351 03f4 00        		.byte	0
 3352 03f5 00        		.byte	0
 3353 03f6 00        		.byte	0
 3354 03f7 00        		.byte	0
 3355 03f8 00        		.byte	0
 3356 03f9 00        		.byte	0
 3357 03fa 00        		.byte	0
 3358 03fb 00        		.byte	0
 3359 03fc 00        		.byte	0
 3360 03fd 00        		.byte	0
 3361 03fe 00        		.byte	0
 3362 03ff 00        		.byte	0
 3367               		.text
 3369               	.Letext0:
 3370               		.ident	"GCC: (GNU) 4.9.3"
 3371               	.global __do_copy_data
 3372               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stlcd.c
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:4      *ABS*:000000000000003f __SREG__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:115    .text:0000000000000000 testdrawchar
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:1292   .data:0000000000000000 buffer
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:172    .text:0000000000000032 testdrawcircle
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:220    .text:0000000000000054 testdrawrect
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:284    .text:0000000000000096 testfillrect
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:349    .text:00000000000000da spiwrite
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:409    .text:0000000000000104 st7565_command
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:431    .text:000000000000010a st7565_init
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:577    .text:000000000000018c st7565_data
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:599    .text:0000000000000192 clear_screen
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:667    .text:00000000000001ce st7565_set_brightness
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:706    .text:00000000000001e2 write_buffer
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:2320   .data:0000000000000400 pagemap
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:834    .text:0000000000000292 setup
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:889    .text:00000000000002bc testdrawbitmap
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:2338   .progmem.data:0000000000000000 logo16_glcd_bmp
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:1126   .text:0000000000000414 testdrawline
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:1270   .text:00000000000004a8 get_buffer
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//cctqrXo6.s:2333   .bss:0000000000000000 is_reversed

UNDEFINED SYMBOLS
__udivmodqi4
drawchar
drawcircle
drawrect
fillrect
puts
printf
srandom
random
__divmodsi4
drawbitmap
drawline
__do_copy_data
__do_clear_bss
