   1               		.file	"stlcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 113               	.global	testdrawchar
 115               	testdrawchar:
 116               		.stabd	46,0,0
   1:stlcd.c       **** /*
   2:stlcd.c       **** $Id:$
   3:stlcd.c       **** 
   4:stlcd.c       **** ST7565 LCD library!
   5:stlcd.c       **** 
   6:stlcd.c       **** Copyright (C) 2010 Limor Fried, Adafruit Industries
   7:stlcd.c       **** 
   8:stlcd.c       **** This library is free software; you can redistribute it and/or
   9:stlcd.c       **** modify it under the terms of the GNU Lesser General Public
  10:stlcd.c       **** License as published by the Free Software Foundation; either
  11:stlcd.c       **** version 2.1 of the License, or (at your option) any later version.
  12:stlcd.c       **** 
  13:stlcd.c       **** This library is distributed in the hope that it will be useful,
  14:stlcd.c       **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:stlcd.c       **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  16:stlcd.c       **** Lesser General Public License for more details.
  17:stlcd.c       **** 
  18:stlcd.c       **** You should have received a copy of the GNU Lesser General Public
  19:stlcd.c       **** License along with this library; if not, write to the Free Software
  20:stlcd.c       **** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  21:stlcd.c       **** 
  22:stlcd.c       ****  // some of this code was written by <cstone@pobox.com> originally; it is in the public domain.
  23:stlcd.c       **** */
  24:stlcd.c       **** 
  25:stlcd.c       **** #include <avr/io.h>
  26:stlcd.c       **** #include <util/delay.h>
  27:stlcd.c       **** #include <stdlib.h>
  28:stlcd.c       **** #include "stlcd.h"
  29:stlcd.c       **** #include "glcd.h"
  30:stlcd.c       **** #include "util.h"
  31:stlcd.c       **** #include "logo_glcd.h"
  32:stlcd.c       **** 
  33:stlcd.c       **** #define BLA_DDR DDRB
  34:stlcd.c       **** #define BLA_PIN PINB
  35:stlcd.c       **** #define BLA_PORT PORTB
  36:stlcd.c       **** #define BLA 2
  37:stlcd.c       **** 
  38:stlcd.c       **** #define SID_DDR DDRB
  39:stlcd.c       **** #define SID_PIN PINB
  40:stlcd.c       **** #define SID_PORT PORTB
  41:stlcd.c       **** #define SID 1
  42:stlcd.c       **** 
  43:stlcd.c       **** #define SCLK_DDR DDRB
  44:stlcd.c       **** #define SCLK_PIN PINB
  45:stlcd.c       **** #define SCLK_PORT PORTB
  46:stlcd.c       **** #define SCLK 0
  47:stlcd.c       **** 
  48:stlcd.c       **** #define A0_DDR DDRD
  49:stlcd.c       **** #define A0_PIN PIND
  50:stlcd.c       **** #define A0_PORT PORTD
  51:stlcd.c       **** #define A0 7
  52:stlcd.c       **** 
  53:stlcd.c       **** #define RST_DDR DDRD
  54:stlcd.c       **** #define RST_PIN PIND
  55:stlcd.c       **** #define RST_PORT PORTD
  56:stlcd.c       **** #define RST 6
  57:stlcd.c       **** 
  58:stlcd.c       **** #define CS_DDR DDRD
  59:stlcd.c       **** #define CS_PIN PIND
  60:stlcd.c       **** #define CS_PORT PORTD
  61:stlcd.c       **** #define CS 5
  62:stlcd.c       **** 
  63:stlcd.c       **** #define LED_DDR DDRB
  64:stlcd.c       **** #define LED_PORT PORTB
  65:stlcd.c       **** #define LED 5
  66:stlcd.c       **** 
  67:stlcd.c       **** uint8_t is_reversed = 0;
  68:stlcd.c       **** 
  69:stlcd.c       **** int pagemap[] = { 3, 2, 1, 0, 7, 6, 5, 4 };
  70:stlcd.c       **** 
  71:stlcd.c       **** uint8_t buffer[128 * 64 / 8] = {
  72:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  73:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  74:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  75:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  76:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  77:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  78:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  79:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  80:stlcd.c       **** 
  81:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  82:stlcd.c       ****   0x0, 0x0, 0x0, 0x3, 0x7, 0xF, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7, 0x0, 0x0, 0x0,
  83:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  84:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  85:stlcd.c       ****   0x0, 0x0, 0x7F, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  86:stlcd.c       ****   0x0, 0x0, 0x1F, 0x3F, 0x70, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  87:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3, 0x3,
  88:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  89:stlcd.c       **** 
  90:stlcd.c       ****   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0xF, 0x7, 0x7,
  91:stlcd.c       ****   0x7, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x0, 0x0,
  92:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0x3F,
  93:stlcd.c       ****   0x70, 0x60, 0x60, 0x60, 0x60, 0x30, 0x7F, 0x3F, 0x0, 0x0, 0x1F, 0x3F, 0x70, 0x60, 0x60, 0x60,
  94:stlcd.c       ****   0x60, 0x39, 0xFF, 0xFF, 0x0, 0x6, 0x1F, 0x39, 0x60, 0x60, 0x60, 0x60, 0x30, 0x3F, 0x7F, 0x0,
  95:stlcd.c       ****   0x0, 0x60, 0xFF, 0xFF, 0x60, 0x60, 0x0, 0x7F, 0x7F, 0x70, 0x60, 0x60, 0x40, 0x0, 0x7F, 0x7F,
  96:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0x0, 0x0, 0x60, 0xFF, 0xFF,
  97:stlcd.c       ****   0x60, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  98:stlcd.c       **** 
  99:stlcd.c       ****   0x80, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xE7, 0xE7, 0xE3,
 100:stlcd.c       ****   0xF3, 0xF9, 0xFF, 0xFF, 0xFF, 0xF7, 0x7, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF,
 101:stlcd.c       ****   0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x1F, 0xF, 0x7, 0x3, 0x0, 0x0, 0x0, 0xC0,
 102:stlcd.c       ****   0xE0, 0x60, 0x20, 0x20, 0x60, 0xE0, 0xE0, 0xE0, 0x0, 0x0, 0x80, 0xC0, 0xE0, 0x60, 0x20, 0x60,
 103:stlcd.c       ****   0x60, 0xE0, 0xE0, 0xE0, 0x0, 0x0, 0x80, 0xC0, 0x60, 0x60, 0x20, 0x60, 0x60, 0xE0, 0xE0, 0x0,
 104:stlcd.c       ****   0x0, 0x0, 0xE0, 0xE0, 0x0, 0x0, 0x0, 0xE0, 0xE0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xE0,
 105:stlcd.c       ****   0x60, 0x60, 0x60, 0x60, 0xE0, 0x80, 0x0, 0x0, 0x0, 0xE0, 0xE0, 0x0, 0x0, 0x0, 0xE0, 0xE0,
 106:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 107:stlcd.c       **** 
 108:stlcd.c       ****   0x0, 0x0, 0x0, 0x3, 0x7, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xF1, 0xE3,
 109:stlcd.c       ****   0xE3, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFC, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF,
 110:stlcd.c       ****   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0x80, 0x0, 0x0, 0x0, 0xC,
 111:stlcd.c       ****   0x1C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 112:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 113:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x0,
 114:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xC, 0x0, 0x0, 0x0, 0x0, 0x0,
 115:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 116:stlcd.c       **** 
 117:stlcd.c       ****   0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8,
 118:stlcd.c       ****   0xF8, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
 119:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF,
 120:stlcd.c       ****   0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xFF, 0x7F, 0x0, 0x0, 0x1E, 0x7F,
 121:stlcd.c       ****   0xE1, 0xC0, 0xC0, 0xC0, 0xC0, 0x61, 0xFF, 0xFF, 0x0, 0x0, 0xFE, 0xFF, 0x1, 0x0, 0x0, 0x0,
 122:stlcd.c       ****   0xFF, 0xFF, 0x0, 0x0, 0x21, 0xF9, 0xF8, 0xDC, 0xCC, 0xCF, 0x7, 0x0, 0xC0, 0xFF, 0xFF, 0xC0,
 123:stlcd.c       ****   0x80, 0x0, 0xFF, 0xFF, 0xC0, 0xC0, 0x80, 0x0, 0x0, 0xFF, 0xFF, 0x0, 0x0, 0x1F, 0x7F, 0xF9,
 124:stlcd.c       ****   0xC8, 0xC8, 0xC8, 0xC8, 0x79, 0x39, 0x0, 0x0, 0x71, 0xF9, 0xD8, 0xCC, 0xCE, 0x47, 0x3, 0x0,
 125:stlcd.c       **** 
 126:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x80, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 127:stlcd.c       ****   0x0, 0x0, 0x0, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0,
 128:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0,
 129:stlcd.c       ****   0xC0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x80,
 130:stlcd.c       ****   0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0,
 131:stlcd.c       ****   0xC0, 0x80, 0x0, 0x0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0,
 132:stlcd.c       ****   0x0, 0x0, 0xC0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xC0, 0x0, 0x0, 0x0, 0x80, 0xC0,
 133:stlcd.c       ****   0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x0, 0x0, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x0, 0x0,
 134:stlcd.c       **** 
 135:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 136:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 137:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 138:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 139:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 140:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 141:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 142:stlcd.c       ****   0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 143:stlcd.c       **** 
 144:stlcd.c       **** };
 145:stlcd.c       **** 
 146:stlcd.c       **** void setup(void) {
 147:stlcd.c       **** 
 148:stlcd.c       ****   //Serial.begin(9600);
 149:stlcd.c       ****   //uart_init(BRRL_192);
 150:stlcd.c       **** 
 151:stlcd.c       ****   // turn on backlight
 152:stlcd.c       ****   BLA_DDR |= _BV(BLA);
 153:stlcd.c       ****   BLA_PORT |= _BV(BLA);
 154:stlcd.c       **** 
 155:stlcd.c       ****   LED_DDR |= _BV(LED);
 156:stlcd.c       ****   // Serial.println("init");
 157:stlcd.c       ****   //putstring_nl("init!");
 158:stlcd.c       **** 
 159:stlcd.c       ****   st7565_init();
 160:stlcd.c       **** 
 161:stlcd.c       **** 
 162:stlcd.c       ****   /*
 163:stlcd.c       ****   while (1) {
 164:stlcd.c       ****     spiwrite(0x55);
 165:stlcd.c       ****     _delay_ms(100);
 166:stlcd.c       ****   }
 167:stlcd.c       ****   */
 168:stlcd.c       **** 
 169:stlcd.c       ****   //Serial.println("on");
 170:stlcd.c       ****   //putstring_nl("on");
 171:stlcd.c       ****   st7565_command(CMD_DISPLAY_ON);
 172:stlcd.c       ****   //Serial.println("normal");
 173:stlcd.c       ****   //putstring_nl("normal");
 174:stlcd.c       ****   st7565_command(CMD_SET_ALLPTS_NORMAL);
 175:stlcd.c       ****   //Serial.println("bright");
 176:stlcd.c       ****   //putstring_nl("bright");
 177:stlcd.c       ****   st7565_set_brightness(0x20);
 178:stlcd.c       ****   //Serial.println("clear");
 179:stlcd.c       ****   //putstring_nl("clear");
 180:stlcd.c       ****   clear_screen();
 181:stlcd.c       ****   //Serial.println("blit");
 182:stlcd.c       ****   //putstring_nl("blit");
 183:stlcd.c       **** 
 184:stlcd.c       ****   // write_buffer(buffer);
 185:stlcd.c       ****   // putstring_nl("done");
 186:stlcd.c       ****   // _delay_ms(250);
 187:stlcd.c       ****   // clear_buffer(buffer);
 188:stlcd.c       **** 
 189:stlcd.c       ****   LED_PORT |= _BV(LED);
 190:stlcd.c       **** 
 191:stlcd.c       ****   //drawrect(buffer, 10, 10, 10, 10, 1);
 192:stlcd.c       ****   // testdrawrect(buffer);
 193:stlcd.c       ****   // testfillrect(buffer);
 194:stlcd.c       ****   //  testdrawline(buffer);
 195:stlcd.c       ****   // testdrawcircle(buffer);
 196:stlcd.c       ****   // fillcircle(buffer, 32, 32, 10, 1);
 197:stlcd.c       ****   // testdrawchar(buffer);
 198:stlcd.c       ****   // drawstring(buffer, 0, 0, "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiu
 199:stlcd.c       ****   // testdrawbitmap(buffer, logo16_glcd_bmp, 16, 16);
 200:stlcd.c       **** 
 201:stlcd.c       ****   //LED_PORT &= ~_BV(LED);
 202:stlcd.c       ****   //write_buffer(buffer);
 203:stlcd.c       **** }
 204:stlcd.c       **** 
 205:stlcd.c       **** #define NUMFLAKES 10
 206:stlcd.c       **** #define XPOS 0
 207:stlcd.c       **** #define YPOS 1
 208:stlcd.c       **** #define DELTAY 2
 209:stlcd.c       **** 
 210:stlcd.c       **** void testdrawbitmap(uint8_t *buff, const uint8_t *bitmap, uint8_t w, uint8_t h) {
 211:stlcd.c       ****   uint8_t icons[NUMFLAKES][3];
 212:stlcd.c       ****   srandom(buff[666]);
 213:stlcd.c       **** 
 214:stlcd.c       ****   // initialize
 215:stlcd.c       ****   for (uint8_t f = 0; f < NUMFLAKES; f++) {
 216:stlcd.c       ****     icons[f][XPOS] = random() % 128;
 217:stlcd.c       ****     icons[f][YPOS] = 0;
 218:stlcd.c       ****     icons[f][DELTAY] = random() % 5 + 1;
 219:stlcd.c       ****   }
 220:stlcd.c       **** 
 221:stlcd.c       ****   while (1) {
 222:stlcd.c       ****     // draw each icon
 223:stlcd.c       ****     for (uint8_t f = 0; f < NUMFLAKES; f++) {
 224:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, 1);
 225:stlcd.c       ****     }
 226:stlcd.c       ****     write_buffer(buffer);
 227:stlcd.c       ****     _delay_ms(200);
 228:stlcd.c       **** 
 229:stlcd.c       ****     // then erase it + move it
 230:stlcd.c       ****     for (uint8_t f = 0; f < NUMFLAKES; f++) {
 231:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, 0);
 232:stlcd.c       ****       // move it
 233:stlcd.c       ****       icons[f][YPOS] += icons[f][DELTAY];
 234:stlcd.c       ****       // if its gone, reinit
 235:stlcd.c       ****       if (icons[f][YPOS] > 64) {
 236:stlcd.c       ****         icons[f][XPOS] = random() % 128;
 237:stlcd.c       ****         icons[f][YPOS] = 0;
 238:stlcd.c       ****         icons[f][DELTAY] = random() % 5 + 1;
 239:stlcd.c       ****       }
 240:stlcd.c       ****     }
 241:stlcd.c       ****   }
 242:stlcd.c       **** }
 243:stlcd.c       **** 
 244:stlcd.c       **** void testdrawchar(uint8_t *buff) {
 118               	.LM0:
 119               	.LFBB1:
 120 0000 CF93      		push r28
 121 0002 DF93      		push r29
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 2 */
 125               	.L__stack_usage = 2
 126               	.LBB21:
 245:stlcd.c       ****   for (uint8_t i = 0; i < 168; i++) {
 128               	.LM1:
 129 0004 C0E0      		ldi r28,0
 246:stlcd.c       ****     drawchar(buffer, (i % 21) * 6, i / 21, i);
 131               	.LM2:
 132 0006 D5E1      		ldi r29,lo8(21)
 133               	.L2:
 135               	.LM3:
 136 0008 8C2F      		mov r24,r28
 137 000a 6D2F      		mov r22,r29
 138 000c 0E94 0000 		call __udivmodqi4
 139 0010 692F      		mov r22,r25
 140 0012 660F      		lsl r22
 141 0014 960F      		add r25,r22
 142 0016 692F      		mov r22,r25
 143 0018 660F      		lsl r22
 144 001a 2C2F      		mov r18,r28
 145 001c 482F      		mov r20,r24
 146 001e 80E0      		ldi r24,lo8(buffer)
 147 0020 90E0      		ldi r25,hi8(buffer)
 148 0022 0E94 0000 		call drawchar
 245:stlcd.c       ****   for (uint8_t i = 0; i < 168; i++) {
 150               	.LM4:
 151 0026 CF5F      		subi r28,lo8(-(1))
 152 0028 C83A      		cpi r28,lo8(-88)
 153 002a 01F4      		brne .L2
 154               	/* epilogue start */
 155               	.LBE21:
 247:stlcd.c       ****   }
 248:stlcd.c       **** }
 157               	.LM5:
 158 002c DF91      		pop r29
 159 002e CF91      		pop r28
 160 0030 0895      		ret
 165               	.Lscope1:
 167               		.stabd	78,0,0
 170               	.global	testdrawcircle
 172               	testdrawcircle:
 173               		.stabd	46,0,0
 249:stlcd.c       **** 
 250:stlcd.c       **** void testdrawcircle(uint8_t *buff) {
 175               	.LM6:
 176               	.LFBB2:
 177 0032 0F93      		push r16
 178 0034 CF93      		push r28
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 2 */
 182               	.L__stack_usage = 2
 183               	.LBB22:
 251:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 185               	.LM7:
 186 0036 C0E0      		ldi r28,0
 187               	.L6:
 252:stlcd.c       ****     drawcircle(buffer, 63, 31, i, 1);
 189               	.LM8:
 190 0038 01E0      		ldi r16,lo8(1)
 191 003a 2C2F      		mov r18,r28
 192 003c 4FE1      		ldi r20,lo8(31)
 193 003e 6FE3      		ldi r22,lo8(63)
 194 0040 80E0      		ldi r24,lo8(buffer)
 195 0042 90E0      		ldi r25,hi8(buffer)
 196 0044 0E94 0000 		call drawcircle
 251:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 198               	.LM9:
 199 0048 CE5F      		subi r28,lo8(-(2))
 200 004a C034      		cpi r28,lo8(64)
 201 004c 01F4      		brne .L6
 202               	/* epilogue start */
 203               	.LBE22:
 253:stlcd.c       ****   }
 254:stlcd.c       **** }
 205               	.LM10:
 206 004e CF91      		pop r28
 207 0050 0F91      		pop r16
 208 0052 0895      		ret
 213               	.Lscope2:
 215               		.stabd	78,0,0
 218               	.global	testdrawrect
 220               	testdrawrect:
 221               		.stabd	46,0,0
 255:stlcd.c       **** 
 256:stlcd.c       **** void testdrawline(uint8_t *buff) {
 257:stlcd.c       ****   for (uint8_t i = 0; i < 128; i += 4) {
 258:stlcd.c       ****     drawline(buffer, 0, 0, i, 63, 1);
 259:stlcd.c       ****   }
 260:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 4) {
 261:stlcd.c       ****     drawline(buffer, 0, 0, 127, i, 1);
 262:stlcd.c       ****   }
 263:stlcd.c       **** 
 264:stlcd.c       ****   write_buffer(buffer);
 265:stlcd.c       ****   _delay_ms(1000);
 266:stlcd.c       **** 
 267:stlcd.c       ****   for (uint8_t i = 0; i < 128; i += 4) {
 268:stlcd.c       ****     drawline(buffer, i, 63, 0, 0, 0);
 269:stlcd.c       ****   }
 270:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 4) {
 271:stlcd.c       ****     drawline(buffer, 127, i, 0, 0, 0);
 272:stlcd.c       ****   }
 273:stlcd.c       **** }
 274:stlcd.c       **** 
 275:stlcd.c       **** void testdrawrect(uint8_t *buff) {
 223               	.LM11:
 224               	.LFBB3:
 225 0054 CF92      		push r12
 226 0056 DF92      		push r13
 227 0058 EF92      		push r14
 228 005a 0F93      		push r16
 229 005c 1F93      		push r17
 230 005e CF93      		push r28
 231 0060 DF93      		push r29
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 7 */
 235               	.L__stack_usage = 7
 236 0062 6C01      		movw r12,r24
 237               	.LBB23:
 276:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 239               	.LM12:
 240 0064 C0E0      		ldi r28,0
 241 0066 10E4      		ldi r17,lo8(64)
 242 0068 D0E8      		ldi r29,lo8(-128)
 243               	.L9:
 244 006a 012F      		mov r16,r17
 245 006c 0C1B      		sub r16,r28
 246 006e 2D2F      		mov r18,r29
 247 0070 2C1B      		sub r18,r28
 277:stlcd.c       ****     drawrect(buff, i, i, 128 - i, 64 - i, 1);
 249               	.LM13:
 250 0072 EE24      		clr r14
 251 0074 E394      		inc r14
 252 0076 4C2F      		mov r20,r28
 253 0078 6C2F      		mov r22,r28
 254 007a C601      		movw r24,r12
 255 007c 0E94 0000 		call drawrect
 276:stlcd.c       ****   for (uint8_t i = 0; i < 64; i += 2) {
 257               	.LM14:
 258 0080 CE5F      		subi r28,lo8(-(2))
 259 0082 C034      		cpi r28,lo8(64)
 260 0084 01F4      		brne .L9
 261               	/* epilogue start */
 262               	.LBE23:
 278:stlcd.c       **** 
 279:stlcd.c       ****   }
 280:stlcd.c       **** }
 264               	.LM15:
 265 0086 DF91      		pop r29
 266 0088 CF91      		pop r28
 267 008a 1F91      		pop r17
 268 008c 0F91      		pop r16
 269 008e EF90      		pop r14
 270 0090 DF90      		pop r13
 271 0092 CF90      		pop r12
 272 0094 0895      		ret
 277               	.Lscope3:
 279               		.stabd	78,0,0
 282               	.global	testfillrect
 284               	testfillrect:
 285               		.stabd	46,0,0
 281:stlcd.c       **** 
 282:stlcd.c       **** 
 283:stlcd.c       **** void testfillrect(uint8_t *buff) {
 287               	.LM16:
 288               	.LFBB4:
 289 0096 CF92      		push r12
 290 0098 DF92      		push r13
 291 009a EF92      		push r14
 292 009c 0F93      		push r16
 293 009e 1F93      		push r17
 294 00a0 CF93      		push r28
 295 00a2 DF93      		push r29
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 7 */
 299               	.L__stack_usage = 7
 300 00a4 6C01      		movw r12,r24
 301               	.LBB24:
 284:stlcd.c       ****   for (uint8_t i = 0; i < 64; i++) {
 303               	.LM17:
 304 00a6 C0E0      		ldi r28,0
 305 00a8 10E4      		ldi r17,lo8(64)
 306 00aa D0E8      		ldi r29,lo8(-128)
 307               	.L12:
 285:stlcd.c       ****     fillrect(buff, i, i, 128 - i, 64 - i, i % 2);
 309               	.LM18:
 310 00ac 8C2F      		mov r24,r28
 311 00ae 8170      		andi r24,lo8(1)
 312 00b0 E82E      		mov r14,r24
 313 00b2 012F      		mov r16,r17
 314 00b4 0C1B      		sub r16,r28
 315 00b6 2D2F      		mov r18,r29
 316 00b8 2C1B      		sub r18,r28
 317 00ba 4C2F      		mov r20,r28
 318 00bc 6C2F      		mov r22,r28
 319 00be C601      		movw r24,r12
 320 00c0 0E94 0000 		call fillrect
 284:stlcd.c       ****   for (uint8_t i = 0; i < 64; i++) {
 322               	.LM19:
 323 00c4 CF5F      		subi r28,lo8(-(1))
 324 00c6 C034      		cpi r28,lo8(64)
 325 00c8 01F4      		brne .L12
 326               	/* epilogue start */
 327               	.LBE24:
 286:stlcd.c       **** 
 287:stlcd.c       ****   }
 288:stlcd.c       **** }
 329               	.LM20:
 330 00ca DF91      		pop r29
 331 00cc CF91      		pop r28
 332 00ce 1F91      		pop r17
 333 00d0 0F91      		pop r16
 334 00d2 EF90      		pop r14
 335 00d4 DF90      		pop r13
 336 00d6 CF90      		pop r12
 337 00d8 0895      		ret
 342               	.Lscope4:
 344               		.stabd	78,0,0
 347               	.global	spiwrite
 349               	spiwrite:
 350               		.stabd	46,0,0
 289:stlcd.c       **** 
 290:stlcd.c       **** void clear_screen(void) {
 291:stlcd.c       ****   uint8_t p, c;
 292:stlcd.c       **** 
 293:stlcd.c       ****   for (p = 0; p < 8; p++) {
 294:stlcd.c       ****     /*
 295:stlcd.c       ****       putstring("new page! ");
 296:stlcd.c       ****       uart_putw_dec(p);
 297:stlcd.c       ****       putstring_nl("");
 298:stlcd.c       ****     */
 299:stlcd.c       **** 
 300:stlcd.c       ****     st7565_command(CMD_SET_PAGE | p);
 301:stlcd.c       ****     for (c = 0; c < 129; c++) {
 302:stlcd.c       ****       //uart_putw_dec(c);
 303:stlcd.c       ****       //uart_putchar(' ');
 304:stlcd.c       ****       st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
 305:stlcd.c       ****       st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 306:stlcd.c       ****       st7565_data(0x00);
 307:stlcd.c       ****     }
 308:stlcd.c       ****   }
 309:stlcd.c       **** }
 310:stlcd.c       **** 
 311:stlcd.c       **** 
 312:stlcd.c       **** void st7565_init(void) {
 313:stlcd.c       ****   // set pin directions
 314:stlcd.c       ****   SID_DDR |= _BV(SID);
 315:stlcd.c       ****   SCLK_DDR |= _BV(SCLK);
 316:stlcd.c       ****   A0_DDR |= _BV(A0);
 317:stlcd.c       ****   RST_DDR |= _BV(RST);
 318:stlcd.c       ****   CS_DDR |= _BV(CS);
 319:stlcd.c       **** 
 320:stlcd.c       ****   // toggle RST low to reset; CS low so it'll listen to us
 321:stlcd.c       ****   CS_PORT &= ~_BV(CS);
 322:stlcd.c       ****   RST_PORT &= ~_BV(RST);
 323:stlcd.c       ****   _delay_ms(500);
 324:stlcd.c       ****   RST_PORT |= _BV(RST);
 325:stlcd.c       **** 
 326:stlcd.c       ****   // LCD bias select
 327:stlcd.c       ****   st7565_command(CMD_SET_BIAS_7);
 328:stlcd.c       ****   // ADC select
 329:stlcd.c       ****   st7565_command(CMD_SET_ADC_NORMAL);
 330:stlcd.c       ****   // SHL select
 331:stlcd.c       ****   st7565_command(CMD_SET_COM_NORMAL);
 332:stlcd.c       ****   // Initial display line
 333:stlcd.c       ****   st7565_command(CMD_SET_DISP_START_LINE);
 334:stlcd.c       **** 
 335:stlcd.c       ****   // turn on voltage converter (VC=1, VR=0, VF=0)
 336:stlcd.c       ****   st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 337:stlcd.c       ****   // wait for 50% rising
 338:stlcd.c       ****   _delay_ms(50);
 339:stlcd.c       **** 
 340:stlcd.c       ****   // turn on voltage regulator (VC=1, VR=1, VF=0)
 341:stlcd.c       ****   st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 342:stlcd.c       ****   // wait >=50ms
 343:stlcd.c       ****   _delay_ms(50);
 344:stlcd.c       **** 
 345:stlcd.c       ****   // turn on voltage follower (VC=1, VR=1, VF=1)
 346:stlcd.c       ****   st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 347:stlcd.c       ****   // wait
 348:stlcd.c       ****   _delay_ms(10);
 349:stlcd.c       **** 
 350:stlcd.c       ****   // set lcd operating voltage (regulator resistor, ref voltage resistor)
 351:stlcd.c       ****   st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 352:stlcd.c       **** 
 353:stlcd.c       ****   // initial display line
 354:stlcd.c       ****   // set page address
 355:stlcd.c       ****   // set column address
 356:stlcd.c       ****   // write display data
 357:stlcd.c       **** }
 358:stlcd.c       **** 
 359:stlcd.c       **** inline void spiwrite(uint8_t c) {
 352               	.LM21:
 353               	.LFBB5:
 354               	/* prologue: function */
 355               	/* frame size = 0 */
 356               	/* stack size = 0 */
 357               	.L__stack_usage = 0
 359               	.LM22:
 360 00da 27E0      		ldi r18,lo8(7)
 361 00dc 30E0      		ldi r19,0
 360:stlcd.c       ****   int8_t i;
 361:stlcd.c       ****   for (i = 7; i >= 0; i--) {
 362:stlcd.c       ****     SCLK_PORT &= ~_BV(SCLK);
 363:stlcd.c       ****     if (c & _BV(i))
 363               	.LM23:
 364 00de 90E0      		ldi r25,0
 365               	.L17:
 362:stlcd.c       ****     if (c & _BV(i))
 367               	.LM24:
 368 00e0 2898      		cbi 0x5,0
 370               	.LM25:
 371 00e2 AC01      		movw r20,r24
 372 00e4 022E      		mov r0,r18
 373 00e6 00C0      		rjmp 2f
 374               		1:
 375 00e8 5595      		asr r21
 376 00ea 4795      		ror r20
 377               		2:
 378 00ec 0A94      		dec r0
 379 00ee 02F4      		brpl 1b
 380 00f0 40FF      		sbrs r20,0
 381 00f2 00C0      		rjmp .L15
 364:stlcd.c       ****       SID_PORT |= _BV(SID);
 383               	.LM26:
 384 00f4 299A      		sbi 0x5,1
 385 00f6 00C0      		rjmp .L16
 386               	.L15:
 365:stlcd.c       ****     else
 366:stlcd.c       ****       SID_PORT &= ~_BV(SID);
 388               	.LM27:
 389 00f8 2998      		cbi 0x5,1
 390               	.L16:
 367:stlcd.c       ****     SCLK_PORT |= _BV(SCLK);
 392               	.LM28:
 393 00fa 289A      		sbi 0x5,0
 394 00fc 2150      		subi r18,1
 395 00fe 3109      		sbc r19,__zero_reg__
 396 0100 00F4      		brcc .L17
 397               	/* epilogue start */
 368:stlcd.c       ****   }
 369:stlcd.c       **** 
 370:stlcd.c       ****   /*
 371:stlcd.c       ****   // loop unwrapped! too fast doesnt work :(
 372:stlcd.c       **** 
 373:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 374:stlcd.c       ****   if (c & _BV(7))
 375:stlcd.c       ****     SID_PORT |= _BV(SID);
 376:stlcd.c       ****   else
 377:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 378:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 379:stlcd.c       **** 
 380:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 381:stlcd.c       ****   if (c & _BV(6))
 382:stlcd.c       ****     SID_PORT |= _BV(SID);
 383:stlcd.c       ****   else
 384:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 385:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 386:stlcd.c       **** 
 387:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 388:stlcd.c       ****   if (c & _BV(5))
 389:stlcd.c       ****     SID_PORT |= _BV(SID);
 390:stlcd.c       ****   else
 391:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 392:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 393:stlcd.c       **** 
 394:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 395:stlcd.c       ****   if (c & _BV(4))
 396:stlcd.c       ****     SID_PORT |= _BV(SID);
 397:stlcd.c       ****   else
 398:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 399:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 400:stlcd.c       **** 
 401:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 402:stlcd.c       ****   if (c & _BV(3))
 403:stlcd.c       ****     SID_PORT |= _BV(SID);
 404:stlcd.c       ****   else
 405:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 406:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 407:stlcd.c       **** 
 408:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 409:stlcd.c       ****   if (c & _BV(2))
 410:stlcd.c       ****     SID_PORT |= _BV(SID);
 411:stlcd.c       ****   else
 412:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 413:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 414:stlcd.c       **** 
 415:stlcd.c       **** 
 416:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 417:stlcd.c       ****   if (c & _BV(1))
 418:stlcd.c       ****     SID_PORT |= _BV(SID);
 419:stlcd.c       ****   else
 420:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 421:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 422:stlcd.c       **** 
 423:stlcd.c       ****   SCLK_PORT &= ~_BV(SCLK);
 424:stlcd.c       ****   if (c & _BV(0))
 425:stlcd.c       ****     SID_PORT |= _BV(SID);
 426:stlcd.c       ****   else
 427:stlcd.c       ****     SID_PORT &= ~_BV(SID);
 428:stlcd.c       ****   SCLK_PORT |= _BV(SCLK);
 429:stlcd.c       ****   */
 430:stlcd.c       **** 
 431:stlcd.c       **** }
 399               	.LM29:
 400 0102 0895      		ret
 402               	.Lscope5:
 404               		.stabd	78,0,0
 407               	.global	st7565_command
 409               	st7565_command:
 410               		.stabd	46,0,0
 432:stlcd.c       **** void st7565_command(uint8_t c) {
 412               	.LM30:
 413               	.LFBB6:
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 0 */
 417               	.L__stack_usage = 0
 433:stlcd.c       ****   A0_PORT &= ~_BV(A0);
 419               	.LM31:
 420 0104 5F98      		cbi 0xb,7
 434:stlcd.c       **** 
 435:stlcd.c       ****   spiwrite(c);
 422               	.LM32:
 423 0106 0C94 0000 		jmp spiwrite
 425               	.Lscope6:
 427               		.stabd	78,0,0
 429               	.global	st7565_init
 431               	st7565_init:
 432               		.stabd	46,0,0
 312:stlcd.c       ****   // set pin directions
 434               	.LM33:
 435               	.LFBB7:
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 314:stlcd.c       ****   SCLK_DDR |= _BV(SCLK);
 441               	.LM34:
 442 010a 219A      		sbi 0x4,1
 315:stlcd.c       ****   A0_DDR |= _BV(A0);
 444               	.LM35:
 445 010c 209A      		sbi 0x4,0
 316:stlcd.c       ****   RST_DDR |= _BV(RST);
 447               	.LM36:
 448 010e 579A      		sbi 0xa,7
 317:stlcd.c       ****   CS_DDR |= _BV(CS);
 450               	.LM37:
 451 0110 569A      		sbi 0xa,6
 318:stlcd.c       **** 
 453               	.LM38:
 454 0112 559A      		sbi 0xa,5
 321:stlcd.c       ****   RST_PORT &= ~_BV(RST);
 456               	.LM39:
 457 0114 5D98      		cbi 0xb,5
 322:stlcd.c       ****   _delay_ms(500);
 459               	.LM40:
 460 0116 5E98      		cbi 0xb,6
 461               	.LBB25:
 462               	.LBB26:
 464               	.Ltext1:
   1:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  41:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  42:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  46:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \file */
  47:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \code
  49:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \endcode
  53:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  54:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     used.
  58:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  59:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  68:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  77:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  81:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** */
  82:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  87:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  88:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  93:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  94:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  97:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  98:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 103:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 104:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /**
 105:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 107:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 109:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 112:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 114:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 120:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 125:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 132:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 140:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 141:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** void
 142:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** {
 144:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 155:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 158:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#else
 159:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#endif
 162:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 163:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 466               	.LM41:
 467 0118 2FEF      		ldi r18,lo8(1599999)
 468 011a 89E6      		ldi r24,hi8(1599999)
 469 011c 98E1      		ldi r25,hlo8(1599999)
 470 011e 2150      		1: subi r18,1
 471 0120 8040      		sbci r24,0
 472 0122 9040      		sbci r25,0
 473 0124 01F4      		brne 1b
 474 0126 00C0      		rjmp .
 475 0128 0000      		nop
 476               	.LBE26:
 477               	.LBE25:
 479               	.Ltext2:
 324:stlcd.c       **** 
 481               	.LM42:
 482 012a 5E9A      		sbi 0xb,6
 327:stlcd.c       ****   // ADC select
 484               	.LM43:
 485 012c 83EA      		ldi r24,lo8(-93)
 486 012e 0E94 0000 		call st7565_command
 329:stlcd.c       ****   // SHL select
 488               	.LM44:
 489 0132 80EA      		ldi r24,lo8(-96)
 490 0134 0E94 0000 		call st7565_command
 331:stlcd.c       ****   // Initial display line
 492               	.LM45:
 493 0138 80EC      		ldi r24,lo8(-64)
 494 013a 0E94 0000 		call st7565_command
 333:stlcd.c       **** 
 496               	.LM46:
 497 013e 80E4      		ldi r24,lo8(64)
 498 0140 0E94 0000 		call st7565_command
 336:stlcd.c       ****   // wait for 50% rising
 500               	.LM47:
 501 0144 8CE2      		ldi r24,lo8(44)
 502 0146 0E94 0000 		call st7565_command
 503               	.LBB27:
 504               	.LBB28:
 506               	.Ltext3:
 508               	.LM48:
 509 014a 2FEF      		ldi r18,lo8(159999)
 510 014c 80E7      		ldi r24,hi8(159999)
 511 014e 92E0      		ldi r25,hlo8(159999)
 512 0150 2150      		1: subi r18,1
 513 0152 8040      		sbci r24,0
 514 0154 9040      		sbci r25,0
 515 0156 01F4      		brne 1b
 516 0158 00C0      		rjmp .
 517 015a 0000      		nop
 518               	.LBE28:
 519               	.LBE27:
 521               	.Ltext4:
 341:stlcd.c       ****   // wait >=50ms
 523               	.LM49:
 524 015c 8EE2      		ldi r24,lo8(46)
 525 015e 0E94 0000 		call st7565_command
 526               	.LBB29:
 527               	.LBB30:
 529               	.Ltext5:
 531               	.LM50:
 532 0162 2FEF      		ldi r18,lo8(159999)
 533 0164 80E7      		ldi r24,hi8(159999)
 534 0166 92E0      		ldi r25,hlo8(159999)
 535 0168 2150      		1: subi r18,1
 536 016a 8040      		sbci r24,0
 537 016c 9040      		sbci r25,0
 538 016e 01F4      		brne 1b
 539 0170 00C0      		rjmp .
 540 0172 0000      		nop
 541               	.LBE30:
 542               	.LBE29:
 544               	.Ltext6:
 346:stlcd.c       ****   // wait
 546               	.LM51:
 547 0174 8FE2      		ldi r24,lo8(47)
 548 0176 0E94 0000 		call st7565_command
 549               	.LBB31:
 550               	.LBB32:
 552               	.Ltext7:
 554               	.LM52:
 555 017a 8FE3      		ldi r24,lo8(-25537)
 556 017c 9CE9      		ldi r25,hi8(-25537)
 557 017e 0197      		1: sbiw r24,1
 558 0180 01F4      		brne 1b
 559 0182 00C0      		rjmp .
 560 0184 0000      		nop
 561               	.LBE32:
 562               	.LBE31:
 564               	.Ltext8:
 351:stlcd.c       **** 
 566               	.LM53:
 567 0186 86E2      		ldi r24,lo8(38)
 568 0188 0C94 0000 		jmp st7565_command
 570               	.Lscope7:
 572               		.stabd	78,0,0
 575               	.global	st7565_data
 577               	st7565_data:
 578               		.stabd	46,0,0
 436:stlcd.c       **** }
 437:stlcd.c       **** 
 438:stlcd.c       **** void st7565_data(uint8_t c) {
 580               	.LM54:
 581               	.LFBB8:
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 439:stlcd.c       ****   A0_PORT |= _BV(A0);
 587               	.LM55:
 588 018c 5F9A      		sbi 0xb,7
 440:stlcd.c       **** 
 441:stlcd.c       ****   spiwrite(c);
 590               	.LM56:
 591 018e 0C94 0000 		jmp spiwrite
 593               	.Lscope8:
 595               		.stabd	78,0,0
 597               	.global	clear_screen
 599               	clear_screen:
 600               		.stabd	46,0,0
 290:stlcd.c       ****   uint8_t p, c;
 602               	.LM57:
 603               	.LFBB9:
 604 0192 CF93      		push r28
 605 0194 DF93      		push r29
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 2 */
 609               	.L__stack_usage = 2
 293:stlcd.c       ****     /*
 611               	.LM58:
 612 0196 D0E0      		ldi r29,0
 613               	.L24:
 300:stlcd.c       ****     for (c = 0; c < 129; c++) {
 615               	.LM59:
 616 0198 8D2F      		mov r24,r29
 617 019a 806B      		ori r24,lo8(-80)
 618 019c 0E94 0000 		call st7565_command
 301:stlcd.c       ****       //uart_putw_dec(c);
 620               	.LM60:
 621 01a0 C0E0      		ldi r28,0
 622               	.L23:
 304:stlcd.c       ****       st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 624               	.LM61:
 625 01a2 8C2F      		mov r24,r28
 626 01a4 8F70      		andi r24,lo8(15)
 627 01a6 0E94 0000 		call st7565_command
 305:stlcd.c       ****       st7565_data(0x00);
 629               	.LM62:
 630 01aa 8C2F      		mov r24,r28
 631 01ac 8295      		swap r24
 632 01ae 8F70      		andi r24,lo8(15)
 633 01b0 8061      		ori r24,lo8(16)
 634 01b2 0E94 0000 		call st7565_command
 306:stlcd.c       ****     }
 636               	.LM63:
 637 01b6 80E0      		ldi r24,0
 638 01b8 0E94 0000 		call st7565_data
 301:stlcd.c       ****       //uart_putw_dec(c);
 640               	.LM64:
 641 01bc CF5F      		subi r28,lo8(-(1))
 642 01be C138      		cpi r28,lo8(-127)
 643 01c0 01F4      		brne .L23
 293:stlcd.c       ****     /*
 645               	.LM65:
 646 01c2 DF5F      		subi r29,lo8(-(1))
 647 01c4 D830      		cpi r29,lo8(8)
 648 01c6 01F4      		brne .L24
 649               	/* epilogue start */
 309:stlcd.c       **** 
 651               	.LM66:
 652 01c8 DF91      		pop r29
 653 01ca CF91      		pop r28
 654 01cc 0895      		ret
 660               	.Lscope9:
 662               		.stabd	78,0,0
 665               	.global	st7565_set_brightness
 667               	st7565_set_brightness:
 668               		.stabd	46,0,0
 442:stlcd.c       **** }
 443:stlcd.c       **** void st7565_set_brightness(uint8_t val) {
 670               	.LM67:
 671               	.LFBB10:
 672 01ce CF93      		push r28
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 1 */
 676               	.L__stack_usage = 1
 677 01d0 C82F      		mov r28,r24
 444:stlcd.c       ****   st7565_command(CMD_SET_VOLUME_FIRST);
 679               	.LM68:
 680 01d2 81E8      		ldi r24,lo8(-127)
 681 01d4 0E94 0000 		call st7565_command
 445:stlcd.c       ****   st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 683               	.LM69:
 684 01d8 8C2F      		mov r24,r28
 685 01da 8F73      		andi r24,lo8(63)
 686               	/* epilogue start */
 446:stlcd.c       **** }
 688               	.LM70:
 689 01dc CF91      		pop r28
 445:stlcd.c       ****   st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 691               	.LM71:
 692 01de 0C94 0000 		jmp st7565_command
 694               	.Lscope10:
 696               		.stabd	78,0,0
 698               	.global	setup
 700               	setup:
 701               		.stabd	46,0,0
 146:stlcd.c       **** 
 703               	.LM72:
 704               	.LFBB11:
 705               	/* prologue: function */
 706               	/* frame size = 0 */
 707               	/* stack size = 0 */
 708               	.L__stack_usage = 0
 152:stlcd.c       ****   BLA_PORT |= _BV(BLA);
 710               	.LM73:
 711 01e2 229A      		sbi 0x4,2
 153:stlcd.c       **** 
 713               	.LM74:
 714 01e4 2A9A      		sbi 0x5,2
 155:stlcd.c       ****   // Serial.println("init");
 716               	.LM75:
 717 01e6 259A      		sbi 0x4,5
 159:stlcd.c       **** 
 719               	.LM76:
 720 01e8 0E94 0000 		call st7565_init
 171:stlcd.c       ****   //Serial.println("normal");
 722               	.LM77:
 723 01ec 8FEA      		ldi r24,lo8(-81)
 724 01ee 0E94 0000 		call st7565_command
 174:stlcd.c       ****   //Serial.println("bright");
 726               	.LM78:
 727 01f2 84EA      		ldi r24,lo8(-92)
 728 01f4 0E94 0000 		call st7565_command
 177:stlcd.c       ****   //Serial.println("clear");
 730               	.LM79:
 731 01f8 80E2      		ldi r24,lo8(32)
 732 01fa 0E94 0000 		call st7565_set_brightness
 180:stlcd.c       ****   //Serial.println("blit");
 734               	.LM80:
 735 01fe 0E94 0000 		call clear_screen
 189:stlcd.c       **** 
 737               	.LM81:
 738 0202 2D9A      		sbi 0x5,5
 739 0204 0895      		ret
 741               	.Lscope11:
 743               		.stabd	78,0,0
 744               		.section	.rodata.str1.1,"aMS",@progbits,1
 745               	.LC0:
 746 0000 7772 6974 		.string	"write_buffer "
 746      655F 6275 
 746      6666 6572 
 746      2000 
 747               	.LC1:
 748 000e 7061 6765 		.string	"page: %i\n"
 748      3A20 2569 
 748      0A00 
 749               		.text
 751               	.global	write_buffer
 753               	write_buffer:
 754               		.stabd	46,0,0
 447:stlcd.c       **** 
 448:stlcd.c       **** 
 449:stlcd.c       **** void write_buffer(uint8_t *buffer) {
 756               	.LM82:
 757               	.LFBB12:
 758 0206 8F92      		push r8
 759 0208 9F92      		push r9
 760 020a AF92      		push r10
 761 020c BF92      		push r11
 762 020e CF92      		push r12
 763 0210 DF92      		push r13
 764 0212 EF92      		push r14
 765 0214 FF92      		push r15
 766 0216 0F93      		push r16
 767 0218 1F93      		push r17
 768 021a CF93      		push r28
 769 021c DF93      		push r29
 770               	/* prologue: function */
 771               	/* frame size = 0 */
 772               	/* stack size = 12 */
 773               	.L__stack_usage = 12
 774 021e 7C01      		movw r14,r24
 450:stlcd.c       ****   uint8_t c, p;
 451:stlcd.c       ****   printf("write_buffer \n");
 776               	.LM83:
 777 0220 80E0      		ldi r24,lo8(.LC0)
 778 0222 90E0      		ldi r25,hi8(.LC0)
 779 0224 0E94 0000 		call puts
 780 0228 00E0      		ldi r16,lo8(pagemap)
 781 022a 10E0      		ldi r17,hi8(pagemap)
 782 022c E701      		movw r28,r14
 783 022e 5701      		movw r10,r14
 784 0230 8CEF      		ldi r24,-4
 785 0232 B81A      		sub r11,r24
 452:stlcd.c       ****   for (p = 0; p < 8; p++) {
 453:stlcd.c       ****     /*
 454:stlcd.c       ****       putstring("new page! ");
 455:stlcd.c       ****       uart_putw_dec(p);
 456:stlcd.c       ****       putstring_nl("");
 457:stlcd.c       ****     */
 458:stlcd.c       ****     st7565_command(CMD_SET_PAGE | pagemap[p]);
 459:stlcd.c       ****     printf("page: %i\n", pagemap[p]);
 787               	.LM84:
 788 0234 80E0      		ldi r24,lo8(.LC1)
 789 0236 C82E      		mov r12,r24
 790 0238 80E0      		ldi r24,hi8(.LC1)
 791 023a D82E      		mov r13,r24
 792               	.L31:
 458:stlcd.c       ****     printf("page: %i\n", pagemap[p]);
 794               	.LM85:
 795 023c F801      		movw r30,r16
 796 023e 8081      		ld r24,Z
 797 0240 806B      		ori r24,lo8(-80)
 798 0242 0E94 0000 		call st7565_command
 800               	.LM86:
 801 0246 F801      		movw r30,r16
 802 0248 8181      		ldd r24,Z+1
 803 024a 0E5F      		subi r16,-2
 804 024c 1F4F      		sbci r17,-1
 805 024e 8F93      		push r24
 806 0250 8081      		ld r24,Z
 807 0252 8F93      		push r24
 808 0254 DF92      		push r13
 809 0256 CF92      		push r12
 810 0258 0E94 0000 		call printf
 460:stlcd.c       ****     st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 812               	.LM87:
 813 025c 80E0      		ldi r24,0
 814 025e 0E94 0000 		call st7565_command
 461:stlcd.c       ****     st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 816               	.LM88:
 817 0262 80E1      		ldi r24,lo8(16)
 818 0264 0E94 0000 		call st7565_command
 462:stlcd.c       ****     st7565_command(CMD_RMW);
 820               	.LM89:
 821 0268 80EE      		ldi r24,lo8(-32)
 822 026a 0E94 0000 		call st7565_command
 463:stlcd.c       ****     st7565_data(0xff);
 824               	.LM90:
 825 026e 8FEF      		ldi r24,lo8(-1)
 826 0270 0E94 0000 		call st7565_data
 827 0274 0F90      		pop __tmp_reg__
 828 0276 0F90      		pop __tmp_reg__
 829 0278 0F90      		pop __tmp_reg__
 830 027a 0F90      		pop __tmp_reg__
 831 027c 4E01      		movw r8,r28
 464:stlcd.c       **** 
 465:stlcd.c       ****     //st7565_data(0x80);
 466:stlcd.c       ****     //continue;
 467:stlcd.c       **** 
 468:stlcd.c       ****     for (c = 0; c < 128; c++) {
 833               	.LM91:
 834 027e F12C      		mov r15,__zero_reg__
 835               	.L30:
 469:stlcd.c       ****       //uart_putw_dec(c);
 470:stlcd.c       ****       //uart_putchar(' ');
 471:stlcd.c       ****       st7565_data(buffer[(128 * p) + c]);
 837               	.LM92:
 838 0280 F401      		movw r30,r8
 839 0282 8191      		ld r24,Z+
 840 0284 4F01      		movw r8,r30
 841 0286 0E94 0000 		call st7565_data
 468:stlcd.c       ****       //uart_putw_dec(c);
 843               	.LM93:
 844 028a F394      		inc r15
 845 028c F0E8      		ldi r31,lo8(-128)
 846 028e FF12      		cpse r15,r31
 847 0290 00C0      		rjmp .L30
 848 0292 C058      		subi r28,-128
 849 0294 DF4F      		sbci r29,-1
 452:stlcd.c       ****     /*
 851               	.LM94:
 852 0296 CA15      		cp r28,r10
 853 0298 DB05      		cpc r29,r11
 854 029a 01F4      		brne .L31
 855               	/* epilogue start */
 472:stlcd.c       ****     }
 473:stlcd.c       ****   }
 474:stlcd.c       **** }
 857               	.LM95:
 858 029c DF91      		pop r29
 859 029e CF91      		pop r28
 860 02a0 1F91      		pop r17
 861 02a2 0F91      		pop r16
 862 02a4 FF90      		pop r15
 863 02a6 EF90      		pop r14
 864 02a8 DF90      		pop r13
 865 02aa CF90      		pop r12
 866 02ac BF90      		pop r11
 867 02ae AF90      		pop r10
 868 02b0 9F90      		pop r9
 869 02b2 8F90      		pop r8
 870 02b4 0895      		ret
 875               	.Lscope12:
 877               		.stabd	78,0,0
 883               	.global	testdrawbitmap
 885               	testdrawbitmap:
 886               		.stabd	46,0,0
 210:stlcd.c       ****   uint8_t icons[NUMFLAKES][3];
 888               	.LM96:
 889               	.LFBB13:
 890 02b6 CF93      		push r28
 891 02b8 DF93      		push r29
 892 02ba CDB7      		in r28,__SP_L__
 893 02bc DEB7      		in r29,__SP_H__
 894 02be 6F97      		sbiw r28,31
 895 02c0 0FB6      		in __tmp_reg__,__SREG__
 896 02c2 F894      		cli
 897 02c4 DEBF      		out __SP_H__,r29
 898 02c6 0FBE      		out __SREG__,__tmp_reg__
 899 02c8 CDBF      		out __SP_L__,r28
 900               	/* prologue: function */
 901               	/* frame size = 31 */
 902               	/* stack size = 33 */
 903               	.L__stack_usage = 33
 904 02ca 4F8F      		std Y+31,r20
 905 02cc F22E      		mov r15,r18
 212:stlcd.c       **** 
 907               	.LM97:
 908 02ce FC01      		movw r30,r24
 909 02d0 E656      		subi r30,102
 910 02d2 FD4F      		sbci r31,-3
 911 02d4 6081      		ld r22,Z
 912 02d6 70E0      		ldi r23,0
 913 02d8 80E0      		ldi r24,0
 914 02da 90E0      		ldi r25,0
 915 02dc 0E94 0000 		call srandom
 916 02e0 6E01      		movw r12,r28
 917 02e2 21E2      		ldi r18,33
 918 02e4 C20E      		add r12,r18
 919 02e6 D11C      		adc r13,__zero_reg__
 920 02e8 8E01      		movw r16,r28
 921 02ea 0D5F      		subi r16,-3
 922 02ec 1F4F      		sbci r17,-1
 923               	.LBB33:
 216:stlcd.c       ****     icons[f][YPOS] = 0;
 925               	.LM98:
 926 02ee 80E8      		ldi r24,lo8(-128)
 927 02f0 882E      		mov r8,r24
 928 02f2 912C      		mov r9,__zero_reg__
 929 02f4 A12C      		mov r10,__zero_reg__
 930 02f6 B12C      		mov r11,__zero_reg__
 218:stlcd.c       ****   }
 932               	.LM99:
 933 02f8 95E0      		ldi r25,lo8(5)
 934 02fa 492E      		mov r4,r25
 935 02fc 512C      		mov r5,__zero_reg__
 936 02fe 612C      		mov r6,__zero_reg__
 937 0300 712C      		mov r7,__zero_reg__
 938               	.L35:
 216:stlcd.c       ****     icons[f][YPOS] = 0;
 940               	.LM100:
 941 0302 0E94 0000 		call random
 942 0306 1801      		movw r2,r16
 943 0308 E2E0      		ldi r30,2
 944 030a 2E1A      		sub r2,r30
 945 030c 3108      		sbc r3,__zero_reg__
 946 030e A501      		movw r20,r10
 947 0310 9401      		movw r18,r8
 948 0312 0E94 0000 		call __divmodsi4
 949 0316 F101      		movw r30,r2
 950 0318 6083      		st Z,r22
 951 031a 3196      		adiw r30,1
 217:stlcd.c       ****     icons[f][DELTAY] = random() % 5 + 1;
 953               	.LM101:
 954 031c 1082      		st Z,__zero_reg__
 218:stlcd.c       ****   }
 956               	.LM102:
 957 031e 0E94 0000 		call random
 958 0322 A301      		movw r20,r6
 959 0324 9201      		movw r18,r4
 960 0326 0E94 0000 		call __divmodsi4
 961 032a 6F5F      		subi r22,lo8(-(1))
 962 032c F801      		movw r30,r16
 963 032e 6083      		st Z,r22
 964 0330 0D5F      		subi r16,-3
 965 0332 1F4F      		sbci r17,-1
 215:stlcd.c       ****     icons[f][XPOS] = random() % 128;
 967               	.LM103:
 968 0334 0C15      		cp r16,r12
 969 0336 1D05      		cpc r17,r13
 970 0338 01F4      		brne .L35
 971 033a 1E01      		movw r2,r28
 972 033c FFE1      		ldi r31,31
 973 033e 2F0E      		add r2,r31
 974 0340 311C      		adc r3,__zero_reg__
 975 0342 80E0      		ldi r24,lo8(logo16_glcd_bmp)
 976 0344 90E0      		ldi r25,hi8(logo16_glcd_bmp)
 977 0346 182F      		mov r17,r24
 978               	.L43:
 979 0348 FE01      		movw r30,r28
 980 034a 3196      		adiw r30,1
 981 034c 3F01      		movw r6,r30
 982               	.LBE33:
 212:stlcd.c       **** 
 984               	.LM104:
 985 034e 5F01      		movw r10,r30
 986               	.L36:
 987               	.LBB34:
 224:stlcd.c       ****     }
 989               	.LM105:
 990 0350 CC24      		clr r12
 991 0352 C394      		inc r12
 992 0354 EF2C      		mov r14,r15
 993 0356 0F8D      		ldd r16,Y+31
 994 0358 E0E0      		ldi r30,lo8(logo16_glcd_bmp)
 995 035a F0E0      		ldi r31,hi8(logo16_glcd_bmp)
 996 035c 2E2F      		mov r18,r30
 997 035e F501      		movw r30,r10
 998 0360 4181      		ldd r20,Z+1
 999 0362 6081      		ld r22,Z
 1000 0364 80E0      		ldi r24,lo8(buffer)
 1001 0366 90E0      		ldi r25,hi8(buffer)
 1002 0368 0E94 0000 		call drawbitmap
 1003 036c F3E0      		ldi r31,3
 1004 036e AF0E      		add r10,r31
 1005 0370 B11C      		adc r11,__zero_reg__
 223:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, 1);
 1007               	.LM106:
 1008 0372 A214      		cp r10,r2
 1009 0374 B304      		cpc r11,r3
 1010 0376 01F4      		brne .L36
 1011               	.LBE34:
 226:stlcd.c       ****     _delay_ms(200);
 1013               	.LM107:
 1014 0378 80E0      		ldi r24,lo8(buffer)
 1015 037a 90E0      		ldi r25,hi8(buffer)
 1016 037c 0E94 0000 		call write_buffer
 1017               	.LBB35:
 1018               	.LBB36:
 1020               	.Ltext9:
 1022               	.LM108:
 1023 0380 2FEF      		ldi r18,lo8(639999)
 1024 0382 83EC      		ldi r24,hi8(639999)
 1025 0384 99E0      		ldi r25,hlo8(639999)
 1026 0386 2150      		1: subi r18,1
 1027 0388 8040      		sbci r24,0
 1028 038a 9040      		sbci r25,0
 1029 038c 01F4      		brne 1b
 1030 038e 00C0      		rjmp .
 1031 0390 0000      		nop
 1032 0392 FE01      		movw r30,r28
 1033 0394 3296      		adiw r30,2
 1034 0396 5F01      		movw r10,r30
 1035 0398 CE01      		movw r24,r28
 1036 039a 0396      		adiw r24,3
 1037 039c 2C01      		movw r4,r24
 1038               	.L38:
 1039               	.LBE36:
 1040               	.LBE35:
 1041               	.LBB37:
 1043               	.Ltext10:
 231:stlcd.c       ****       // move it
 1045               	.LM109:
 1046 039e C12C      		mov r12,__zero_reg__
 1047 03a0 EF2C      		mov r14,r15
 1048 03a2 0F8D      		ldd r16,Y+31
 1049 03a4 212F      		mov r18,r17
 1050 03a6 F501      		movw r30,r10
 1051 03a8 4081      		ld r20,Z
 1052 03aa F301      		movw r30,r6
 1053 03ac 6081      		ld r22,Z
 1054 03ae 80E0      		ldi r24,lo8(buffer)
 1055 03b0 90E0      		ldi r25,hi8(buffer)
 1056 03b2 0E94 0000 		call drawbitmap
 233:stlcd.c       ****       // if its gone, reinit
 1058               	.LM110:
 1059 03b6 F201      		movw r30,r4
 1060 03b8 9081      		ld r25,Z
 1061 03ba F501      		movw r30,r10
 1062 03bc 8081      		ld r24,Z
 1063 03be 890F      		add r24,r25
 1064 03c0 8083      		st Z,r24
 235:stlcd.c       ****         icons[f][XPOS] = random() % 128;
 1066               	.LM111:
 1067 03c2 8134      		cpi r24,lo8(65)
 1068 03c4 00F0      		brlo .L37
 236:stlcd.c       ****         icons[f][YPOS] = 0;
 1070               	.LM112:
 1071 03c6 0E94 0000 		call random
 1072 03ca 20E8      		ldi r18,lo8(-128)
 1073 03cc 30E0      		ldi r19,0
 1074 03ce 40E0      		ldi r20,0
 1075 03d0 50E0      		ldi r21,0
 1076 03d2 0E94 0000 		call __divmodsi4
 1077 03d6 F301      		movw r30,r6
 1078 03d8 6083      		st Z,r22
 237:stlcd.c       ****         icons[f][DELTAY] = random() % 5 + 1;
 1080               	.LM113:
 1081 03da F501      		movw r30,r10
 1082 03dc 1082      		st Z,__zero_reg__
 238:stlcd.c       ****       }
 1084               	.LM114:
 1085 03de 0E94 0000 		call random
 1086 03e2 25E0      		ldi r18,lo8(5)
 1087 03e4 30E0      		ldi r19,0
 1088 03e6 40E0      		ldi r20,0
 1089 03e8 50E0      		ldi r21,0
 1090 03ea 0E94 0000 		call __divmodsi4
 1091 03ee 6F5F      		subi r22,lo8(-(1))
 1092 03f0 F201      		movw r30,r4
 1093 03f2 6083      		st Z,r22
 1094               	.L37:
 1095 03f4 F3E0      		ldi r31,3
 1096 03f6 AF0E      		add r10,r31
 1097 03f8 B11C      		adc r11,__zero_reg__
 1098 03fa 23E0      		ldi r18,3
 1099 03fc 620E      		add r6,r18
 1100 03fe 711C      		adc r7,__zero_reg__
 1101 0400 83E0      		ldi r24,3
 1102 0402 480E      		add r4,r24
 1103 0404 511C      		adc r5,__zero_reg__
 230:stlcd.c       ****       drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, 0);
 1105               	.LM115:
 1106 0406 6214      		cp r6,r2
 1107 0408 7304      		cpc r7,r3
 1108 040a 01F4      		brne .L38
 1109 040c 00C0      		rjmp .L43
 1110               	.LBE37:
 1115               	.Lscope13:
 1117               		.stabd	78,0,0
 1120               	.global	testdrawline
 1122               	testdrawline:
 1123               		.stabd	46,0,0
 256:stlcd.c       ****   for (uint8_t i = 0; i < 128; i += 4) {
 1125               	.LM116:
 1126               	.LFBB14:
 1127 040e EF92      		push r14
 1128 0410 0F93      		push r16
 1129 0412 CF93      		push r28
 1130               	/* prologue: function */
 1131               	/* frame size = 0 */
 1132               	/* stack size = 3 */
 1133               	.L__stack_usage = 3
 1134               	.LBB38:
 257:stlcd.c       ****     drawline(buffer, 0, 0, i, 63, 1);
 1136               	.LM117:
 1137 0414 C0E0      		ldi r28,0
 1138               	.L45:
 258:stlcd.c       ****   }
 1140               	.LM118:
 1141 0416 EE24      		clr r14
 1142 0418 E394      		inc r14
 1143 041a 0FE3      		ldi r16,lo8(63)
 1144 041c 2C2F      		mov r18,r28
 1145 041e 40E0      		ldi r20,0
 1146 0420 60E0      		ldi r22,0
 1147 0422 80E0      		ldi r24,lo8(buffer)
 1148 0424 90E0      		ldi r25,hi8(buffer)
 1149 0426 0E94 0000 		call drawline
 257:stlcd.c       ****     drawline(buffer, 0, 0, i, 63, 1);
 1151               	.LM119:
 1152 042a CC5F      		subi r28,lo8(-(4))
 1153 042c C038      		cpi r28,lo8(-128)
 1154 042e 01F4      		brne .L45
 1155 0430 C0E0      		ldi r28,0
 1156               	.L46:
 1157               	.LBE38:
 1158               	.LBB39:
 261:stlcd.c       ****   }
 1160               	.LM120:
 1161 0432 EE24      		clr r14
 1162 0434 E394      		inc r14
 1163 0436 0C2F      		mov r16,r28
 1164 0438 2FE7      		ldi r18,lo8(127)
 1165 043a 40E0      		ldi r20,0
 1166 043c 60E0      		ldi r22,0
 1167 043e 80E0      		ldi r24,lo8(buffer)
 1168 0440 90E0      		ldi r25,hi8(buffer)
 1169 0442 0E94 0000 		call drawline
 260:stlcd.c       ****     drawline(buffer, 0, 0, 127, i, 1);
 1171               	.LM121:
 1172 0446 CC5F      		subi r28,lo8(-(4))
 1173 0448 C034      		cpi r28,lo8(64)
 1174 044a 01F4      		brne .L46
 1175               	.LBE39:
 264:stlcd.c       ****   _delay_ms(1000);
 1177               	.LM122:
 1178 044c 80E0      		ldi r24,lo8(buffer)
 1179 044e 90E0      		ldi r25,hi8(buffer)
 1180 0450 0E94 0000 		call write_buffer
 1181               	.LBB40:
 1182               	.LBB41:
 1184               	.Ltext11:
 1186               	.LM123:
 1187 0454 2FEF      		ldi r18,lo8(3199999)
 1188 0456 83ED      		ldi r24,hi8(3199999)
 1189 0458 90E3      		ldi r25,hlo8(3199999)
 1190 045a 2150      		1: subi r18,1
 1191 045c 8040      		sbci r24,0
 1192 045e 9040      		sbci r25,0
 1193 0460 01F4      		brne 1b
 1194 0462 00C0      		rjmp .
 1195 0464 0000      		nop
 1196               	.LBE41:
 1197               	.LBE40:
 1198               	.LBB42:
 1200               	.Ltext12:
 267:stlcd.c       ****     drawline(buffer, i, 63, 0, 0, 0);
 1202               	.LM124:
 1203 0466 C0E0      		ldi r28,0
 1204               	.L47:
 268:stlcd.c       ****   }
 1206               	.LM125:
 1207 0468 E12C      		mov r14,__zero_reg__
 1208 046a 00E0      		ldi r16,0
 1209 046c 20E0      		ldi r18,0
 1210 046e 4FE3      		ldi r20,lo8(63)
 1211 0470 6C2F      		mov r22,r28
 1212 0472 80E0      		ldi r24,lo8(buffer)
 1213 0474 90E0      		ldi r25,hi8(buffer)
 1214 0476 0E94 0000 		call drawline
 267:stlcd.c       ****     drawline(buffer, i, 63, 0, 0, 0);
 1216               	.LM126:
 1217 047a CC5F      		subi r28,lo8(-(4))
 1218 047c C038      		cpi r28,lo8(-128)
 1219 047e 01F4      		brne .L47
 1220 0480 C0E0      		ldi r28,0
 1221               	.L48:
 1222               	.LBE42:
 1223               	.LBB43:
 271:stlcd.c       ****   }
 1225               	.LM127:
 1226 0482 E12C      		mov r14,__zero_reg__
 1227 0484 00E0      		ldi r16,0
 1228 0486 20E0      		ldi r18,0
 1229 0488 4C2F      		mov r20,r28
 1230 048a 6FE7      		ldi r22,lo8(127)
 1231 048c 80E0      		ldi r24,lo8(buffer)
 1232 048e 90E0      		ldi r25,hi8(buffer)
 1233 0490 0E94 0000 		call drawline
 270:stlcd.c       ****     drawline(buffer, 127, i, 0, 0, 0);
 1235               	.LM128:
 1236 0494 CC5F      		subi r28,lo8(-(4))
 1237 0496 C034      		cpi r28,lo8(64)
 1238 0498 01F4      		brne .L48
 1239               	/* epilogue start */
 1240               	.LBE43:
 273:stlcd.c       **** 
 1242               	.LM129:
 1243 049a CF91      		pop r28
 1244 049c 0F91      		pop r16
 1245 049e EF90      		pop r14
 1246 04a0 0895      		ret
 1260               	.Lscope14:
 1262               		.stabd	78,0,0
 1264               	.global	get_buffer
 1266               	get_buffer:
 1267               		.stabd	46,0,0
 475:stlcd.c       **** 
 476:stlcd.c       **** uint8_t* get_buffer(void) {
 1269               	.LM130:
 1270               	.LFBB15:
 1271               	/* prologue: function */
 1272               	/* frame size = 0 */
 1273               	/* stack size = 0 */
 1274               	.L__stack_usage = 0
 477:stlcd.c       ****   return buffer;
 478:stlcd.c       **** }
 1276               	.LM131:
 1277 04a2 80E0      		ldi r24,lo8(buffer)
 1278 04a4 90E0      		ldi r25,hi8(buffer)
 1279 04a6 0895      		ret
 1281               	.Lscope15:
 1283               		.stabd	78,0,0
 1284               	.global	buffer
 1285               		.data
 1288               	buffer:
 1289 0000 00        		.byte	0
 1290 0001 00        		.byte	0
 1291 0002 00        		.byte	0
 1292 0003 00        		.byte	0
 1293 0004 00        		.byte	0
 1294 0005 00        		.byte	0
 1295 0006 00        		.byte	0
 1296 0007 00        		.byte	0
 1297 0008 00        		.byte	0
 1298 0009 00        		.byte	0
 1299 000a 00        		.byte	0
 1300 000b 00        		.byte	0
 1301 000c 00        		.byte	0
 1302 000d 00        		.byte	0
 1303 000e 00        		.byte	0
 1304 000f 00        		.byte	0
 1305 0010 00        		.byte	0
 1306 0011 00        		.byte	0
 1307 0012 00        		.byte	0
 1308 0013 00        		.byte	0
 1309 0014 00        		.byte	0
 1310 0015 00        		.byte	0
 1311 0016 00        		.byte	0
 1312 0017 00        		.byte	0
 1313 0018 00        		.byte	0
 1314 0019 00        		.byte	0
 1315 001a 00        		.byte	0
 1316 001b 00        		.byte	0
 1317 001c 00        		.byte	0
 1318 001d 00        		.byte	0
 1319 001e 00        		.byte	0
 1320 001f 00        		.byte	0
 1321 0020 00        		.byte	0
 1322 0021 00        		.byte	0
 1323 0022 00        		.byte	0
 1324 0023 00        		.byte	0
 1325 0024 00        		.byte	0
 1326 0025 00        		.byte	0
 1327 0026 00        		.byte	0
 1328 0027 00        		.byte	0
 1329 0028 00        		.byte	0
 1330 0029 00        		.byte	0
 1331 002a 00        		.byte	0
 1332 002b 00        		.byte	0
 1333 002c 00        		.byte	0
 1334 002d 00        		.byte	0
 1335 002e 00        		.byte	0
 1336 002f 00        		.byte	0
 1337 0030 00        		.byte	0
 1338 0031 00        		.byte	0
 1339 0032 00        		.byte	0
 1340 0033 00        		.byte	0
 1341 0034 00        		.byte	0
 1342 0035 00        		.byte	0
 1343 0036 00        		.byte	0
 1344 0037 00        		.byte	0
 1345 0038 00        		.byte	0
 1346 0039 00        		.byte	0
 1347 003a 00        		.byte	0
 1348 003b 00        		.byte	0
 1349 003c 00        		.byte	0
 1350 003d 00        		.byte	0
 1351 003e 00        		.byte	0
 1352 003f 00        		.byte	0
 1353 0040 00        		.byte	0
 1354 0041 00        		.byte	0
 1355 0042 00        		.byte	0
 1356 0043 00        		.byte	0
 1357 0044 00        		.byte	0
 1358 0045 00        		.byte	0
 1359 0046 00        		.byte	0
 1360 0047 00        		.byte	0
 1361 0048 00        		.byte	0
 1362 0049 00        		.byte	0
 1363 004a 00        		.byte	0
 1364 004b 00        		.byte	0
 1365 004c 00        		.byte	0
 1366 004d 00        		.byte	0
 1367 004e 00        		.byte	0
 1368 004f 00        		.byte	0
 1369 0050 00        		.byte	0
 1370 0051 00        		.byte	0
 1371 0052 00        		.byte	0
 1372 0053 00        		.byte	0
 1373 0054 00        		.byte	0
 1374 0055 00        		.byte	0
 1375 0056 00        		.byte	0
 1376 0057 00        		.byte	0
 1377 0058 00        		.byte	0
 1378 0059 00        		.byte	0
 1379 005a 00        		.byte	0
 1380 005b 00        		.byte	0
 1381 005c 00        		.byte	0
 1382 005d 00        		.byte	0
 1383 005e 00        		.byte	0
 1384 005f 00        		.byte	0
 1385 0060 00        		.byte	0
 1386 0061 00        		.byte	0
 1387 0062 00        		.byte	0
 1388 0063 00        		.byte	0
 1389 0064 00        		.byte	0
 1390 0065 00        		.byte	0
 1391 0066 00        		.byte	0
 1392 0067 00        		.byte	0
 1393 0068 00        		.byte	0
 1394 0069 00        		.byte	0
 1395 006a 00        		.byte	0
 1396 006b 00        		.byte	0
 1397 006c 00        		.byte	0
 1398 006d 00        		.byte	0
 1399 006e 00        		.byte	0
 1400 006f 00        		.byte	0
 1401 0070 00        		.byte	0
 1402 0071 00        		.byte	0
 1403 0072 00        		.byte	0
 1404 0073 00        		.byte	0
 1405 0074 00        		.byte	0
 1406 0075 00        		.byte	0
 1407 0076 00        		.byte	0
 1408 0077 00        		.byte	0
 1409 0078 00        		.byte	0
 1410 0079 00        		.byte	0
 1411 007a 00        		.byte	0
 1412 007b 00        		.byte	0
 1413 007c 00        		.byte	0
 1414 007d 00        		.byte	0
 1415 007e 00        		.byte	0
 1416 007f 00        		.byte	0
 1417 0080 00        		.byte	0
 1418 0081 00        		.byte	0
 1419 0082 00        		.byte	0
 1420 0083 00        		.byte	0
 1421 0084 00        		.byte	0
 1422 0085 00        		.byte	0
 1423 0086 00        		.byte	0
 1424 0087 00        		.byte	0
 1425 0088 00        		.byte	0
 1426 0089 00        		.byte	0
 1427 008a 00        		.byte	0
 1428 008b 00        		.byte	0
 1429 008c 00        		.byte	0
 1430 008d 00        		.byte	0
 1431 008e 00        		.byte	0
 1432 008f 00        		.byte	0
 1433 0090 00        		.byte	0
 1434 0091 00        		.byte	0
 1435 0092 00        		.byte	0
 1436 0093 03        		.byte	3
 1437 0094 07        		.byte	7
 1438 0095 0F        		.byte	15
 1439 0096 1F        		.byte	31
 1440 0097 1F        		.byte	31
 1441 0098 3F        		.byte	63
 1442 0099 3F        		.byte	63
 1443 009a 3F        		.byte	63
 1444 009b 3F        		.byte	63
 1445 009c 07        		.byte	7
 1446 009d 00        		.byte	0
 1447 009e 00        		.byte	0
 1448 009f 00        		.byte	0
 1449 00a0 00        		.byte	0
 1450 00a1 00        		.byte	0
 1451 00a2 00        		.byte	0
 1452 00a3 00        		.byte	0
 1453 00a4 00        		.byte	0
 1454 00a5 00        		.byte	0
 1455 00a6 00        		.byte	0
 1456 00a7 00        		.byte	0
 1457 00a8 00        		.byte	0
 1458 00a9 00        		.byte	0
 1459 00aa 00        		.byte	0
 1460 00ab 00        		.byte	0
 1461 00ac 00        		.byte	0
 1462 00ad 00        		.byte	0
 1463 00ae 00        		.byte	0
 1464 00af 00        		.byte	0
 1465 00b0 00        		.byte	0
 1466 00b1 00        		.byte	0
 1467 00b2 00        		.byte	0
 1468 00b3 00        		.byte	0
 1469 00b4 00        		.byte	0
 1470 00b5 00        		.byte	0
 1471 00b6 00        		.byte	0
 1472 00b7 00        		.byte	0
 1473 00b8 00        		.byte	0
 1474 00b9 00        		.byte	0
 1475 00ba 00        		.byte	0
 1476 00bb 00        		.byte	0
 1477 00bc 00        		.byte	0
 1478 00bd 00        		.byte	0
 1479 00be 00        		.byte	0
 1480 00bf 00        		.byte	0
 1481 00c0 00        		.byte	0
 1482 00c1 00        		.byte	0
 1483 00c2 7F        		.byte	127
 1484 00c3 3F        		.byte	63
 1485 00c4 00        		.byte	0
 1486 00c5 00        		.byte	0
 1487 00c6 00        		.byte	0
 1488 00c7 00        		.byte	0
 1489 00c8 00        		.byte	0
 1490 00c9 00        		.byte	0
 1491 00ca 00        		.byte	0
 1492 00cb 00        		.byte	0
 1493 00cc 00        		.byte	0
 1494 00cd 00        		.byte	0
 1495 00ce 00        		.byte	0
 1496 00cf 00        		.byte	0
 1497 00d0 00        		.byte	0
 1498 00d1 00        		.byte	0
 1499 00d2 1F        		.byte	31
 1500 00d3 3F        		.byte	63
 1501 00d4 70        		.byte	112
 1502 00d5 70        		.byte	112
 1503 00d6 00        		.byte	0
 1504 00d7 00        		.byte	0
 1505 00d8 00        		.byte	0
 1506 00d9 00        		.byte	0
 1507 00da 00        		.byte	0
 1508 00db 00        		.byte	0
 1509 00dc 00        		.byte	0
 1510 00dd 00        		.byte	0
 1511 00de 00        		.byte	0
 1512 00df 00        		.byte	0
 1513 00e0 00        		.byte	0
 1514 00e1 00        		.byte	0
 1515 00e2 00        		.byte	0
 1516 00e3 00        		.byte	0
 1517 00e4 00        		.byte	0
 1518 00e5 00        		.byte	0
 1519 00e6 00        		.byte	0
 1520 00e7 00        		.byte	0
 1521 00e8 00        		.byte	0
 1522 00e9 06        		.byte	6
 1523 00ea 06        		.byte	6
 1524 00eb 00        		.byte	0
 1525 00ec 00        		.byte	0
 1526 00ed 00        		.byte	0
 1527 00ee 03        		.byte	3
 1528 00ef 03        		.byte	3
 1529 00f0 00        		.byte	0
 1530 00f1 00        		.byte	0
 1531 00f2 00        		.byte	0
 1532 00f3 00        		.byte	0
 1533 00f4 00        		.byte	0
 1534 00f5 00        		.byte	0
 1535 00f6 00        		.byte	0
 1536 00f7 00        		.byte	0
 1537 00f8 00        		.byte	0
 1538 00f9 00        		.byte	0
 1539 00fa 00        		.byte	0
 1540 00fb 00        		.byte	0
 1541 00fc 00        		.byte	0
 1542 00fd 00        		.byte	0
 1543 00fe 00        		.byte	0
 1544 00ff 00        		.byte	0
 1545 0100 1F        		.byte	31
 1546 0101 1F        		.byte	31
 1547 0102 1F        		.byte	31
 1548 0103 1F        		.byte	31
 1549 0104 1F        		.byte	31
 1550 0105 1F        		.byte	31
 1551 0106 1F        		.byte	31
 1552 0107 1F        		.byte	31
 1553 0108 1F        		.byte	31
 1554 0109 1F        		.byte	31
 1555 010a 1F        		.byte	31
 1556 010b 1F        		.byte	31
 1557 010c 1F        		.byte	31
 1558 010d 0F        		.byte	15
 1559 010e 07        		.byte	7
 1560 010f 07        		.byte	7
 1561 0110 07        		.byte	7
 1562 0111 3F        		.byte	63
 1563 0112 FF        		.byte	-1
 1564 0113 FF        		.byte	-1
 1565 0114 FF        		.byte	-1
 1566 0115 FF        		.byte	-1
 1567 0116 FF        		.byte	-1
 1568 0117 FE        		.byte	-2
 1569 0118 FF        		.byte	-1
 1570 0119 FF        		.byte	-1
 1571 011a FF        		.byte	-1
 1572 011b FF        		.byte	-1
 1573 011c FF        		.byte	-1
 1574 011d 3E        		.byte	62
 1575 011e 00        		.byte	0
 1576 011f 00        		.byte	0
 1577 0120 00        		.byte	0
 1578 0121 00        		.byte	0
 1579 0122 00        		.byte	0
 1580 0123 00        		.byte	0
 1581 0124 00        		.byte	0
 1582 0125 00        		.byte	0
 1583 0126 00        		.byte	0
 1584 0127 00        		.byte	0
 1585 0128 00        		.byte	0
 1586 0129 00        		.byte	0
 1587 012a 00        		.byte	0
 1588 012b 00        		.byte	0
 1589 012c 00        		.byte	0
 1590 012d 00        		.byte	0
 1591 012e 0F        		.byte	15
 1592 012f 3F        		.byte	63
 1593 0130 70        		.byte	112
 1594 0131 60        		.byte	96
 1595 0132 60        		.byte	96
 1596 0133 60        		.byte	96
 1597 0134 60        		.byte	96
 1598 0135 30        		.byte	48
 1599 0136 7F        		.byte	127
 1600 0137 3F        		.byte	63
 1601 0138 00        		.byte	0
 1602 0139 00        		.byte	0
 1603 013a 1F        		.byte	31
 1604 013b 3F        		.byte	63
 1605 013c 70        		.byte	112
 1606 013d 60        		.byte	96
 1607 013e 60        		.byte	96
 1608 013f 60        		.byte	96
 1609 0140 60        		.byte	96
 1610 0141 39        		.byte	57
 1611 0142 FF        		.byte	-1
 1612 0143 FF        		.byte	-1
 1613 0144 00        		.byte	0
 1614 0145 06        		.byte	6
 1615 0146 1F        		.byte	31
 1616 0147 39        		.byte	57
 1617 0148 60        		.byte	96
 1618 0149 60        		.byte	96
 1619 014a 60        		.byte	96
 1620 014b 60        		.byte	96
 1621 014c 30        		.byte	48
 1622 014d 3F        		.byte	63
 1623 014e 7F        		.byte	127
 1624 014f 00        		.byte	0
 1625 0150 00        		.byte	0
 1626 0151 60        		.byte	96
 1627 0152 FF        		.byte	-1
 1628 0153 FF        		.byte	-1
 1629 0154 60        		.byte	96
 1630 0155 60        		.byte	96
 1631 0156 00        		.byte	0
 1632 0157 7F        		.byte	127
 1633 0158 7F        		.byte	127
 1634 0159 70        		.byte	112
 1635 015a 60        		.byte	96
 1636 015b 60        		.byte	96
 1637 015c 40        		.byte	64
 1638 015d 00        		.byte	0
 1639 015e 7F        		.byte	127
 1640 015f 7F        		.byte	127
 1641 0160 00        		.byte	0
 1642 0161 00        		.byte	0
 1643 0162 00        		.byte	0
 1644 0163 00        		.byte	0
 1645 0164 7F        		.byte	127
 1646 0165 7F        		.byte	127
 1647 0166 00        		.byte	0
 1648 0167 00        		.byte	0
 1649 0168 00        		.byte	0
 1650 0169 7F        		.byte	127
 1651 016a 7F        		.byte	127
 1652 016b 00        		.byte	0
 1653 016c 00        		.byte	0
 1654 016d 60        		.byte	96
 1655 016e FF        		.byte	-1
 1656 016f FF        		.byte	-1
 1657 0170 60        		.byte	96
 1658 0171 60        		.byte	96
 1659 0172 00        		.byte	0
 1660 0173 00        		.byte	0
 1661 0174 00        		.byte	0
 1662 0175 00        		.byte	0
 1663 0176 00        		.byte	0
 1664 0177 00        		.byte	0
 1665 0178 00        		.byte	0
 1666 0179 00        		.byte	0
 1667 017a 00        		.byte	0
 1668 017b 00        		.byte	0
 1669 017c 00        		.byte	0
 1670 017d 00        		.byte	0
 1671 017e 00        		.byte	0
 1672 017f 00        		.byte	0
 1673 0180 80        		.byte	-128
 1674 0181 F8        		.byte	-8
 1675 0182 FC        		.byte	-4
 1676 0183 FE        		.byte	-2
 1677 0184 FE        		.byte	-2
 1678 0185 FF        		.byte	-1
 1679 0186 FF        		.byte	-1
 1680 0187 FF        		.byte	-1
 1681 0188 FF        		.byte	-1
 1682 0189 FF        		.byte	-1
 1683 018a FF        		.byte	-1
 1684 018b FF        		.byte	-1
 1685 018c EF        		.byte	-17
 1686 018d E7        		.byte	-25
 1687 018e E7        		.byte	-25
 1688 018f E3        		.byte	-29
 1689 0190 F3        		.byte	-13
 1690 0191 F9        		.byte	-7
 1691 0192 FF        		.byte	-1
 1692 0193 FF        		.byte	-1
 1693 0194 FF        		.byte	-1
 1694 0195 F7        		.byte	-9
 1695 0196 07        		.byte	7
 1696 0197 1F        		.byte	31
 1697 0198 FF        		.byte	-1
 1698 0199 FF        		.byte	-1
 1699 019a FF        		.byte	-1
 1700 019b FF        		.byte	-1
 1701 019c FF        		.byte	-1
 1702 019d FF        		.byte	-1
 1703 019e 7F        		.byte	127
 1704 019f FF        		.byte	-1
 1705 01a0 7F        		.byte	127
 1706 01a1 7F        		.byte	127
 1707 01a2 7F        		.byte	127
 1708 01a3 7F        		.byte	127
 1709 01a4 7F        		.byte	127
 1710 01a5 7F        		.byte	127
 1711 01a6 3F        		.byte	63
 1712 01a7 3F        		.byte	63
 1713 01a8 1F        		.byte	31
 1714 01a9 0F        		.byte	15
 1715 01aa 07        		.byte	7
 1716 01ab 03        		.byte	3
 1717 01ac 00        		.byte	0
 1718 01ad 00        		.byte	0
 1719 01ae 00        		.byte	0
 1720 01af C0        		.byte	-64
 1721 01b0 E0        		.byte	-32
 1722 01b1 60        		.byte	96
 1723 01b2 20        		.byte	32
 1724 01b3 20        		.byte	32
 1725 01b4 60        		.byte	96
 1726 01b5 E0        		.byte	-32
 1727 01b6 E0        		.byte	-32
 1728 01b7 E0        		.byte	-32
 1729 01b8 00        		.byte	0
 1730 01b9 00        		.byte	0
 1731 01ba 80        		.byte	-128
 1732 01bb C0        		.byte	-64
 1733 01bc E0        		.byte	-32
 1734 01bd 60        		.byte	96
 1735 01be 20        		.byte	32
 1736 01bf 60        		.byte	96
 1737 01c0 60        		.byte	96
 1738 01c1 E0        		.byte	-32
 1739 01c2 E0        		.byte	-32
 1740 01c3 E0        		.byte	-32
 1741 01c4 00        		.byte	0
 1742 01c5 00        		.byte	0
 1743 01c6 80        		.byte	-128
 1744 01c7 C0        		.byte	-64
 1745 01c8 60        		.byte	96
 1746 01c9 60        		.byte	96
 1747 01ca 20        		.byte	32
 1748 01cb 60        		.byte	96
 1749 01cc 60        		.byte	96
 1750 01cd E0        		.byte	-32
 1751 01ce E0        		.byte	-32
 1752 01cf 00        		.byte	0
 1753 01d0 00        		.byte	0
 1754 01d1 00        		.byte	0
 1755 01d2 E0        		.byte	-32
 1756 01d3 E0        		.byte	-32
 1757 01d4 00        		.byte	0
 1758 01d5 00        		.byte	0
 1759 01d6 00        		.byte	0
 1760 01d7 E0        		.byte	-32
 1761 01d8 E0        		.byte	-32
 1762 01d9 00        		.byte	0
 1763 01da 00        		.byte	0
 1764 01db 00        		.byte	0
 1765 01dc 00        		.byte	0
 1766 01dd 00        		.byte	0
 1767 01de 80        		.byte	-128
 1768 01df E0        		.byte	-32
 1769 01e0 60        		.byte	96
 1770 01e1 60        		.byte	96
 1771 01e2 60        		.byte	96
 1772 01e3 60        		.byte	96
 1773 01e4 E0        		.byte	-32
 1774 01e5 80        		.byte	-128
 1775 01e6 00        		.byte	0
 1776 01e7 00        		.byte	0
 1777 01e8 00        		.byte	0
 1778 01e9 E0        		.byte	-32
 1779 01ea E0        		.byte	-32
 1780 01eb 00        		.byte	0
 1781 01ec 00        		.byte	0
 1782 01ed 00        		.byte	0
 1783 01ee E0        		.byte	-32
 1784 01ef E0        		.byte	-32
 1785 01f0 00        		.byte	0
 1786 01f1 00        		.byte	0
 1787 01f2 00        		.byte	0
 1788 01f3 00        		.byte	0
 1789 01f4 00        		.byte	0
 1790 01f5 00        		.byte	0
 1791 01f6 00        		.byte	0
 1792 01f7 00        		.byte	0
 1793 01f8 00        		.byte	0
 1794 01f9 00        		.byte	0
 1795 01fa 00        		.byte	0
 1796 01fb 00        		.byte	0
 1797 01fc 00        		.byte	0
 1798 01fd 00        		.byte	0
 1799 01fe 00        		.byte	0
 1800 01ff 00        		.byte	0
 1801 0200 00        		.byte	0
 1802 0201 00        		.byte	0
 1803 0202 00        		.byte	0
 1804 0203 03        		.byte	3
 1805 0204 07        		.byte	7
 1806 0205 1F        		.byte	31
 1807 0206 9F        		.byte	-97
 1808 0207 FF        		.byte	-1
 1809 0208 FF        		.byte	-1
 1810 0209 FF        		.byte	-1
 1811 020a FF        		.byte	-1
 1812 020b FF        		.byte	-1
 1813 020c FF        		.byte	-1
 1814 020d FD        		.byte	-3
 1815 020e F1        		.byte	-15
 1816 020f E3        		.byte	-29
 1817 0210 E3        		.byte	-29
 1818 0211 CF        		.byte	-49
 1819 0212 FF        		.byte	-1
 1820 0213 FF        		.byte	-1
 1821 0214 FF        		.byte	-1
 1822 0215 FF        		.byte	-1
 1823 0216 F0        		.byte	-16
 1824 0217 FC        		.byte	-4
 1825 0218 7F        		.byte	127
 1826 0219 3F        		.byte	63
 1827 021a 3F        		.byte	63
 1828 021b 3F        		.byte	63
 1829 021c 3F        		.byte	63
 1830 021d 7F        		.byte	127
 1831 021e FF        		.byte	-1
 1832 021f FF        		.byte	-1
 1833 0220 FF        		.byte	-1
 1834 0221 FF        		.byte	-1
 1835 0222 FF        		.byte	-1
 1836 0223 FF        		.byte	-1
 1837 0224 FF        		.byte	-1
 1838 0225 FF        		.byte	-1
 1839 0226 FF        		.byte	-1
 1840 0227 FE        		.byte	-2
 1841 0228 FC        		.byte	-4
 1842 0229 F0        		.byte	-16
 1843 022a E0        		.byte	-32
 1844 022b 80        		.byte	-128
 1845 022c 00        		.byte	0
 1846 022d 00        		.byte	0
 1847 022e 00        		.byte	0
 1848 022f 0C        		.byte	12
 1849 0230 1C        		.byte	28
 1850 0231 00        		.byte	0
 1851 0232 00        		.byte	0
 1852 0233 00        		.byte	0
 1853 0234 00        		.byte	0
 1854 0235 00        		.byte	0
 1855 0236 00        		.byte	0
 1856 0237 00        		.byte	0
 1857 0238 00        		.byte	0
 1858 0239 00        		.byte	0
 1859 023a 00        		.byte	0
 1860 023b 00        		.byte	0
 1861 023c 00        		.byte	0
 1862 023d 00        		.byte	0
 1863 023e 00        		.byte	0
 1864 023f 00        		.byte	0
 1865 0240 00        		.byte	0
 1866 0241 00        		.byte	0
 1867 0242 00        		.byte	0
 1868 0243 00        		.byte	0
 1869 0244 00        		.byte	0
 1870 0245 00        		.byte	0
 1871 0246 7F        		.byte	127
 1872 0247 7F        		.byte	127
 1873 0248 00        		.byte	0
 1874 0249 00        		.byte	0
 1875 024a 00        		.byte	0
 1876 024b 00        		.byte	0
 1877 024c 00        		.byte	0
 1878 024d 00        		.byte	0
 1879 024e 00        		.byte	0
 1880 024f 00        		.byte	0
 1881 0250 00        		.byte	0
 1882 0251 00        		.byte	0
 1883 0252 00        		.byte	0
 1884 0253 00        		.byte	0
 1885 0254 00        		.byte	0
 1886 0255 00        		.byte	0
 1887 0256 00        		.byte	0
 1888 0257 00        		.byte	0
 1889 0258 00        		.byte	0
 1890 0259 00        		.byte	0
 1891 025a 00        		.byte	0
 1892 025b 00        		.byte	0
 1893 025c 00        		.byte	0
 1894 025d 07        		.byte	7
 1895 025e 07        		.byte	7
 1896 025f 00        		.byte	0
 1897 0260 00        		.byte	0
 1898 0261 00        		.byte	0
 1899 0262 00        		.byte	0
 1900 0263 00        		.byte	0
 1901 0264 00        		.byte	0
 1902 0265 00        		.byte	0
 1903 0266 00        		.byte	0
 1904 0267 00        		.byte	0
 1905 0268 00        		.byte	0
 1906 0269 1C        		.byte	28
 1907 026a 0C        		.byte	12
 1908 026b 00        		.byte	0
 1909 026c 00        		.byte	0
 1910 026d 00        		.byte	0
 1911 026e 00        		.byte	0
 1912 026f 00        		.byte	0
 1913 0270 00        		.byte	0
 1914 0271 00        		.byte	0
 1915 0272 00        		.byte	0
 1916 0273 00        		.byte	0
 1917 0274 00        		.byte	0
 1918 0275 00        		.byte	0
 1919 0276 00        		.byte	0
 1920 0277 00        		.byte	0
 1921 0278 00        		.byte	0
 1922 0279 00        		.byte	0
 1923 027a 00        		.byte	0
 1924 027b 00        		.byte	0
 1925 027c 00        		.byte	0
 1926 027d 00        		.byte	0
 1927 027e 00        		.byte	0
 1928 027f 00        		.byte	0
 1929 0280 00        		.byte	0
 1930 0281 07        		.byte	7
 1931 0282 FF        		.byte	-1
 1932 0283 FF        		.byte	-1
 1933 0284 FF        		.byte	-1
 1934 0285 FF        		.byte	-1
 1935 0286 FF        		.byte	-1
 1936 0287 FF        		.byte	-1
 1937 0288 FF        		.byte	-1
 1938 0289 FF        		.byte	-1
 1939 028a FE        		.byte	-2
 1940 028b FE        		.byte	-2
 1941 028c FE        		.byte	-2
 1942 028d FE        		.byte	-2
 1943 028e FC        		.byte	-4
 1944 028f F8        		.byte	-8
 1945 0290 F8        		.byte	-8
 1946 0291 F0        		.byte	-16
 1947 0292 FE        		.byte	-2
 1948 0293 FF        		.byte	-1
 1949 0294 FF        		.byte	-1
 1950 0295 FF        		.byte	-1
 1951 0296 7F        		.byte	127
 1952 0297 3F        		.byte	63
 1953 0298 FF        		.byte	-1
 1954 0299 FF        		.byte	-1
 1955 029a FF        		.byte	-1
 1956 029b FF        		.byte	-1
 1957 029c FF        		.byte	-1
 1958 029d FF        		.byte	-1
 1959 029e FF        		.byte	-1
 1960 029f 1F        		.byte	31
 1961 02a0 00        		.byte	0
 1962 02a1 00        		.byte	0
 1963 02a2 00        		.byte	0
 1964 02a3 00        		.byte	0
 1965 02a4 00        		.byte	0
 1966 02a5 00        		.byte	0
 1967 02a6 00        		.byte	0
 1968 02a7 00        		.byte	0
 1969 02a8 00        		.byte	0
 1970 02a9 00        		.byte	0
 1971 02aa 00        		.byte	0
 1972 02ab 00        		.byte	0
 1973 02ac 00        		.byte	0
 1974 02ad 00        		.byte	0
 1975 02ae 00        		.byte	0
 1976 02af FF        		.byte	-1
 1977 02b0 FF        		.byte	-1
 1978 02b1 00        		.byte	0
 1979 02b2 00        		.byte	0
 1980 02b3 00        		.byte	0
 1981 02b4 FF        		.byte	-1
 1982 02b5 FF        		.byte	-1
 1983 02b6 E0        		.byte	-32
 1984 02b7 C0        		.byte	-64
 1985 02b8 C0        		.byte	-64
 1986 02b9 C0        		.byte	-64
 1987 02ba FF        		.byte	-1
 1988 02bb 7F        		.byte	127
 1989 02bc 00        		.byte	0
 1990 02bd 00        		.byte	0
 1991 02be 1E        		.byte	30
 1992 02bf 7F        		.byte	127
 1993 02c0 E1        		.byte	-31
 1994 02c1 C0        		.byte	-64
 1995 02c2 C0        		.byte	-64
 1996 02c3 C0        		.byte	-64
 1997 02c4 C0        		.byte	-64
 1998 02c5 61        		.byte	97
 1999 02c6 FF        		.byte	-1
 2000 02c7 FF        		.byte	-1
 2001 02c8 00        		.byte	0
 2002 02c9 00        		.byte	0
 2003 02ca FE        		.byte	-2
 2004 02cb FF        		.byte	-1
 2005 02cc 01        		.byte	1
 2006 02cd 00        		.byte	0
 2007 02ce 00        		.byte	0
 2008 02cf 00        		.byte	0
 2009 02d0 FF        		.byte	-1
 2010 02d1 FF        		.byte	-1
 2011 02d2 00        		.byte	0
 2012 02d3 00        		.byte	0
 2013 02d4 21        		.byte	33
 2014 02d5 F9        		.byte	-7
 2015 02d6 F8        		.byte	-8
 2016 02d7 DC        		.byte	-36
 2017 02d8 CC        		.byte	-52
 2018 02d9 CF        		.byte	-49
 2019 02da 07        		.byte	7
 2020 02db 00        		.byte	0
 2021 02dc C0        		.byte	-64
 2022 02dd FF        		.byte	-1
 2023 02de FF        		.byte	-1
 2024 02df C0        		.byte	-64
 2025 02e0 80        		.byte	-128
 2026 02e1 00        		.byte	0
 2027 02e2 FF        		.byte	-1
 2028 02e3 FF        		.byte	-1
 2029 02e4 C0        		.byte	-64
 2030 02e5 C0        		.byte	-64
 2031 02e6 80        		.byte	-128
 2032 02e7 00        		.byte	0
 2033 02e8 00        		.byte	0
 2034 02e9 FF        		.byte	-1
 2035 02ea FF        		.byte	-1
 2036 02eb 00        		.byte	0
 2037 02ec 00        		.byte	0
 2038 02ed 1F        		.byte	31
 2039 02ee 7F        		.byte	127
 2040 02ef F9        		.byte	-7
 2041 02f0 C8        		.byte	-56
 2042 02f1 C8        		.byte	-56
 2043 02f2 C8        		.byte	-56
 2044 02f3 C8        		.byte	-56
 2045 02f4 79        		.byte	121
 2046 02f5 39        		.byte	57
 2047 02f6 00        		.byte	0
 2048 02f7 00        		.byte	0
 2049 02f8 71        		.byte	113
 2050 02f9 F9        		.byte	-7
 2051 02fa D8        		.byte	-40
 2052 02fb CC        		.byte	-52
 2053 02fc CE        		.byte	-50
 2054 02fd 47        		.byte	71
 2055 02fe 03        		.byte	3
 2056 02ff 00        		.byte	0
 2057 0300 00        		.byte	0
 2058 0301 00        		.byte	0
 2059 0302 00        		.byte	0
 2060 0303 00        		.byte	0
 2061 0304 80        		.byte	-128
 2062 0305 80        		.byte	-128
 2063 0306 00        		.byte	0
 2064 0307 00        		.byte	0
 2065 0308 00        		.byte	0
 2066 0309 00        		.byte	0
 2067 030a 00        		.byte	0
 2068 030b 00        		.byte	0
 2069 030c 00        		.byte	0
 2070 030d 00        		.byte	0
 2071 030e 00        		.byte	0
 2072 030f 00        		.byte	0
 2073 0310 00        		.byte	0
 2074 0311 00        		.byte	0
 2075 0312 00        		.byte	0
 2076 0313 80        		.byte	-128
 2077 0314 C0        		.byte	-64
 2078 0315 E0        		.byte	-32
 2079 0316 F0        		.byte	-16
 2080 0317 F8        		.byte	-8
 2081 0318 F8        		.byte	-8
 2082 0319 FC        		.byte	-4
 2083 031a FC        		.byte	-4
 2084 031b FC        		.byte	-4
 2085 031c FC        		.byte	-4
 2086 031d F8        		.byte	-8
 2087 031e F0        		.byte	-16
 2088 031f C0        		.byte	-64
 2089 0320 00        		.byte	0
 2090 0321 00        		.byte	0
 2091 0322 00        		.byte	0
 2092 0323 00        		.byte	0
 2093 0324 00        		.byte	0
 2094 0325 00        		.byte	0
 2095 0326 00        		.byte	0
 2096 0327 00        		.byte	0
 2097 0328 00        		.byte	0
 2098 0329 00        		.byte	0
 2099 032a 00        		.byte	0
 2100 032b 00        		.byte	0
 2101 032c 00        		.byte	0
 2102 032d 00        		.byte	0
 2103 032e 00        		.byte	0
 2104 032f C0        		.byte	-64
 2105 0330 C0        		.byte	-64
 2106 0331 00        		.byte	0
 2107 0332 00        		.byte	0
 2108 0333 00        		.byte	0
 2109 0334 C0        		.byte	-64
 2110 0335 C0        		.byte	-64
 2111 0336 00        		.byte	0
 2112 0337 00        		.byte	0
 2113 0338 00        		.byte	0
 2114 0339 00        		.byte	0
 2115 033a C0        		.byte	-64
 2116 033b C0        		.byte	-64
 2117 033c 00        		.byte	0
 2118 033d 00        		.byte	0
 2119 033e 00        		.byte	0
 2120 033f 80        		.byte	-128
 2121 0340 C0        		.byte	-64
 2122 0341 C0        		.byte	-64
 2123 0342 C0        		.byte	-64
 2124 0343 C0        		.byte	-64
 2125 0344 C0        		.byte	-64
 2126 0345 80        		.byte	-128
 2127 0346 C0        		.byte	-64
 2128 0347 C0        		.byte	-64
 2129 0348 00        		.byte	0
 2130 0349 00        		.byte	0
 2131 034a 00        		.byte	0
 2132 034b 80        		.byte	-128
 2133 034c C0        		.byte	-64
 2134 034d C0        		.byte	-64
 2135 034e C0        		.byte	-64
 2136 034f C0        		.byte	-64
 2137 0350 C0        		.byte	-64
 2138 0351 80        		.byte	-128
 2139 0352 00        		.byte	0
 2140 0353 00        		.byte	0
 2141 0354 80        		.byte	-128
 2142 0355 C0        		.byte	-64
 2143 0356 C0        		.byte	-64
 2144 0357 C0        		.byte	-64
 2145 0358 C0        		.byte	-64
 2146 0359 C0        		.byte	-64
 2147 035a 00        		.byte	0
 2148 035b 00        		.byte	0
 2149 035c 00        		.byte	0
 2150 035d C0        		.byte	-64
 2151 035e C0        		.byte	-64
 2152 035f 00        		.byte	0
 2153 0360 00        		.byte	0
 2154 0361 00        		.byte	0
 2155 0362 C0        		.byte	-64
 2156 0363 80        		.byte	-128
 2157 0364 00        		.byte	0
 2158 0365 00        		.byte	0
 2159 0366 00        		.byte	0
 2160 0367 00        		.byte	0
 2161 0368 00        		.byte	0
 2162 0369 C0        		.byte	-64
 2163 036a C0        		.byte	-64
 2164 036b 00        		.byte	0
 2165 036c 00        		.byte	0
 2166 036d 00        		.byte	0
 2167 036e 80        		.byte	-128
 2168 036f C0        		.byte	-64
 2169 0370 C0        		.byte	-64
 2170 0371 C0        		.byte	-64
 2171 0372 C0        		.byte	-64
 2172 0373 C0        		.byte	-64
 2173 0374 80        		.byte	-128
 2174 0375 80        		.byte	-128
 2175 0376 00        		.byte	0
 2176 0377 00        		.byte	0
 2177 0378 80        		.byte	-128
 2178 0379 C0        		.byte	-64
 2179 037a C0        		.byte	-64
 2180 037b C0        		.byte	-64
 2181 037c C0        		.byte	-64
 2182 037d 80        		.byte	-128
 2183 037e 00        		.byte	0
 2184 037f 00        		.byte	0
 2185 0380 00        		.byte	0
 2186 0381 00        		.byte	0
 2187 0382 00        		.byte	0
 2188 0383 00        		.byte	0
 2189 0384 00        		.byte	0
 2190 0385 00        		.byte	0
 2191 0386 00        		.byte	0
 2192 0387 00        		.byte	0
 2193 0388 00        		.byte	0
 2194 0389 00        		.byte	0
 2195 038a 00        		.byte	0
 2196 038b 00        		.byte	0
 2197 038c 00        		.byte	0
 2198 038d 00        		.byte	0
 2199 038e 00        		.byte	0
 2200 038f 00        		.byte	0
 2201 0390 00        		.byte	0
 2202 0391 00        		.byte	0
 2203 0392 00        		.byte	0
 2204 0393 00        		.byte	0
 2205 0394 00        		.byte	0
 2206 0395 00        		.byte	0
 2207 0396 00        		.byte	0
 2208 0397 00        		.byte	0
 2209 0398 00        		.byte	0
 2210 0399 00        		.byte	0
 2211 039a 00        		.byte	0
 2212 039b 00        		.byte	0
 2213 039c 00        		.byte	0
 2214 039d 00        		.byte	0
 2215 039e 00        		.byte	0
 2216 039f 00        		.byte	0
 2217 03a0 00        		.byte	0
 2218 03a1 00        		.byte	0
 2219 03a2 00        		.byte	0
 2220 03a3 00        		.byte	0
 2221 03a4 00        		.byte	0
 2222 03a5 00        		.byte	0
 2223 03a6 00        		.byte	0
 2224 03a7 00        		.byte	0
 2225 03a8 00        		.byte	0
 2226 03a9 00        		.byte	0
 2227 03aa 00        		.byte	0
 2228 03ab 00        		.byte	0
 2229 03ac 00        		.byte	0
 2230 03ad 00        		.byte	0
 2231 03ae 00        		.byte	0
 2232 03af 00        		.byte	0
 2233 03b0 00        		.byte	0
 2234 03b1 00        		.byte	0
 2235 03b2 00        		.byte	0
 2236 03b3 00        		.byte	0
 2237 03b4 00        		.byte	0
 2238 03b5 00        		.byte	0
 2239 03b6 00        		.byte	0
 2240 03b7 00        		.byte	0
 2241 03b8 00        		.byte	0
 2242 03b9 00        		.byte	0
 2243 03ba 00        		.byte	0
 2244 03bb 00        		.byte	0
 2245 03bc 00        		.byte	0
 2246 03bd 00        		.byte	0
 2247 03be 00        		.byte	0
 2248 03bf 00        		.byte	0
 2249 03c0 00        		.byte	0
 2250 03c1 00        		.byte	0
 2251 03c2 00        		.byte	0
 2252 03c3 00        		.byte	0
 2253 03c4 00        		.byte	0
 2254 03c5 00        		.byte	0
 2255 03c6 00        		.byte	0
 2256 03c7 00        		.byte	0
 2257 03c8 00        		.byte	0
 2258 03c9 00        		.byte	0
 2259 03ca 00        		.byte	0
 2260 03cb 00        		.byte	0
 2261 03cc 00        		.byte	0
 2262 03cd 00        		.byte	0
 2263 03ce 00        		.byte	0
 2264 03cf 00        		.byte	0
 2265 03d0 00        		.byte	0
 2266 03d1 00        		.byte	0
 2267 03d2 00        		.byte	0
 2268 03d3 00        		.byte	0
 2269 03d4 00        		.byte	0
 2270 03d5 00        		.byte	0
 2271 03d6 00        		.byte	0
 2272 03d7 00        		.byte	0
 2273 03d8 00        		.byte	0
 2274 03d9 00        		.byte	0
 2275 03da 00        		.byte	0
 2276 03db 00        		.byte	0
 2277 03dc 00        		.byte	0
 2278 03dd 00        		.byte	0
 2279 03de 00        		.byte	0
 2280 03df 00        		.byte	0
 2281 03e0 00        		.byte	0
 2282 03e1 00        		.byte	0
 2283 03e2 00        		.byte	0
 2284 03e3 00        		.byte	0
 2285 03e4 00        		.byte	0
 2286 03e5 00        		.byte	0
 2287 03e6 00        		.byte	0
 2288 03e7 00        		.byte	0
 2289 03e8 00        		.byte	0
 2290 03e9 00        		.byte	0
 2291 03ea 00        		.byte	0
 2292 03eb 00        		.byte	0
 2293 03ec 00        		.byte	0
 2294 03ed 00        		.byte	0
 2295 03ee 00        		.byte	0
 2296 03ef 00        		.byte	0
 2297 03f0 00        		.byte	0
 2298 03f1 00        		.byte	0
 2299 03f2 00        		.byte	0
 2300 03f3 00        		.byte	0
 2301 03f4 00        		.byte	0
 2302 03f5 00        		.byte	0
 2303 03f6 00        		.byte	0
 2304 03f7 00        		.byte	0
 2305 03f8 00        		.byte	0
 2306 03f9 00        		.byte	0
 2307 03fa 00        		.byte	0
 2308 03fb 00        		.byte	0
 2309 03fc 00        		.byte	0
 2310 03fd 00        		.byte	0
 2311 03fe 00        		.byte	0
 2312 03ff 00        		.byte	0
 2313               	.global	pagemap
 2316               	pagemap:
 2317 0400 0300      		.word	3
 2318 0402 0200      		.word	2
 2319 0404 0100      		.word	1
 2320 0406 0000      		.word	0
 2321 0408 0700      		.word	7
 2322 040a 0600      		.word	6
 2323 040c 0500      		.word	5
 2324 040e 0400      		.word	4
 2325               	.global	is_reversed
 2326               		.section .bss
 2329               	is_reversed:
 2330 0000 00        		.zero	1
 2331               		.section	.progmem.data,"a",@progbits
 2334               	logo16_glcd_bmp:
 2335 0000 00        		.byte	0
 2336 0001 00        		.byte	0
 2337 0002 00        		.byte	0
 2338 0003 00        		.byte	0
 2339 0004 00        		.byte	0
 2340 0005 00        		.byte	0
 2341 0006 00        		.byte	0
 2342 0007 00        		.byte	0
 2343 0008 00        		.byte	0
 2344 0009 00        		.byte	0
 2345 000a 00        		.byte	0
 2346 000b 00        		.byte	0
 2347 000c 00        		.byte	0
 2348 000d 00        		.byte	0
 2349 000e 00        		.byte	0
 2350 000f 00        		.byte	0
 2351 0010 00        		.byte	0
 2352 0011 00        		.byte	0
 2353 0012 00        		.byte	0
 2354 0013 00        		.byte	0
 2355 0014 00        		.byte	0
 2356 0015 00        		.byte	0
 2357 0016 00        		.byte	0
 2358 0017 00        		.byte	0
 2359 0018 00        		.byte	0
 2360 0019 00        		.byte	0
 2361 001a 00        		.byte	0
 2362 001b 00        		.byte	0
 2363 001c 00        		.byte	0
 2364 001d 00        		.byte	0
 2365 001e 00        		.byte	0
 2366 001f 00        		.byte	0
 2367 0020 00        		.byte	0
 2368 0021 00        		.byte	0
 2369 0022 00        		.byte	0
 2370 0023 00        		.byte	0
 2371 0024 00        		.byte	0
 2372 0025 00        		.byte	0
 2373 0026 00        		.byte	0
 2374 0027 00        		.byte	0
 2375 0028 00        		.byte	0
 2376 0029 00        		.byte	0
 2377 002a 00        		.byte	0
 2378 002b 00        		.byte	0
 2379 002c 00        		.byte	0
 2380 002d 00        		.byte	0
 2381 002e 00        		.byte	0
 2382 002f 00        		.byte	0
 2383 0030 00        		.byte	0
 2384 0031 00        		.byte	0
 2385 0032 00        		.byte	0
 2386 0033 00        		.byte	0
 2387 0034 00        		.byte	0
 2388 0035 00        		.byte	0
 2389 0036 00        		.byte	0
 2390 0037 00        		.byte	0
 2391 0038 00        		.byte	0
 2392 0039 00        		.byte	0
 2393 003a 00        		.byte	0
 2394 003b 00        		.byte	0
 2395 003c 00        		.byte	0
 2396 003d 00        		.byte	0
 2397 003e 00        		.byte	0
 2398 003f 00        		.byte	0
 2399 0040 00        		.byte	0
 2400 0041 00        		.byte	0
 2401 0042 00        		.byte	0
 2402 0043 00        		.byte	0
 2403 0044 00        		.byte	0
 2404 0045 00        		.byte	0
 2405 0046 00        		.byte	0
 2406 0047 00        		.byte	0
 2407 0048 00        		.byte	0
 2408 0049 00        		.byte	0
 2409 004a 00        		.byte	0
 2410 004b 00        		.byte	0
 2411 004c 00        		.byte	0
 2412 004d 00        		.byte	0
 2413 004e 00        		.byte	0
 2414 004f 00        		.byte	0
 2415 0050 00        		.byte	0
 2416 0051 00        		.byte	0
 2417 0052 00        		.byte	0
 2418 0053 00        		.byte	0
 2419 0054 00        		.byte	0
 2420 0055 00        		.byte	0
 2421 0056 00        		.byte	0
 2422 0057 00        		.byte	0
 2423 0058 00        		.byte	0
 2424 0059 00        		.byte	0
 2425 005a 00        		.byte	0
 2426 005b 00        		.byte	0
 2427 005c 00        		.byte	0
 2428 005d 00        		.byte	0
 2429 005e 00        		.byte	0
 2430 005f 00        		.byte	0
 2431 0060 00        		.byte	0
 2432 0061 00        		.byte	0
 2433 0062 00        		.byte	0
 2434 0063 00        		.byte	0
 2435 0064 00        		.byte	0
 2436 0065 00        		.byte	0
 2437 0066 00        		.byte	0
 2438 0067 00        		.byte	0
 2439 0068 00        		.byte	0
 2440 0069 00        		.byte	0
 2441 006a 00        		.byte	0
 2442 006b 00        		.byte	0
 2443 006c 00        		.byte	0
 2444 006d 00        		.byte	0
 2445 006e 00        		.byte	0
 2446 006f 00        		.byte	0
 2447 0070 00        		.byte	0
 2448 0071 00        		.byte	0
 2449 0072 00        		.byte	0
 2450 0073 00        		.byte	0
 2451 0074 00        		.byte	0
 2452 0075 00        		.byte	0
 2453 0076 00        		.byte	0
 2454 0077 00        		.byte	0
 2455 0078 00        		.byte	0
 2456 0079 00        		.byte	0
 2457 007a 00        		.byte	0
 2458 007b 00        		.byte	0
 2459 007c 00        		.byte	0
 2460 007d 00        		.byte	0
 2461 007e 00        		.byte	0
 2462 007f 00        		.byte	0
 2463 0080 00        		.byte	0
 2464 0081 00        		.byte	0
 2465 0082 00        		.byte	0
 2466 0083 00        		.byte	0
 2467 0084 00        		.byte	0
 2468 0085 00        		.byte	0
 2469 0086 00        		.byte	0
 2470 0087 00        		.byte	0
 2471 0088 00        		.byte	0
 2472 0089 00        		.byte	0
 2473 008a 00        		.byte	0
 2474 008b 00        		.byte	0
 2475 008c 00        		.byte	0
 2476 008d 00        		.byte	0
 2477 008e 00        		.byte	0
 2478 008f 00        		.byte	0
 2479 0090 00        		.byte	0
 2480 0091 00        		.byte	0
 2481 0092 00        		.byte	0
 2482 0093 C0        		.byte	-64
 2483 0094 E0        		.byte	-32
 2484 0095 F0        		.byte	-16
 2485 0096 F8        		.byte	-8
 2486 0097 F8        		.byte	-8
 2487 0098 FC        		.byte	-4
 2488 0099 FC        		.byte	-4
 2489 009a FC        		.byte	-4
 2490 009b FC        		.byte	-4
 2491 009c E0        		.byte	-32
 2492 009d 00        		.byte	0
 2493 009e 00        		.byte	0
 2494 009f 00        		.byte	0
 2495 00a0 00        		.byte	0
 2496 00a1 00        		.byte	0
 2497 00a2 00        		.byte	0
 2498 00a3 00        		.byte	0
 2499 00a4 00        		.byte	0
 2500 00a5 00        		.byte	0
 2501 00a6 00        		.byte	0
 2502 00a7 00        		.byte	0
 2503 00a8 00        		.byte	0
 2504 00a9 00        		.byte	0
 2505 00aa 00        		.byte	0
 2506 00ab 00        		.byte	0
 2507 00ac 00        		.byte	0
 2508 00ad 00        		.byte	0
 2509 00ae 00        		.byte	0
 2510 00af 00        		.byte	0
 2511 00b0 00        		.byte	0
 2512 00b1 00        		.byte	0
 2513 00b2 00        		.byte	0
 2514 00b3 00        		.byte	0
 2515 00b4 00        		.byte	0
 2516 00b5 00        		.byte	0
 2517 00b6 00        		.byte	0
 2518 00b7 00        		.byte	0
 2519 00b8 00        		.byte	0
 2520 00b9 00        		.byte	0
 2521 00ba 00        		.byte	0
 2522 00bb 00        		.byte	0
 2523 00bc 00        		.byte	0
 2524 00bd 00        		.byte	0
 2525 00be 00        		.byte	0
 2526 00bf 00        		.byte	0
 2527 00c0 00        		.byte	0
 2528 00c1 00        		.byte	0
 2529 00c2 FE        		.byte	-2
 2530 00c3 FC        		.byte	-4
 2531 00c4 00        		.byte	0
 2532 00c5 00        		.byte	0
 2533 00c6 00        		.byte	0
 2534 00c7 00        		.byte	0
 2535 00c8 00        		.byte	0
 2536 00c9 00        		.byte	0
 2537 00ca 00        		.byte	0
 2538 00cb 00        		.byte	0
 2539 00cc 00        		.byte	0
 2540 00cd 00        		.byte	0
 2541 00ce 00        		.byte	0
 2542 00cf 00        		.byte	0
 2543 00d0 00        		.byte	0
 2544 00d1 00        		.byte	0
 2545 00d2 F8        		.byte	-8
 2546 00d3 FC        		.byte	-4
 2547 00d4 0E        		.byte	14
 2548 00d5 0E        		.byte	14
 2549 00d6 00        		.byte	0
 2550 00d7 00        		.byte	0
 2551 00d8 00        		.byte	0
 2552 00d9 00        		.byte	0
 2553 00da 00        		.byte	0
 2554 00db 00        		.byte	0
 2555 00dc 00        		.byte	0
 2556 00dd 00        		.byte	0
 2557 00de 00        		.byte	0
 2558 00df 00        		.byte	0
 2559 00e0 00        		.byte	0
 2560 00e1 00        		.byte	0
 2561 00e2 00        		.byte	0
 2562 00e3 00        		.byte	0
 2563 00e4 00        		.byte	0
 2564 00e5 00        		.byte	0
 2565 00e6 00        		.byte	0
 2566 00e7 00        		.byte	0
 2567 00e8 00        		.byte	0
 2568 00e9 60        		.byte	96
 2569 00ea 60        		.byte	96
 2570 00eb 00        		.byte	0
 2571 00ec 00        		.byte	0
 2572 00ed 00        		.byte	0
 2573 00ee C0        		.byte	-64
 2574 00ef C0        		.byte	-64
 2575 00f0 00        		.byte	0
 2576 00f1 00        		.byte	0
 2577 00f2 00        		.byte	0
 2578 00f3 00        		.byte	0
 2579 00f4 00        		.byte	0
 2580 00f5 00        		.byte	0
 2581 00f6 00        		.byte	0
 2582 00f7 00        		.byte	0
 2583 00f8 00        		.byte	0
 2584 00f9 00        		.byte	0
 2585 00fa 00        		.byte	0
 2586 00fb 00        		.byte	0
 2587 00fc 00        		.byte	0
 2588 00fd 00        		.byte	0
 2589 00fe 00        		.byte	0
 2590 00ff 00        		.byte	0
 2591 0100 F8        		.byte	-8
 2592 0101 F8        		.byte	-8
 2593 0102 F8        		.byte	-8
 2594 0103 F8        		.byte	-8
 2595 0104 F8        		.byte	-8
 2596 0105 F8        		.byte	-8
 2597 0106 F8        		.byte	-8
 2598 0107 F8        		.byte	-8
 2599 0108 F8        		.byte	-8
 2600 0109 F8        		.byte	-8
 2601 010a F8        		.byte	-8
 2602 010b F8        		.byte	-8
 2603 010c F8        		.byte	-8
 2604 010d F0        		.byte	-16
 2605 010e E0        		.byte	-32
 2606 010f E0        		.byte	-32
 2607 0110 E0        		.byte	-32
 2608 0111 FC        		.byte	-4
 2609 0112 FF        		.byte	-1
 2610 0113 FF        		.byte	-1
 2611 0114 FF        		.byte	-1
 2612 0115 FF        		.byte	-1
 2613 0116 FF        		.byte	-1
 2614 0117 7F        		.byte	127
 2615 0118 FF        		.byte	-1
 2616 0119 FF        		.byte	-1
 2617 011a FF        		.byte	-1
 2618 011b FF        		.byte	-1
 2619 011c FF        		.byte	-1
 2620 011d 7C        		.byte	124
 2621 011e 00        		.byte	0
 2622 011f 00        		.byte	0
 2623 0120 00        		.byte	0
 2624 0121 00        		.byte	0
 2625 0122 00        		.byte	0
 2626 0123 00        		.byte	0
 2627 0124 00        		.byte	0
 2628 0125 00        		.byte	0
 2629 0126 00        		.byte	0
 2630 0127 00        		.byte	0
 2631 0128 00        		.byte	0
 2632 0129 00        		.byte	0
 2633 012a 00        		.byte	0
 2634 012b 00        		.byte	0
 2635 012c 00        		.byte	0
 2636 012d 00        		.byte	0
 2637 012e F0        		.byte	-16
 2638 012f FC        		.byte	-4
 2639 0130 0E        		.byte	14
 2640 0131 06        		.byte	6
 2641 0132 06        		.byte	6
 2642 0133 06        		.byte	6
 2643 0134 06        		.byte	6
 2644 0135 0C        		.byte	12
 2645 0136 FE        		.byte	-2
 2646 0137 FC        		.byte	-4
 2647 0138 00        		.byte	0
 2648 0139 00        		.byte	0
 2649 013a F8        		.byte	-8
 2650 013b FC        		.byte	-4
 2651 013c 0E        		.byte	14
 2652 013d 06        		.byte	6
 2653 013e 06        		.byte	6
 2654 013f 06        		.byte	6
 2655 0140 06        		.byte	6
 2656 0141 9C        		.byte	-100
 2657 0142 FF        		.byte	-1
 2658 0143 FF        		.byte	-1
 2659 0144 00        		.byte	0
 2660 0145 60        		.byte	96
 2661 0146 F8        		.byte	-8
 2662 0147 9C        		.byte	-100
 2663 0148 06        		.byte	6
 2664 0149 06        		.byte	6
 2665 014a 06        		.byte	6
 2666 014b 06        		.byte	6
 2667 014c 0C        		.byte	12
 2668 014d FC        		.byte	-4
 2669 014e FE        		.byte	-2
 2670 014f 00        		.byte	0
 2671 0150 00        		.byte	0
 2672 0151 06        		.byte	6
 2673 0152 FF        		.byte	-1
 2674 0153 FF        		.byte	-1
 2675 0154 06        		.byte	6
 2676 0155 06        		.byte	6
 2677 0156 00        		.byte	0
 2678 0157 FE        		.byte	-2
 2679 0158 FE        		.byte	-2
 2680 0159 0E        		.byte	14
 2681 015a 06        		.byte	6
 2682 015b 06        		.byte	6
 2683 015c 02        		.byte	2
 2684 015d 00        		.byte	0
 2685 015e FE        		.byte	-2
 2686 015f FE        		.byte	-2
 2687 0160 00        		.byte	0
 2688 0161 00        		.byte	0
 2689 0162 00        		.byte	0
 2690 0163 00        		.byte	0
 2691 0164 FE        		.byte	-2
 2692 0165 FE        		.byte	-2
 2693 0166 00        		.byte	0
 2694 0167 00        		.byte	0
 2695 0168 00        		.byte	0
 2696 0169 FE        		.byte	-2
 2697 016a FE        		.byte	-2
 2698 016b 00        		.byte	0
 2699 016c 00        		.byte	0
 2700 016d 06        		.byte	6
 2701 016e FF        		.byte	-1
 2702 016f FF        		.byte	-1
 2703 0170 06        		.byte	6
 2704 0171 06        		.byte	6
 2705 0172 00        		.byte	0
 2706 0173 00        		.byte	0
 2707 0174 00        		.byte	0
 2708 0175 00        		.byte	0
 2709 0176 00        		.byte	0
 2710 0177 00        		.byte	0
 2711 0178 00        		.byte	0
 2712 0179 00        		.byte	0
 2713 017a 00        		.byte	0
 2714 017b 00        		.byte	0
 2715 017c 00        		.byte	0
 2716 017d 00        		.byte	0
 2717 017e 00        		.byte	0
 2718 017f 00        		.byte	0
 2719 0180 01        		.byte	1
 2720 0181 1F        		.byte	31
 2721 0182 3F        		.byte	63
 2722 0183 7F        		.byte	127
 2723 0184 7F        		.byte	127
 2724 0185 FF        		.byte	-1
 2725 0186 FF        		.byte	-1
 2726 0187 FF        		.byte	-1
 2727 0188 FF        		.byte	-1
 2728 0189 FF        		.byte	-1
 2729 018a FF        		.byte	-1
 2730 018b FF        		.byte	-1
 2731 018c F7        		.byte	-9
 2732 018d E7        		.byte	-25
 2733 018e E7        		.byte	-25
 2734 018f C7        		.byte	-57
 2735 0190 CF        		.byte	-49
 2736 0191 9F        		.byte	-97
 2737 0192 FF        		.byte	-1
 2738 0193 FF        		.byte	-1
 2739 0194 FF        		.byte	-1
 2740 0195 EF        		.byte	-17
 2741 0196 E0        		.byte	-32
 2742 0197 F8        		.byte	-8
 2743 0198 FF        		.byte	-1
 2744 0199 FF        		.byte	-1
 2745 019a FF        		.byte	-1
 2746 019b FF        		.byte	-1
 2747 019c FF        		.byte	-1
 2748 019d FF        		.byte	-1
 2749 019e FE        		.byte	-2
 2750 019f FF        		.byte	-1
 2751 01a0 FE        		.byte	-2
 2752 01a1 FE        		.byte	-2
 2753 01a2 FE        		.byte	-2
 2754 01a3 FE        		.byte	-2
 2755 01a4 FE        		.byte	-2
 2756 01a5 FE        		.byte	-2
 2757 01a6 FC        		.byte	-4
 2758 01a7 FC        		.byte	-4
 2759 01a8 F8        		.byte	-8
 2760 01a9 F0        		.byte	-16
 2761 01aa E0        		.byte	-32
 2762 01ab C0        		.byte	-64
 2763 01ac 00        		.byte	0
 2764 01ad 00        		.byte	0
 2765 01ae 00        		.byte	0
 2766 01af 03        		.byte	3
 2767 01b0 07        		.byte	7
 2768 01b1 06        		.byte	6
 2769 01b2 04        		.byte	4
 2770 01b3 04        		.byte	4
 2771 01b4 06        		.byte	6
 2772 01b5 07        		.byte	7
 2773 01b6 07        		.byte	7
 2774 01b7 07        		.byte	7
 2775 01b8 00        		.byte	0
 2776 01b9 00        		.byte	0
 2777 01ba 01        		.byte	1
 2778 01bb 03        		.byte	3
 2779 01bc 07        		.byte	7
 2780 01bd 06        		.byte	6
 2781 01be 04        		.byte	4
 2782 01bf 06        		.byte	6
 2783 01c0 06        		.byte	6
 2784 01c1 07        		.byte	7
 2785 01c2 07        		.byte	7
 2786 01c3 07        		.byte	7
 2787 01c4 00        		.byte	0
 2788 01c5 00        		.byte	0
 2789 01c6 01        		.byte	1
 2790 01c7 03        		.byte	3
 2791 01c8 06        		.byte	6
 2792 01c9 06        		.byte	6
 2793 01ca 04        		.byte	4
 2794 01cb 06        		.byte	6
 2795 01cc 06        		.byte	6
 2796 01cd 07        		.byte	7
 2797 01ce 07        		.byte	7
 2798 01cf 00        		.byte	0
 2799 01d0 00        		.byte	0
 2800 01d1 00        		.byte	0
 2801 01d2 07        		.byte	7
 2802 01d3 07        		.byte	7
 2803 01d4 00        		.byte	0
 2804 01d5 00        		.byte	0
 2805 01d6 00        		.byte	0
 2806 01d7 07        		.byte	7
 2807 01d8 07        		.byte	7
 2808 01d9 00        		.byte	0
 2809 01da 00        		.byte	0
 2810 01db 00        		.byte	0
 2811 01dc 00        		.byte	0
 2812 01dd 00        		.byte	0
 2813 01de 01        		.byte	1
 2814 01df 07        		.byte	7
 2815 01e0 06        		.byte	6
 2816 01e1 06        		.byte	6
 2817 01e2 06        		.byte	6
 2818 01e3 06        		.byte	6
 2819 01e4 07        		.byte	7
 2820 01e5 01        		.byte	1
 2821 01e6 00        		.byte	0
 2822 01e7 00        		.byte	0
 2823 01e8 00        		.byte	0
 2824 01e9 07        		.byte	7
 2825 01ea 07        		.byte	7
 2826 01eb 00        		.byte	0
 2827 01ec 00        		.byte	0
 2828 01ed 00        		.byte	0
 2829 01ee 07        		.byte	7
 2830 01ef 07        		.byte	7
 2831 01f0 00        		.byte	0
 2832 01f1 00        		.byte	0
 2833 01f2 00        		.byte	0
 2834 01f3 00        		.byte	0
 2835 01f4 00        		.byte	0
 2836 01f5 00        		.byte	0
 2837 01f6 00        		.byte	0
 2838 01f7 00        		.byte	0
 2839 01f8 00        		.byte	0
 2840 01f9 00        		.byte	0
 2841 01fa 00        		.byte	0
 2842 01fb 00        		.byte	0
 2843 01fc 00        		.byte	0
 2844 01fd 00        		.byte	0
 2845 01fe 00        		.byte	0
 2846 01ff 00        		.byte	0
 2847 0200 00        		.byte	0
 2848 0201 00        		.byte	0
 2849 0202 00        		.byte	0
 2850 0203 C0        		.byte	-64
 2851 0204 E0        		.byte	-32
 2852 0205 F8        		.byte	-8
 2853 0206 F9        		.byte	-7
 2854 0207 FF        		.byte	-1
 2855 0208 FF        		.byte	-1
 2856 0209 FF        		.byte	-1
 2857 020a FF        		.byte	-1
 2858 020b FF        		.byte	-1
 2859 020c FF        		.byte	-1
 2860 020d BF        		.byte	-65
 2861 020e 8F        		.byte	-113
 2862 020f C7        		.byte	-57
 2863 0210 C7        		.byte	-57
 2864 0211 F3        		.byte	-13
 2865 0212 FF        		.byte	-1
 2866 0213 FF        		.byte	-1
 2867 0214 FF        		.byte	-1
 2868 0215 FF        		.byte	-1
 2869 0216 0F        		.byte	15
 2870 0217 3F        		.byte	63
 2871 0218 FE        		.byte	-2
 2872 0219 FC        		.byte	-4
 2873 021a FC        		.byte	-4
 2874 021b FC        		.byte	-4
 2875 021c FC        		.byte	-4
 2876 021d FE        		.byte	-2
 2877 021e FF        		.byte	-1
 2878 021f FF        		.byte	-1
 2879 0220 FF        		.byte	-1
 2880 0221 FF        		.byte	-1
 2881 0222 FF        		.byte	-1
 2882 0223 FF        		.byte	-1
 2883 0224 FF        		.byte	-1
 2884 0225 FF        		.byte	-1
 2885 0226 FF        		.byte	-1
 2886 0227 7F        		.byte	127
 2887 0228 3F        		.byte	63
 2888 0229 0F        		.byte	15
 2889 022a 07        		.byte	7
 2890 022b 01        		.byte	1
 2891 022c 00        		.byte	0
 2892 022d 00        		.byte	0
 2893 022e 00        		.byte	0
 2894 022f 30        		.byte	48
 2895 0230 38        		.byte	56
 2896 0231 00        		.byte	0
 2897 0232 00        		.byte	0
 2898 0233 00        		.byte	0
 2899 0234 00        		.byte	0
 2900 0235 00        		.byte	0
 2901 0236 00        		.byte	0
 2902 0237 00        		.byte	0
 2903 0238 00        		.byte	0
 2904 0239 00        		.byte	0
 2905 023a 00        		.byte	0
 2906 023b 00        		.byte	0
 2907 023c 00        		.byte	0
 2908 023d 00        		.byte	0
 2909 023e 00        		.byte	0
 2910 023f 00        		.byte	0
 2911 0240 00        		.byte	0
 2912 0241 00        		.byte	0
 2913 0242 00        		.byte	0
 2914 0243 00        		.byte	0
 2915 0244 00        		.byte	0
 2916 0245 00        		.byte	0
 2917 0246 FE        		.byte	-2
 2918 0247 FE        		.byte	-2
 2919 0248 00        		.byte	0
 2920 0249 00        		.byte	0
 2921 024a 00        		.byte	0
 2922 024b 00        		.byte	0
 2923 024c 00        		.byte	0
 2924 024d 00        		.byte	0
 2925 024e 00        		.byte	0
 2926 024f 00        		.byte	0
 2927 0250 00        		.byte	0
 2928 0251 00        		.byte	0
 2929 0252 00        		.byte	0
 2930 0253 00        		.byte	0
 2931 0254 00        		.byte	0
 2932 0255 00        		.byte	0
 2933 0256 00        		.byte	0
 2934 0257 00        		.byte	0
 2935 0258 00        		.byte	0
 2936 0259 00        		.byte	0
 2937 025a 00        		.byte	0
 2938 025b 00        		.byte	0
 2939 025c 00        		.byte	0
 2940 025d E0        		.byte	-32
 2941 025e E0        		.byte	-32
 2942 025f 00        		.byte	0
 2943 0260 00        		.byte	0
 2944 0261 00        		.byte	0
 2945 0262 00        		.byte	0
 2946 0263 00        		.byte	0
 2947 0264 00        		.byte	0
 2948 0265 00        		.byte	0
 2949 0266 00        		.byte	0
 2950 0267 00        		.byte	0
 2951 0268 00        		.byte	0
 2952 0269 38        		.byte	56
 2953 026a 30        		.byte	48
 2954 026b 00        		.byte	0
 2955 026c 00        		.byte	0
 2956 026d 00        		.byte	0
 2957 026e 00        		.byte	0
 2958 026f 00        		.byte	0
 2959 0270 00        		.byte	0
 2960 0271 00        		.byte	0
 2961 0272 00        		.byte	0
 2962 0273 00        		.byte	0
 2963 0274 00        		.byte	0
 2964 0275 00        		.byte	0
 2965 0276 00        		.byte	0
 2966 0277 00        		.byte	0
 2967 0278 00        		.byte	0
 2968 0279 00        		.byte	0
 2969 027a 00        		.byte	0
 2970 027b 00        		.byte	0
 2971 027c 00        		.byte	0
 2972 027d 00        		.byte	0
 2973 027e 00        		.byte	0
 2974 027f 00        		.byte	0
 2975 0280 00        		.byte	0
 2976 0281 E0        		.byte	-32
 2977 0282 FF        		.byte	-1
 2978 0283 FF        		.byte	-1
 2979 0284 FF        		.byte	-1
 2980 0285 FF        		.byte	-1
 2981 0286 FF        		.byte	-1
 2982 0287 FF        		.byte	-1
 2983 0288 FF        		.byte	-1
 2984 0289 FF        		.byte	-1
 2985 028a 7F        		.byte	127
 2986 028b 7F        		.byte	127
 2987 028c 7F        		.byte	127
 2988 028d 7F        		.byte	127
 2989 028e 3F        		.byte	63
 2990 028f 1F        		.byte	31
 2991 0290 1F        		.byte	31
 2992 0291 0F        		.byte	15
 2993 0292 7F        		.byte	127
 2994 0293 FF        		.byte	-1
 2995 0294 FF        		.byte	-1
 2996 0295 FF        		.byte	-1
 2997 0296 FE        		.byte	-2
 2998 0297 FC        		.byte	-4
 2999 0298 FF        		.byte	-1
 3000 0299 FF        		.byte	-1
 3001 029a FF        		.byte	-1
 3002 029b FF        		.byte	-1
 3003 029c FF        		.byte	-1
 3004 029d FF        		.byte	-1
 3005 029e FF        		.byte	-1
 3006 029f F8        		.byte	-8
 3007 02a0 00        		.byte	0
 3008 02a1 00        		.byte	0
 3009 02a2 00        		.byte	0
 3010 02a3 00        		.byte	0
 3011 02a4 00        		.byte	0
 3012 02a5 00        		.byte	0
 3013 02a6 00        		.byte	0
 3014 02a7 00        		.byte	0
 3015 02a8 00        		.byte	0
 3016 02a9 00        		.byte	0
 3017 02aa 00        		.byte	0
 3018 02ab 00        		.byte	0
 3019 02ac 00        		.byte	0
 3020 02ad 00        		.byte	0
 3021 02ae 00        		.byte	0
 3022 02af FF        		.byte	-1
 3023 02b0 FF        		.byte	-1
 3024 02b1 00        		.byte	0
 3025 02b2 00        		.byte	0
 3026 02b3 00        		.byte	0
 3027 02b4 FF        		.byte	-1
 3028 02b5 FF        		.byte	-1
 3029 02b6 07        		.byte	7
 3030 02b7 03        		.byte	3
 3031 02b8 03        		.byte	3
 3032 02b9 03        		.byte	3
 3033 02ba FF        		.byte	-1
 3034 02bb FE        		.byte	-2
 3035 02bc 00        		.byte	0
 3036 02bd 00        		.byte	0
 3037 02be 78        		.byte	120
 3038 02bf FE        		.byte	-2
 3039 02c0 87        		.byte	-121
 3040 02c1 03        		.byte	3
 3041 02c2 03        		.byte	3
 3042 02c3 03        		.byte	3
 3043 02c4 03        		.byte	3
 3044 02c5 86        		.byte	-122
 3045 02c6 FF        		.byte	-1
 3046 02c7 FF        		.byte	-1
 3047 02c8 00        		.byte	0
 3048 02c9 00        		.byte	0
 3049 02ca 7F        		.byte	127
 3050 02cb FF        		.byte	-1
 3051 02cc 80        		.byte	-128
 3052 02cd 00        		.byte	0
 3053 02ce 00        		.byte	0
 3054 02cf 00        		.byte	0
 3055 02d0 FF        		.byte	-1
 3056 02d1 FF        		.byte	-1
 3057 02d2 00        		.byte	0
 3058 02d3 00        		.byte	0
 3059 02d4 84        		.byte	-124
 3060 02d5 9F        		.byte	-97
 3061 02d6 1F        		.byte	31
 3062 02d7 3B        		.byte	59
 3063 02d8 33        		.byte	51
 3064 02d9 F3        		.byte	-13
 3065 02da E0        		.byte	-32
 3066 02db 00        		.byte	0
 3067 02dc 03        		.byte	3
 3068 02dd FF        		.byte	-1
 3069 02de FF        		.byte	-1
 3070 02df 03        		.byte	3
 3071 02e0 01        		.byte	1
 3072 02e1 00        		.byte	0
 3073 02e2 FF        		.byte	-1
 3074 02e3 FF        		.byte	-1
 3075 02e4 03        		.byte	3
 3076 02e5 03        		.byte	3
 3077 02e6 01        		.byte	1
 3078 02e7 00        		.byte	0
 3079 02e8 00        		.byte	0
 3080 02e9 FF        		.byte	-1
 3081 02ea FF        		.byte	-1
 3082 02eb 00        		.byte	0
 3083 02ec 00        		.byte	0
 3084 02ed F8        		.byte	-8
 3085 02ee FE        		.byte	-2
 3086 02ef 9F        		.byte	-97
 3087 02f0 13        		.byte	19
 3088 02f1 13        		.byte	19
 3089 02f2 13        		.byte	19
 3090 02f3 13        		.byte	19
 3091 02f4 9E        		.byte	-98
 3092 02f5 9C        		.byte	-100
 3093 02f6 00        		.byte	0
 3094 02f7 00        		.byte	0
 3095 02f8 8E        		.byte	-114
 3096 02f9 9F        		.byte	-97
 3097 02fa 1B        		.byte	27
 3098 02fb 33        		.byte	51
 3099 02fc 73        		.byte	115
 3100 02fd E2        		.byte	-30
 3101 02fe C0        		.byte	-64
 3102 02ff 00        		.byte	0
 3103 0300 00        		.byte	0
 3104 0301 00        		.byte	0
 3105 0302 00        		.byte	0
 3106 0303 00        		.byte	0
 3107 0304 01        		.byte	1
 3108 0305 01        		.byte	1
 3109 0306 00        		.byte	0
 3110 0307 00        		.byte	0
 3111 0308 00        		.byte	0
 3112 0309 00        		.byte	0
 3113 030a 00        		.byte	0
 3114 030b 00        		.byte	0
 3115 030c 00        		.byte	0
 3116 030d 00        		.byte	0
 3117 030e 00        		.byte	0
 3118 030f 00        		.byte	0
 3119 0310 00        		.byte	0
 3120 0311 00        		.byte	0
 3121 0312 00        		.byte	0
 3122 0313 01        		.byte	1
 3123 0314 03        		.byte	3
 3124 0315 07        		.byte	7
 3125 0316 0F        		.byte	15
 3126 0317 1F        		.byte	31
 3127 0318 1F        		.byte	31
 3128 0319 3F        		.byte	63
 3129 031a 3F        		.byte	63
 3130 031b 3F        		.byte	63
 3131 031c 3F        		.byte	63
 3132 031d 1F        		.byte	31
 3133 031e 0F        		.byte	15
 3134 031f 03        		.byte	3
 3135 0320 00        		.byte	0
 3136 0321 00        		.byte	0
 3137 0322 00        		.byte	0
 3138 0323 00        		.byte	0
 3139 0324 00        		.byte	0
 3140 0325 00        		.byte	0
 3141 0326 00        		.byte	0
 3142 0327 00        		.byte	0
 3143 0328 00        		.byte	0
 3144 0329 00        		.byte	0
 3145 032a 00        		.byte	0
 3146 032b 00        		.byte	0
 3147 032c 00        		.byte	0
 3148 032d 00        		.byte	0
 3149 032e 00        		.byte	0
 3150 032f 03        		.byte	3
 3151 0330 03        		.byte	3
 3152 0331 00        		.byte	0
 3153 0332 00        		.byte	0
 3154 0333 00        		.byte	0
 3155 0334 03        		.byte	3
 3156 0335 03        		.byte	3
 3157 0336 00        		.byte	0
 3158 0337 00        		.byte	0
 3159 0338 00        		.byte	0
 3160 0339 00        		.byte	0
 3161 033a 03        		.byte	3
 3162 033b 03        		.byte	3
 3163 033c 00        		.byte	0
 3164 033d 00        		.byte	0
 3165 033e 00        		.byte	0
 3166 033f 01        		.byte	1
 3167 0340 03        		.byte	3
 3168 0341 03        		.byte	3
 3169 0342 03        		.byte	3
 3170 0343 03        		.byte	3
 3171 0344 03        		.byte	3
 3172 0345 01        		.byte	1
 3173 0346 03        		.byte	3
 3174 0347 03        		.byte	3
 3175 0348 00        		.byte	0
 3176 0349 00        		.byte	0
 3177 034a 00        		.byte	0
 3178 034b 01        		.byte	1
 3179 034c 03        		.byte	3
 3180 034d 03        		.byte	3
 3181 034e 03        		.byte	3
 3182 034f 03        		.byte	3
 3183 0350 03        		.byte	3
 3184 0351 01        		.byte	1
 3185 0352 00        		.byte	0
 3186 0353 00        		.byte	0
 3187 0354 01        		.byte	1
 3188 0355 03        		.byte	3
 3189 0356 03        		.byte	3
 3190 0357 03        		.byte	3
 3191 0358 03        		.byte	3
 3192 0359 03        		.byte	3
 3193 035a 00        		.byte	0
 3194 035b 00        		.byte	0
 3195 035c 00        		.byte	0
 3196 035d 03        		.byte	3
 3197 035e 03        		.byte	3
 3198 035f 00        		.byte	0
 3199 0360 00        		.byte	0
 3200 0361 00        		.byte	0
 3201 0362 03        		.byte	3
 3202 0363 01        		.byte	1
 3203 0364 00        		.byte	0
 3204 0365 00        		.byte	0
 3205 0366 00        		.byte	0
 3206 0367 00        		.byte	0
 3207 0368 00        		.byte	0
 3208 0369 03        		.byte	3
 3209 036a 03        		.byte	3
 3210 036b 00        		.byte	0
 3211 036c 00        		.byte	0
 3212 036d 00        		.byte	0
 3213 036e 01        		.byte	1
 3214 036f 03        		.byte	3
 3215 0370 03        		.byte	3
 3216 0371 03        		.byte	3
 3217 0372 03        		.byte	3
 3218 0373 03        		.byte	3
 3219 0374 01        		.byte	1
 3220 0375 01        		.byte	1
 3221 0376 00        		.byte	0
 3222 0377 00        		.byte	0
 3223 0378 01        		.byte	1
 3224 0379 03        		.byte	3
 3225 037a 03        		.byte	3
 3226 037b 03        		.byte	3
 3227 037c 03        		.byte	3
 3228 037d 01        		.byte	1
 3229 037e 00        		.byte	0
 3230 037f 00        		.byte	0
 3231 0380 00        		.byte	0
 3232 0381 00        		.byte	0
 3233 0382 00        		.byte	0
 3234 0383 00        		.byte	0
 3235 0384 00        		.byte	0
 3236 0385 00        		.byte	0
 3237 0386 00        		.byte	0
 3238 0387 00        		.byte	0
 3239 0388 00        		.byte	0
 3240 0389 00        		.byte	0
 3241 038a 00        		.byte	0
 3242 038b 00        		.byte	0
 3243 038c 00        		.byte	0
 3244 038d 00        		.byte	0
 3245 038e 00        		.byte	0
 3246 038f 00        		.byte	0
 3247 0390 00        		.byte	0
 3248 0391 00        		.byte	0
 3249 0392 00        		.byte	0
 3250 0393 00        		.byte	0
 3251 0394 00        		.byte	0
 3252 0395 00        		.byte	0
 3253 0396 00        		.byte	0
 3254 0397 00        		.byte	0
 3255 0398 00        		.byte	0
 3256 0399 00        		.byte	0
 3257 039a 00        		.byte	0
 3258 039b 00        		.byte	0
 3259 039c 00        		.byte	0
 3260 039d 00        		.byte	0
 3261 039e 00        		.byte	0
 3262 039f 00        		.byte	0
 3263 03a0 00        		.byte	0
 3264 03a1 00        		.byte	0
 3265 03a2 00        		.byte	0
 3266 03a3 00        		.byte	0
 3267 03a4 00        		.byte	0
 3268 03a5 00        		.byte	0
 3269 03a6 00        		.byte	0
 3270 03a7 00        		.byte	0
 3271 03a8 00        		.byte	0
 3272 03a9 00        		.byte	0
 3273 03aa 00        		.byte	0
 3274 03ab 00        		.byte	0
 3275 03ac 00        		.byte	0
 3276 03ad 00        		.byte	0
 3277 03ae 00        		.byte	0
 3278 03af 00        		.byte	0
 3279 03b0 00        		.byte	0
 3280 03b1 00        		.byte	0
 3281 03b2 00        		.byte	0
 3282 03b3 00        		.byte	0
 3283 03b4 00        		.byte	0
 3284 03b5 00        		.byte	0
 3285 03b6 00        		.byte	0
 3286 03b7 00        		.byte	0
 3287 03b8 00        		.byte	0
 3288 03b9 00        		.byte	0
 3289 03ba 00        		.byte	0
 3290 03bb 00        		.byte	0
 3291 03bc 00        		.byte	0
 3292 03bd 00        		.byte	0
 3293 03be 00        		.byte	0
 3294 03bf 00        		.byte	0
 3295 03c0 00        		.byte	0
 3296 03c1 00        		.byte	0
 3297 03c2 00        		.byte	0
 3298 03c3 00        		.byte	0
 3299 03c4 00        		.byte	0
 3300 03c5 00        		.byte	0
 3301 03c6 00        		.byte	0
 3302 03c7 00        		.byte	0
 3303 03c8 00        		.byte	0
 3304 03c9 00        		.byte	0
 3305 03ca 00        		.byte	0
 3306 03cb 00        		.byte	0
 3307 03cc 00        		.byte	0
 3308 03cd 00        		.byte	0
 3309 03ce 00        		.byte	0
 3310 03cf 00        		.byte	0
 3311 03d0 00        		.byte	0
 3312 03d1 00        		.byte	0
 3313 03d2 00        		.byte	0
 3314 03d3 00        		.byte	0
 3315 03d4 00        		.byte	0
 3316 03d5 00        		.byte	0
 3317 03d6 00        		.byte	0
 3318 03d7 00        		.byte	0
 3319 03d8 00        		.byte	0
 3320 03d9 00        		.byte	0
 3321 03da 00        		.byte	0
 3322 03db 00        		.byte	0
 3323 03dc 00        		.byte	0
 3324 03dd 00        		.byte	0
 3325 03de 00        		.byte	0
 3326 03df 00        		.byte	0
 3327 03e0 00        		.byte	0
 3328 03e1 00        		.byte	0
 3329 03e2 00        		.byte	0
 3330 03e3 00        		.byte	0
 3331 03e4 00        		.byte	0
 3332 03e5 00        		.byte	0
 3333 03e6 00        		.byte	0
 3334 03e7 00        		.byte	0
 3335 03e8 00        		.byte	0
 3336 03e9 00        		.byte	0
 3337 03ea 00        		.byte	0
 3338 03eb 00        		.byte	0
 3339 03ec 00        		.byte	0
 3340 03ed 00        		.byte	0
 3341 03ee 00        		.byte	0
 3342 03ef 00        		.byte	0
 3343 03f0 00        		.byte	0
 3344 03f1 00        		.byte	0
 3345 03f2 00        		.byte	0
 3346 03f3 00        		.byte	0
 3347 03f4 00        		.byte	0
 3348 03f5 00        		.byte	0
 3349 03f6 00        		.byte	0
 3350 03f7 00        		.byte	0
 3351 03f8 00        		.byte	0
 3352 03f9 00        		.byte	0
 3353 03fa 00        		.byte	0
 3354 03fb 00        		.byte	0
 3355 03fc 00        		.byte	0
 3356 03fd 00        		.byte	0
 3357 03fe 00        		.byte	0
 3358 03ff 00        		.byte	0
 3363               		.text
 3365               	.Letext0:
 3366               		.ident	"GCC: (GNU) 4.9.3"
 3367               	.global __do_copy_data
 3368               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stlcd.c
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:4      *ABS*:000000000000003f __SREG__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:115    .text:0000000000000000 testdrawchar
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:1288   .data:0000000000000000 buffer
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:172    .text:0000000000000032 testdrawcircle
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:220    .text:0000000000000054 testdrawrect
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:284    .text:0000000000000096 testfillrect
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:349    .text:00000000000000da spiwrite
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:409    .text:0000000000000104 st7565_command
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:431    .text:000000000000010a st7565_init
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:577    .text:000000000000018c st7565_data
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:599    .text:0000000000000192 clear_screen
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:667    .text:00000000000001ce st7565_set_brightness
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:700    .text:00000000000001e2 setup
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:753    .text:0000000000000206 write_buffer
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:2316   .data:0000000000000400 pagemap
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:885    .text:00000000000002b6 testdrawbitmap
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:2334   .progmem.data:0000000000000000 logo16_glcd_bmp
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:1122   .text:000000000000040e testdrawline
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:1266   .text:00000000000004a2 get_buffer
/var/folders/jv/wcsnvvsx27q4dp2b03sf5blh0000gn/T//ccG42SdY.s:2329   .bss:0000000000000000 is_reversed

UNDEFINED SYMBOLS
__udivmodqi4
drawchar
drawcircle
drawrect
fillrect
puts
printf
srandom
random
__divmodsi4
drawbitmap
drawline
__do_copy_data
__do_clear_bss
